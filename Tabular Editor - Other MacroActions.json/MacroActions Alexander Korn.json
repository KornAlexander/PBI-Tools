{
  "Actions": [
    {
      "Name": "1. Measure Create\\1. Add From Column\\1. All columns ending with key or ID: Set Summarize By to None",
      "Enabled": "true",
      "Execute": "// Change SummarizeBy to None for All ID and Key columns ***********************************************************\\n\\n    foreach (var table in Model.Tables)\\n    {\\n        foreach (var column in table.Columns)\\n        {\\n            if (column.Name.EndsWith(\\\"Key\\\") || column.Name.EndsWith(\\\"ID\\\"))\\n            {\\n                column.SummarizeBy = AggregateFunction.None;\\n            }\\n        }\\n    }\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "1. Measure Create\\1. Add From Column\\2. Selected Measures based on Summarize By Property",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n// Ask the user if they want to add the new measure to the current table\\nDialogResult dialogResult = MessageBox.Show(\\\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\\\", \\\"Select Target Table\\\", MessageBoxButtons.YesNo);\\n\\nstring measuresTableName = Selected.Columns.First().Table.Name;\\nif (dialogResult == DialogResult.No)\\n{\\n    // Ask for the name of the measure table if the user selects \\\"No\\\"\\n    measuresTableName = Interaction.InputBox(\\\"Provide the name of the measure table\\\", \\\"Name of Measure Table\\\", \\\"Measure\\\");\\n\\n    // Check if the provided table exists\\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Create a SUM measure for every currently selected column and hide the column\\nforeach(var c in Selected.Columns)\\n{\\n    if (c.SummarizeBy.ToString().Equals(\\\"None\\\", StringComparison.OrdinalIgnoreCase))\\n    {\\n        continue;\\n    }\\n\\n    // Use the target table determined by user selection or default \\\"Measure\\\" table\\n    var measuresTable = Model.Tables[measuresTableName];\\n    var newMeasure = measuresTable.AddMeasure(\\n        /*\\\"Sum_\\\" +*/ c.Name,                            // Name\\n        /*\\\"SUM(\\\"*/ c.SummarizeBy.ToString().ToUpper() + \\\"(\\\"+ c.DaxObjectFullName + \\\")\\\",         // DAX expression\\n        c.Table.Name                                // Display Folder\\n    );\\n    \\n    // Set the format string on the new measure:\\n    newMeasure.FormatString = \\\"0.0\\\";\\n\\n    // Provide some documentation:\\n    newMeasure.Description = \\\"This measure is the sum of column \\\" + c.DaxObjectFullName;\\n\\n    // Hide the base column:\\n    c.IsHidden = true;\\n}\\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "1. Measure Create\\1. Add From Column\\3. Add Explicit Measure Auto-Create ALL Columns",
      "Enabled": "true",
      "Execute": "// Title: Auto-create explicit measures from all columns in all tables that have qualifying aggregation functions assigned \\n//  \\n// Author: Tom Martens, twitter.com/tommartens68\\n// \\n// This script, when executed, will loop through all the tables and creates explicit measure for all the columns with qualifying\\n// aggregation functions.\\n// The qualifying aggregation functions are SUM, COUNT, MIN, MAX, AVERAGE.\\n// This script can create a lot of measures, as by default the aggregation function for columns with a numeric data type is SUM.\\n// So, it is a good idea to check all columns for the proper aggregation type, e.g. the aggregation type of id columns \\n// should be set to None, as it does not make any sense to aggregate id columns.\\n// An annotation:CreatedThrough is created with a value:CreateExplicitMeasures this will help to identify the measures created\\n// using this script.\\n// What is missing, the list below shows what might be coming in subsequent iterations of the script:\\n// - the base column property hidden is not set to true\\n// - no black list is used to prevent the creation of unwanted measures\\n\\n// ***************************************************************************************************************\\n//the following variables are allowing controling the script\\nvar overwriteExistingMeasures = 0; // 1 overwrites existing measures, 0 preserves existing measures\\n\\nvar measureNameTemplate = \\\"{0} ({1}) \\\";\\n//\\\"{0} ({1}) - {2}\\\"; // String.Format is used to create the measure name. \\n//{0} will be replaced with the columnname (c.Name), {1} will be replaced with the aggregation function, and last but not least\\n//{2} will be replaced with the tablename (t.Name). Using t.Name is necessary to create a distinction between measure names if\\n//columns with the same name exist in different tables.\\n//Assuming the column name inside the table \\\"Fact Sale\\\" is \\\"Sales revenue\\\" and the aggregation function is SUM \\n//the measure name will be: \\\"Sales revenue (Sum) - Fact Sale\\\"\\n\\n//store aggregation function that qualify for measure creation to the hashset aggFunctions\\nvar aggFunctions = new HashSet<AggregateFunction>{\\n    AggregateFunction.Default, //remove this line, if you do not want to mess up your measures list by automatically created measures for all the columns that have the Default AggregateFunction assigned\\n    AggregateFunction.Sum,\\n    AggregateFunction.Count,\\n    AggregateFunction.Min,\\n    AggregateFunction.Max,\\n    AggregateFunction.Average\\n};\\n\\n//You have to be aware that by default this script will just create measures using the aggregate functions \\\"Sum\\\" or \\\"Count\\\" if\\n//the column has the aggregate function AggregateFunction.Default assigned, this is checked further down below.\\n//Also, if a column has the Default AggregateFunction assigned and is of the DataType\\n//DataType.Automatic, DataType.Unknown, or DataType.Variant, no measure is created automatically, this is checked further down below.\\n//dictDataTypeAggregateFunction = new Dictionary<DataType, string>();\\n//see this article for all the available data types: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.datatype?view=analysisservices-dotnet\\n//Of course you can change the aggregation function that will be used for different data types,\\n//as long as you are using \\\"Sum\\\" and \\\"Count\\\"\\n//Please be careful, if you change the aggregation function you might end up with multiplemeasures\\nvar dictDataTypeAggregateFunction = new Dictionary<DataType, AggregateFunction>();\\ndictDataTypeAggregateFunction.Add( DataType.Binary , AggregateFunction.Count ); //adding a key/value pair(s) to the dictionary using the Add() method\\ndictDataTypeAggregateFunction.Add( DataType.Boolean , AggregateFunction.Count );\\ndictDataTypeAggregateFunction.Add( DataType.DateTime , AggregateFunction.Count );\\ndictDataTypeAggregateFunction.Add( DataType.Decimal , AggregateFunction.Sum );\\ndictDataTypeAggregateFunction.Add( DataType.Double , AggregateFunction.Sum );\\ndictDataTypeAggregateFunction.Add( DataType.Int64 , AggregateFunction.Sum );\\ndictDataTypeAggregateFunction.Add( DataType.String , AggregateFunction.Count );\\n\\n// ***************************************************************************************************************\\n//all the stuff below this line should not be altered \\n//of course this is not valid if you have to fix my errors, make the code more efficient, \\n//or you have a thorough understanding of what you are doing\\n\\n//store all the existing measures to the list listOfMeasures\\nvar listOfMeasures = new List<string>();\\nforeach( var m in Model.AllMeasures ) {\\n    listOfMeasures.Add( m.Name );\\n}\\n\\n//loop across all tables\\nforeach( var t in Model.Tables ) {\\n    \\n    //loop across all columns of the current table t\\n    foreach( var c in t.Columns ) {\\n        \\n        var currAggFunction = c.SummarizeBy; //cache the aggregation function of the current column c\\n        var useAggFunction = AggregateFunction.Sum;\\n        var theMeasureName = \\\"\\\"; // Name of the new Measure\\n        var posInListOfMeasures = 0; //check if the new measure already exists <> -1\\n        \\n        if( aggFunctions.Contains(currAggFunction) ) //check if the current aggregation function qualifies for measure aggregation\\n        {\\n            //check if the current aggregation function is Default\\n            if( currAggFunction == AggregateFunction.Default )\\n            {\\n                // check if the datatype of the column is considered for measure creation\\n                if( dictDataTypeAggregateFunction.ContainsKey( c.DataType ) )\\n                {\\n                    \\n                    //some kind of sanity check\\n                    if( c.DataType == DataType.Automatic || c.DataType == DataType.Unknown || c.DataType == DataType.Variant )\\n                    {\\n                        Output(\\\"No measure will be created for columns with the data type: \\\" + c.DataType.ToString() + \\\" (\\\" + c.DaxObjectFullName + \\\")\\\");\\n                        continue; //moves to the next item in the foreach loop, the next colum in the current table\\n                    }\\n                  \\n                    //cache the aggregation function from the dictDataTypeAggregateFunction\\n                    useAggFunction = dictDataTypeAggregateFunction[ c.DataType ];\\n                    \\n                    //some kind of sanity check\\n                    if( useAggFunction != AggregateFunction.Count && useAggFunction != AggregateFunction.Sum ) \\n                    {    \\n                        Output(\\\"No measure will be created for the column: \\\" + c.DaxObjectFullName);\\n                        continue; //moves to the next item in the foreach loop, the next colum in the current table\\n                    }\\n                    theMeasureName = String.Format( measureNameTemplate , c.Name , useAggFunction.ToString() , t.Name ); // Name of the new Measure\\n                    posInListOfMeasures = listOfMeasures.IndexOf( theMeasureName ); //check if the new measure already exists <> -1\\n                    \\n                } else {\\n                   \\n                    continue; //moves to the next item in the foreach loop, the next colum in the current table\\n                }\\n                        \\n            } else {\\n                \\n                useAggFunction = currAggFunction;    \\n                theMeasureName = String.Format( measureNameTemplate , c.Name , useAggFunction.ToString() , t.Name ); // Name of the new Measure\\n                posInListOfMeasures = listOfMeasures.IndexOf( theMeasureName ); //check if the new measure already exists <> -1\\n                \\n            }\\n            \\n            //sanity check\\n            if(theMeasureName == \\\"\\\")\\n            {\\n                continue; //moves to the next item in the foreach loop, the next colum in the current table\\n            }\\n            \\n            // create the measure\\n            if( ( posInListOfMeasures == -1 || overwriteExistingMeasures == 1 )) \\n            {    \\n                if( overwriteExistingMeasures == 1 ) \\n                {\\n                    foreach( var m in Model.AllMeasures.Where( m => m.Name == theMeasureName ).ToList() ) \\n                    {\\n                        m.Delete();\\n                    }\\n                }\\n                \\n                var newMeasure = t.AddMeasure\\n                (\\n                    theMeasureName                                                                      // Name of the new Measure\\n                    , \\\"\\\" + useAggFunction.ToString().ToUpper() + \\\"(\\\" + c.DaxObjectFullName + \\\")\\\"        // DAX expression\\n                );\\n                \\n                newMeasure.SetAnnotation( \\\"CreatedThrough\\\" , \\\"CreateExplicitMeasures\\\" ); // flag the measures created through this script\\n                \\n            }\\n        }    \\n    }        \\n}",
      "Tooltip": "This adds for selected Tables all explicit sum measures",
      "ValidContexts": "Model, Table"
    },
    {
      "Name": "1. Measure Create\\2. Time: PY\\1. Y-1",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nvar newMeasures = new List<Measure>();\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string tableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\\n\\n    if (CalendarTable == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n\\n// Checking for Date Column otherwise prompt for user input\\nstring DateColumn = null;\\n// Check if there is a column in the CalendarTable with IsKey = true\\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\\nif (keyColumn != null)\\n{\\n    DateColumn = keyColumn.Name;\\n}\\nelse\\n{\\n    // If no key column found, prompt the user for input\\n    DateColumn = Interaction.InputBox(\\\"Provide the name of the date column name\\\", \\\"Column Name\\\", \\\"Date\\\");\\n}\\n\\n\\n\\n\\n// Ask the user if they want to add the new measure to the current table\\nDialogResult dialogResult = MessageBox.Show(\\\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\\\", \\\"Select Target Table\\\", MessageBoxButtons.YesNo);\\n\\nstring measuresTableName = null;\\nif (dialogResult == DialogResult.No)\\n{\\n    // Ask for the name of the measure table if the user selects \\\"No\\\"\\n    measuresTableName = Interaction.InputBox(\\\"Provide the name of the measure table\\\", \\\"Name of Measure Table\\\", \\\"Measure\\\");\\n\\n    // Check if the provided table exists\\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\nforeach (var selectedMeasure in Selected.Measures)\\n{\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" PY\\\";\\n    \\n    string newExpression1 = \\n        \\\"CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" \\n        +\\\"SAMEPERIODLASTYEAR(\\\"+CalendarTable.Name +\\\"[\\\"+DateColumn+\\\"]))\\\";\\n\\n    // Add the new measure based on the user's choice\\n    Measure newMeasure1;\\n    if (dialogResult == DialogResult.Yes)\\n    {\\n        // Add measure to the current table (selectedMeasure.Table)\\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\\n    }\\n    else\\n    {\\n        // Add measure to the user-specified table\\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n    }\\n\\n    // Set the format and add to the list\\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    // Set the DisplayFolder to the current DisplayFolder + \\\"PY\\\"\\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n\\n    newMeasures.Add(newMeasure1);\\n    // Format the DAX of the new measure\\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\\n\\n}\\n\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "1. Measure Create\\2. Time: PY\\2. Δ Y-1",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nvar newMeasures = new List<Measure>();\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string tableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\\n\\n    if (CalendarTable == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Checking for Date Column otherwise prompt for user input\\nstring DateColumn = null;\\n// Check if there is a column in the CalendarTable with IsKey = true\\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\\nif (keyColumn != null)\\n{\\n    DateColumn = keyColumn.Name;\\n}\\nelse\\n{\\n    // If no key column found, prompt the user for input\\n    DateColumn = Interaction.InputBox(\\\"Provide the name of the date column name\\\", \\\"Column Name\\\", \\\"Date\\\");\\n}\\n\\n\\n// Ask the user if they want to add the new measure to the current table\\nDialogResult dialogResult = MessageBox.Show(\\\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\\\", \\\"Select Target Table\\\", MessageBoxButtons.YesNo);\\n\\nstring measuresTableName = null;\\nif (dialogResult == DialogResult.No)\\n{\\n    // Ask for the name of the measure table if the user selects \\\"No\\\"\\n    measuresTableName = Interaction.InputBox(\\\"Provide the name of the measure table\\\", \\\"Name of Measure Table\\\", \\\"Measure\\\");\\n\\n    // Check if the provided table exists\\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\nforeach (var selectedMeasure in Selected.Measures)\\n{\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" Δ PY\\\";\\n    \\n    string newExpression1 = \\n        \\\"[\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY]\\\";\\n\\n    // Add the new measure based on the user's choice\\n    Measure newMeasure1;\\n    if (dialogResult == DialogResult.Yes)\\n    {\\n        // Add measure to the current table (selectedMeasure.Table)\\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\\n    }\\n    else\\n    {\\n        // Add measure to the user-specified table\\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n    }\\n\\n    // Set the format and add to the list\\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n    newMeasures.Add(newMeasure1);\\n    // Format the DAX of the new measure\\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\\n\\n}\\n\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "1. Measure Create\\2. Time: PY\\3. Δ Y-1%",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nvar newMeasures = new List<Measure>();\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string tableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\\n\\n    if (CalendarTable == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Checking for Date Column otherwise prompt for user input\\nstring DateColumn = null;\\n// Check if there is a column in the CalendarTable with IsKey = true\\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\\nif (keyColumn != null)\\n{\\n    DateColumn = keyColumn.Name;\\n}\\nelse\\n{\\n    // If no key column found, prompt the user for input\\n    DateColumn = Interaction.InputBox(\\\"Provide the name of the date column name\\\", \\\"Column Name\\\", \\\"Date\\\");\\n}\\n\\n\\n// Ask the user if they want to add the new measure to the current table\\nDialogResult dialogResult = MessageBox.Show(\\\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\\\", \\\"Select Target Table\\\", MessageBoxButtons.YesNo);\\n\\nstring measuresTableName = null;\\nif (dialogResult == DialogResult.No)\\n{\\n    // Ask for the name of the measure table if the user selects \\\"No\\\"\\n    measuresTableName = Interaction.InputBox(\\\"Provide the name of the measure table\\\", \\\"Name of Measure Table\\\", \\\"Measure\\\");\\n\\n    // Check if the provided table exists\\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\nforeach (var selectedMeasure in Selected.Measures)\\n{\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" Δ PY %\\\";\\n    \\n    string newExpression1 = \\n        \\\"DIVIDE([\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY], [\\\"+selectedMeasure.Name+\\\"])\\\";\\n\\n    // Add the new measure based on the user's choice\\n    Measure newMeasure1;\\n    if (dialogResult == DialogResult.Yes)\\n    {\\n        // Add measure to the current table (selectedMeasure.Table)\\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\\n    }\\n    else\\n    {\\n        // Add measure to the user-specified table\\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n    }\\n\\n    // Set the format and add to the list\\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n    newMeasures.Add(newMeasure1);\\n    // Format the DAX of the new measure\\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\\n\\n}\\n\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "1. Measure Create\\2. Time: PY\\4. ALL Y-1",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nvar newMeasures = new List<Measure>();\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string tableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\\n\\n    if (CalendarTable == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Checking for Date Column otherwise prompt for user input\\nstring DateColumn = null;\\n// Check if there is a column in the CalendarTable with IsKey = true\\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\\nif (keyColumn != null)\\n{\\n    DateColumn = keyColumn.Name;\\n}\\nelse\\n{\\n    // If no key column found, prompt the user for input\\n    DateColumn = Interaction.InputBox(\\\"Provide the name of the date column name\\\", \\\"Column Name\\\", \\\"Date\\\");\\n}\\n\\n\\n// Ask the user if they want to add the new measure to the current table\\nDialogResult dialogResult = MessageBox.Show(\\\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\\\", \\\"Select Target Table\\\", MessageBoxButtons.YesNo);\\n\\nstring measuresTableName = null;\\nif (dialogResult == DialogResult.No)\\n{\\n    // Ask for the name of the measure table if the user selects \\\"No\\\"\\n    measuresTableName = Interaction.InputBox(\\\"Provide the name of the measure table\\\", \\\"Name of Measure Table\\\", \\\"Measure\\\");\\n\\n    // Check if the provided table exists\\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\nforeach (var selectedMeasure in Selected.Measures)\\n{\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" PY\\\";\\n    string newExpression1 = \\n        \\\"CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" \\n        +\\\"SAMEPERIODLASTYEAR(\\\"+CalendarTable.Name +\\\"[\\\"+DateColumn+\\\"]))\\\";\\n\\n    string newMeasureName2 = selectedMeasure.Name + \\\" Δ PY\\\";\\n    string newExpression2 = \\n        \\\"[\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY]\\\";\\n\\n    string newMeasureName3 = selectedMeasure.Name + \\\" Δ PY %\\\";\\n    string newExpression3 = \\n        \\\"DIVIDE([\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY], [\\\"+selectedMeasure.Name+\\\"])\\\";\\n\\n    string newMeasureName4 = selectedMeasure.Name + \\\" Max Green PY\\\";\\n    string newExpression4 = \\n        \\\"IF([\\\"+selectedMeasure.Name+\\\" Δ PY] > 0, MAX( [\\\"+selectedMeasure.Name+\\\"], [\\\" +selectedMeasure.Name+\\\" PY]))\\\";\\n\\n        string newMeasureName5 = selectedMeasure.Name + \\\" Max Red AC\\\";\\n    string newExpression5 = \\n        \\\"IF([\\\"+selectedMeasure.Name+\\\" Δ PY] < 0, MAX( [\\\"+selectedMeasure.Name+\\\"], [\\\" +selectedMeasure.Name+\\\" PY]))\\\";\\n\\n    // Add the new measure based on the user's choice\\n    Measure newMeasure1;\\n    Measure newMeasure2;\\n    Measure newMeasure3;\\n    Measure newMeasure4;\\n    Measure newMeasure5;\\n    if (dialogResult == DialogResult.Yes)\\n    {\\n        // Add measure to the current table (selectedMeasure.Table)\\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\\n        newMeasure2 = selectedMeasure.Table.AddMeasure(newMeasureName2, newExpression2);\\n        newMeasure3 = selectedMeasure.Table.AddMeasure(newMeasureName3, newExpression3);\\n        newMeasure4 = selectedMeasure.Table.AddMeasure(newMeasureName4, newExpression4);\\n        newMeasure5 = selectedMeasure.Table.AddMeasure(newMeasureName5, newExpression5);\\n    }\\n    else\\n    {\\n        // Add measure to the user-specified table\\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n        newMeasure2 = measuresTable.AddMeasure(newMeasureName2, newExpression2);\\n        newMeasure3 = measuresTable.AddMeasure(newMeasureName3, newExpression3);\\n        newMeasure4 = measuresTable.AddMeasure(newMeasureName4, newExpression4);\\n        newMeasure5 = measuresTable.AddMeasure(newMeasureName5, newExpression5);\\n    }\\n\\n    // Set the format and add to the list\\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n    newMeasure2.FormatString = selectedMeasure.FormatString;\\n    newMeasure2.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n    newMeasure3.FormatString = selectedMeasure.FormatString;\\n    newMeasure3.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n    newMeasure4.FormatString = selectedMeasure.FormatString;\\n    newMeasure4.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n    newMeasure5.FormatString = selectedMeasure.FormatString;\\n    newMeasure5.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \\\"PY\\\" : selectedMeasure.DisplayFolder + @\\\"\\PY\\\";\\n\\n\\n    newMeasures.Add(newMeasure1);\\n    newMeasures.Add(newMeasure2);\\n    newMeasures.Add(newMeasure3);\\n    newMeasures.Add(newMeasure4);\\n    newMeasures.Add(newMeasure5);\\n\\n    // Format the DAX of the new measure\\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\\n\\n}\\n\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "1. Measure Create\\3. Time: Other\\M-1",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\\n    \\nforeach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var Kalendartable = \\\"Calendar\\\";\\n    var MonthColumn = \\\"Month (MMM)\\\";\\n    var RelativMonth = \\\"Relative Month\\\";\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" M-1\\\";\\n    \\n    string newExpression1 = \\n        \\\"IF(DISTINCTCOUNT(\\\"+Kalendartable+\\\"[\\\"+MonthColumn+\\\"])=1,[\\\"+selectedMeasure.Name+\\\"]\\\"\\n        +\\\",CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" \\n        +Kalendartable+\\\"[\\\"+RelativMonth+\\\"]=-1))\\\";\\n\\n    // Create the new measure in the same table as the selected measure\\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n\\n    // Set the display folder for the new measure\\n    //newMeasure1.DisplayFolder = \\\"Just Created \\\" + selectedMeasure.Name;\\n    \\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasures.Add(newMeasure1);\\n    \\n}\\n\\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "1. Measure Create\\3. Time: Other\\Measure: YTD",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\\n   \\n foreach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Variables to use and getting the measure table\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var Kalendartable = \\\"Calendar\\\";\\n    var MonthColumn = \\\"Month (MMM)\\\";\\n    var RelativMonth = \\\"Relative Month\\\";\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" YTD\\\";\\n    \\n    string newExpression1 = \\n            \\\"CALCULATE([\\\"+selectedMeasure.Name+\\\"],ALL('\\\"+Kalendartable+\\\"'),'\\\"+Kalendartable+\\\"'[\\\"+RelativMonth+\\\"]<0,'\\\"+Kalendartable+\\\"'[\\\"+RelativMonth+\\\"]>-13)\\\";\\n        \\n    // Create the new measure in the same table as the selected measure\\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n\\n    // Set the display folder for the new measure\\n    //newMeasure1.DisplayFolder =  Get.selectedMeasure.DisplayFolder;\\n    \\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasures.Add(newMeasure1);\\n\\n}\\n\\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\\n//FormatDax(Model.AllMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "1. Measure Create\\4. Replace Text in Measure",
      "Enabled": "true",
      "Execute": "// Iterate over each measure in the selected measures to replace occurrences of a specific text\\nforeach (var measure in Selected.Measures)\\n{\\n    const string textToReplace = \\\"Text_To_Replace\\\";\\n    const string replacementText = \\\"Text_Instead\\\";\\n\\n    // Replace all occurrences of the text in the measure's name\\n    string updatedName = measure.Name.Replace(textToReplace, replacementText);\\n\\n    // Update the measure's name\\n    measure.Name = updatedName;\\n}\\n\\n// Optionally, apply other updates or process further\\n",
      "Tooltip": "This adds for selected Tables all explicit sum measures",
      "ValidContexts": "Model, Table, Measure"
    },
    {
      "Name": "1. Measure Create\\5. Add Explicit Measures: Card",
      "Enabled": "true",
      "Execute": "    foreach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" M-1\\\";\\n    string newMeasureName2 = selectedMeasure.Name + \\\" M-2\\\";\\n    string newMeasureName3 = selectedMeasure.Name + \\\" M-13\\\";\\n    string newMeasureName4 = selectedMeasure.Name + \\\" Δ Delta M-2\\\";\\n    string newMeasureName5 = selectedMeasure.Name + \\\" Δ Delta M-2 %\\\";\\n    string newMeasureName6 = selectedMeasure.Name + \\\" Δ Delta M-13\\\";\\n    string newMeasureName7 = selectedMeasure.Name + \\\" Δ Delta M-13 %\\\";\\n    string newMeasureName8 = selectedMeasure.Name + \\\" Reference 1 Δ Vormonat\\\";\\n    string newMeasureName9 = selectedMeasure.Name + \\\" Reference 2 Δ Vorjahr\\\";\\n    string newMeasureName10 = selectedMeasure.Name + \\\" Sparkline SVG\\\";\\n    string newMeasureName11 = selectedMeasure.Name + \\\" Color Δ PM\\\";\\n    string newMeasureName12 = selectedMeasure.Name + \\\" Color Δ LY\\\";\\n    \\n    string newExpression1 = \\n        \\\"IF(ISFILTERED(Kalender[Monat (MMM)]),[\\\"+selectedMeasure.Name+\\\"]\\\"\\n        +\\\",CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" +\\n        \\\"Kalender[Relativer Monat #]=-1))\\\";\\n    string newExpression2 = \\n        \\\"CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" +\\n        \\\"Kalender[Relativer Monat #]=-2)\\\";\\n    string newExpression3 = \\n        \\\"CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" +\\n        \\\"Kalender[Relativer Monat #]=-13)\\\";\\n    \\n    string newExpression4 = \\n        \\\"IF( ISFILTERED(Kalender[Monat (MMM)])\\\"+\\n        \\\",[\\\"+selectedMeasure.Name+\\\"]\\\"\\n        +\\\"-CALCULATE(\\\"+\\\"[\\\"+selectedMeasure.Name+\\\"]\\\"+\\\",PREVIOUSMONTH(Kalender[Datum]))\\\"+\\n        \\\",[\\\"+newMeasureName1+\\\"]-[\\\"+newMeasureName2+\\\"])\\\";\\n    string newExpression5 = \\n        \\\"IF( ISFILTERED(Kalender[Monat (MMM)])\\\"+\\n        \\\",[\\\"+newMeasureName4+\\\"]/CALCULATE(\\\"+\\\"[\\\"+selectedMeasure.Name+\\\"]\\\"+\\\",PREVIOUSMONTH(Kalender[Datum]))\\\"+\\n        \\\",[\\\"+newMeasureName4+\\\"]/[\\\"+newMeasureName1+\\\"])\\\";\\n\\n    //string newExpression6 =  \\\"[\\\"+newMeasureName1+\\\"]-[\\\"+newMeasureName3+\\\"]\\\";\\n    //string newExpression7 =  \\\"[\\\"+newMeasureName6+\\\"]/[\\\"+newMeasureName1+\\\"]\\\";\\n    \\n    string newExpression6 = \\n        \\\"IF( ISFILTERED(Kalender[Monat (MMM)])\\\"+\\n        \\\",\\\"+\\\"[\\\"+selectedMeasure.Name+\\\"]\\\"\\n        +\\\"-CALCULATE(\\\"+\\\"[\\\"+selectedMeasure.Name+\\\"]\\\"+\\\",SAMEPERIODLASTYEAR(Kalender[Datum]))\\\"+\\n        \\\",[\\\"+newMeasureName1+\\\"]-[\\\"+newMeasureName3+\\\"])\\\";\\n    string newExpression7 = \\n        \\\"IF( ISFILTERED(Kalender[Monat (MMM)])\\\"+\\n        \\\",[\\\"+newMeasureName6+\\\"]/CALCULATE(\\\"+\\\"[\\\"+selectedMeasure.Name+\\\"]\\\"+\\\",SAMEPERIODLASTYEAR(Kalender[Datum]))\\\"+\\n        \\\",[\\\"+newMeasureName6+\\\"]/[\\\"+newMeasureName1+\\\"])\\\";\\n    \\n    string newExpression8 = \\\"var _sign_icon = IF([\\\" + newMeasureName4 + \\\"] > 0, \\\"▲ +\\\", \\\"▼ -\\\" & UNICHAR(127))\\n\\\" +\\n                            \\\"var _sign_plusminus = IF([\\\" + newMeasureName4 + \\\"] > 0, \\\" | +\\\", \\\" | - \\\")\\n\\\" +\\n                            \\\"var _valprct = ABS([\\\" + newMeasureName5 + \\\"])\\n\\\" +\\n                            \\\"var _valdiff = ABS([\\\" + newMeasureName4 + \\\"])\\n\\\" +\\n                            \\\"RETURN _sign_icon & FORMAT(_valprct, \\\"#.0%\\\") & _sign_plusminus & FORMAT(_valdiff, \\\"#,0\\\")\\\";\\n    string newExpression9 = \\\"var _sign_icon = IF([\\\" + newMeasureName6 + \\\"] > 0, \\\"▲ +\\\", \\\"▼ -\\\" & UNICHAR(127))\\n\\\" +\\n                            \\\"var _sign_plusminus = IF([\\\" + newMeasureName6 + \\\"] > 0, \\\" | +\\\", \\\" | - \\\")\\n\\\" +\\n                            \\\"var _valprct = ABS([\\\" + newMeasureName7 + \\\"])\\n\\\" +\\n                            \\\"var _valdiff = ABS([\\\" + newMeasureName6 + \\\"])\\n\\\" +\\n                            \\\"RETURN _sign_icon & FORMAT(_valprct, \\\"#.0%\\\") & _sign_plusminus & FORMAT(_valdiff, \\\"#,0\\\")\\\";\\n    \\n    string newExpression10 =\\n    \\\"VAR LineColour = \\\"%23808080\\\"\\n\\\" +\\n    \\\"VAR PointColour = \\\"white\\\"\\n\\\" +\\n    \\\"VAR Defs = \\\" +\\n        \\\"\\\"<defs><linearGradient id='grad' x1='0' y1='25' x2='0' y2='50' gradientUnits='userSpaceOnUse'>\\\" +\\n        \\\"<stop stop-color='%23808080' offset='0' />\\\" +\\n        \\\"<stop stop-color='%23808080' offset='0.3' />\\\" +\\n        \\\"<stop stop-color='white' offset='1' />\\\" +\\n        \\\"</linearGradient></defs>\\\"\\n\\\" +\\n    \\\"VAR XMinDate = MIN('Kalender'[MonatKey #])\\n\\\" +\\n    \\\"VAR XMaxDate = MAX('Kalender'[MonatKey #])\\n\\\" +\\n    \\\"VAR YMinValue = MINX(Values(Kalender[MonatKey #]),[\\\"+selectedMeasure.Name+\\\"])\\n\\\" +\\n    \\\"VAR YMaxValue = MAXX(Values(Kalender[MonatKey #]),[\\\"+selectedMeasure.Name+\\\"])\\n\\\" +\\n    \\\"VAR SparklineTable = ADDCOLUMNS(\\n\\\" +\\n    \\\"    SUMMARIZE('Kalender',Kalender[MonatKey #]),\\n\\\" +\\n    \\\"        \\\"X\\\",INT(150 * DIVIDE(Kalender[MonatKey #] - XMinDate, XMaxDate - XMinDate)),\\n\\\" +\\n    \\\"        \\\"Y\\\",INT(50 * DIVIDE([\\\"+selectedMeasure.Name+\\\"] - YMinValue,YMaxValue - YMinValue)))\\n\\\" +\\n    \\\"VAR Lines = CONCATENATEX(SparklineTable,[X] & \\\",\\\" & 50-[Y],\\\" \\\", Kalender[MonatKey #])\\n\\\" +\\n    \\\"VAR LastSparkYValue = MAXX( FILTER(SparklineTable, Kalender[MonatKey #] = XMaxDate), [Y])\\n\\\" +\\n    \\\"VAR LastSparkXValue = MAXX( FILTER(SparklineTable, Kalender[MonatKey #] = XMaxDate), [X])\\n\\\" +\\n    \\\"VAR SVGImageURL = \\n\\\" +\\n    \\\"    \\\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='-7 -7 164 64'>\\\" & Defs & \\n\\\" +\\n    \\\"     \\\"<polyline fill='url(#grad)' fill-opacity='0.3' stroke='transparent' stroke-width='0' points=' 0 50 \\\" & Lines & \\n\\\" +\\n    \\\"      \\\" 150 150 Z '/>\\\" &\\n\\\" +\\n    \\\"    \\\"<polyline fill='transparent' stroke='\\\" & LineColour & \\\"' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' points=' \\\" & Lines & \\n\\\" +\\n    \\\"      \\\" '/>\\\" &\\n\\\" +\\n    \\\"    \\\"<circle cx='\\\"& LastSparkXValue & \\\"' cy='\\\" & 50 - LastSparkYValue & \\\"' r='4' stroke='\\\" & LineColour & \\\"' stroke-width='3' fill='\\\" & PointColour & \\\"' />\\\" &\\n\\\" +\\n    \\\"    \\\"</svg>\\\"\\n\\\" +\\n    \\\"RETURN SVGImageURL\\\";\\n\\n    string newExpression11 = \\n    \\\"VAR MeasureToUse = [\\\" + newMeasureName4 + \\\"]\\n\\\" +\\n    \\\"RETURN\\n\\\" +\\n    \\\"IF (\\n\\\" +\\n    \\\"    MeasureToUse < 0,\\n\\\" +\\n    \\\"    \\\"#FF0000\\\",\\n\\\" +\\n    \\\"    IF (\\n\\\" +\\n    \\\"        MeasureToUse > 0,\\n\\\" +\\n    \\\"        \\\"#92D050\\\"\\n\\\" +\\n    \\\"    )\\n\\\" +\\n    \\\")\\\";\\n\\n    string newExpression12 = \\n    \\\"VAR MeasureToUse = [\\\" + newMeasureName6 + \\\"]\\n\\\" +\\n    \\\"RETURN\\n\\\" +\\n    \\\"IF (\\n\\\" +\\n    \\\"    MeasureToUse < 0,\\n\\\" +\\n    \\\"    \\\"#FF0000\\\",\\n\\\" +\\n    \\\"    IF (\\n\\\" +\\n    \\\"        MeasureToUse > 0,\\n\\\" +\\n    \\\"        \\\"#92D050\\\"\\n\\\" +\\n    \\\"    )\\n\\\" +\\n    \\\")\\\";\\n    \\n    // Create the new measure in the same table as the selected measure\\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n    var newMeasure2 = measuresTable.AddMeasure(newMeasureName2, newExpression2);\\n    var newMeasure3 = measuresTable.AddMeasure(newMeasureName3, newExpression3);\\n    var newMeasure4 = measuresTable.AddMeasure(newMeasureName4, newExpression4);\\n    var newMeasure5 = measuresTable.AddMeasure(newMeasureName5, newExpression5);\\n    var newMeasure6 = measuresTable.AddMeasure(newMeasureName6, newExpression6);\\n    var newMeasure7 = measuresTable.AddMeasure(newMeasureName7, newExpression7);\\n    var newMeasure8 = measuresTable.AddMeasure(newMeasureName8, newExpression8);\\n    var newMeasure9 = measuresTable.AddMeasure(newMeasureName9, newExpression9);\\n    var newMeasure10 = measuresTable.AddMeasure(newMeasureName10, newExpression10);\\n    var newMeasure11 = measuresTable.AddMeasure(newMeasureName11, newExpression11);\\n    var newMeasure12 = measuresTable.AddMeasure(newMeasureName12, newExpression12);\\n    \\n    // Set the display folder for the new measure\\n    newMeasure1.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure2.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure3.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure4.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure5.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure6.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure7.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure8.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure9.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure10.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure11.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    newMeasure12.DisplayFolder = \\\"Card \\\" + selectedMeasure.Name;\\n    \\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasure2.FormatString = selectedMeasure.FormatString;\\n    newMeasure3.FormatString = selectedMeasure.FormatString;\\n    newMeasure4.FormatString = selectedMeasure.FormatString;\\n    newMeasure5.FormatString = selectedMeasure.FormatString;\\n    newMeasure6.FormatString = selectedMeasure.FormatString;\\n    newMeasure7.FormatString = selectedMeasure.FormatString;\\n    newMeasure8.FormatString = selectedMeasure.FormatString;\\n    newMeasure9.FormatString = selectedMeasure.FormatString;\\n    newMeasure10.FormatString = selectedMeasure.FormatString;\\n    newMeasure11.FormatString = selectedMeasure.FormatString;\\n    newMeasure12.FormatString = selectedMeasure.FormatString;\\n    \\n}",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "1. Measure Create\\6. Update Selected Measure",
      "Enabled": "true",
      "Execute": "var updatedMeasures = new List<Measure>();\\n\\nforeach (var selectedMeasure in Selected.Measures)\\n{\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n\\n    // Retrieve the previous DAX expression of the selected measure\\n    var previousExpression = selectedMeasure.Expression;\\n\\n    // Define the new DAX expression by appending the new condition\\n    string newExpression = \\\"(\\\"+previousExpression+ \\\")*( 0.3 + RAND())\\\";\\n\\n    // Update the existing measure with the new expression\\n    selectedMeasure.Expression = newExpression;\\n    updatedMeasures.Add(selectedMeasure);\\n}\\n\\nFormatDax(updatedMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "Min Date Column",
      "Enabled": "true",
      "Execute": "// Loop through all tables to find the one with DataCategory = Time\\nvar calendarTable = Model.Tables\\n    .FirstOrDefault(t => t.DataCategory == \\\"Time\\\");\\n\\nif (calendarTable == null)\\n{\\n    Error(\\\"No calendar table found (with DataCategory = Time).\\\");\\n    return;\\n}\\n\\n// Try to find the key column (usually marked as IsKey)\\nvar keyColumn = calendarTable.Columns\\n    .FirstOrDefault(c => c.IsKey && c.DataType == DataType.DateTime);\\n\\n// If not found, fallback to first DateTime column\\nif (keyColumn == null)\\n{\\n    keyColumn = calendarTable.Columns\\n        .FirstOrDefault(c => c.DataType == DataType.DateTime);\\n}\\n\\nif (keyColumn == null)\\n{\\n    Error(\\\"No DateTime column found in the calendar table.\\\");\\n    return;\\n}\\n\\n// Generate the DAX for the measure\\nstring measureName = \\\"Min Selected Date\\\";\\nstring daxFormula = $@\\\"\\nVAR __minDate = CALCULATE(MIN('{calendarTable.Name}'[{keyColumn.Name}]), REMOVEFILTERS('{calendarTable.Name}'))\\nRETURN\\nIF(\\n    ISFILTERED('{calendarTable.Name}'[{keyColumn.Name}]),\\n    SELECTEDVALUE('{calendarTable.Name}'[{keyColumn.Name}]),\\n    __minDate\\n)\\\";\\n\\n// Add or update the measure\\nvar existingMeasure = calendarTable.Measures.FirstOrDefault(m => m.Name == measureName);\\nif (existingMeasure != null)\\n{\\n    existingMeasure.Expression = daxFormula;\\n}\\nelse\\n{\\n    calendarTable.AddMeasure(measureName, daxFormula);\\n}\\n\\n// Optional: output message\\nInfo($\\\"Measure '{measureName}' created/updated on table '{calendarTable.Name}' using column '{keyColumn.Name}'.\\\");\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "2. Measure Modify\\1. Format String Unit",
      "Enabled": "true",
      "Execute": "var updatedMeasures = new List<Measure>();\\n    \\nforeach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var UnitTable = \\\"Einheit\\\";\\n    var UnitColumn = \\\"Einheit\\\";\\n    var UnitThousand = \\\"Tausend\\\";\\n    var UnitMillion = \\\"Millionen\\\";\\n\\n    // Define the dynamic format string expression\\n    string dynamicFormatString = \\n        \\\"SWITCH(\\\" +\\n        \\\"SELECTEDVALUE( \\\"+UnitTable+\\\"[\\\"+UnitColumn+\\\"] ), \\\" +\\n        \\\"\\\"\\\"+UnitThousand+\\\"\\\", \\\"0,#\\\", \\\" +\\n        \\\"\\\"\\\"+UnitMillion+\\\"\\\", \\\"#,0.#\\\", \\\" +\\n        \\\"\\\"#,#\\\")\\\";\\n\\n    // Update the format string for the selected measure\\n    selectedMeasure.FormatStringExpression = dynamicFormatString;\\n    updatedMeasures.Add(selectedMeasure);\\n    \\n}\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "2. Measure Modify\\2. Add Last Refresh Measure",
      "Enabled": "true",
      "Execute": "string tableNameEmptyMeasure = \\\"Measure\\\";\\nstring tableNameLastRefresh = \\\"Last Refresh\\\";\\nstring LastRefreshMeasureName = \\\"Last Refresh Measure\\\";\\nstring columnNameLastRefresh = \\\"Last Refresh Timestamp\\\";\\nstring measureDax = \\\"\\\"Last Refresh: \\\" & MAX('\\\" + tableNameLastRefresh + \\\"'[\\\" + columnNameLastRefresh + \\\"])\\\";\\n\\nvar table2 = Model.Tables[tableNameEmptyMeasure];\\nvar measurelastrefresh = table2.AddMeasure(LastRefreshMeasureName, measureDax, \\\"Meta\\\");\\n",
      "Tooltip": "",
      "ValidContexts": "Model, Table"
    },
    {
      "Name": "2. Measure Modify\\3. Unit Dynamic FormatStringExpression",
      "Enabled": "true",
      "Execute": "var updatedMeasures = new List<Measure>();\\n    \\nforeach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var UnitTable = \\\"Einheit\\\";\\n    var UnitColumn = \\\"Einheit\\\";\\n    var UnitThousand = \\\"Tausend\\\";\\n    var UnitMillion = \\\"Millionen\\\";\\n\\n    // Define the dynamic format string expression\\n    string dynamicFormatString = \\n        \\\"SWITCH(\\\" +\\n        \\\"SELECTEDVALUE( \\\"+UnitTable+\\\"[\\\"+UnitColumn+\\\"] ), \\\" +\\n        \\\"\\\"\\\"+UnitThousand+\\\"\\\", \\\"0,#\\\", \\\" +\\n        \\\"\\\"\\\"+UnitMillion+\\\"\\\", \\\"#,0.#\\\", \\\" +\\n        \\\"\\\"#,#\\\")\\\";\\n\\n    // Update the format string for the selected measure\\n    selectedMeasure.FormatStringExpression = dynamicFormatString;\\n    updatedMeasures.Add(selectedMeasure);\\n    \\n}\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "2. Measure Modify\\4. Format All Measures",
      "Enabled": "true",
      "Execute": "// Formats DAX of all Calculation Items of Calculation Groups\\nFormatDax(Model.AllCalculationItems);\\n\\n// Formats DAX of all Measures\\nFormatDax(Model.AllMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Model, Measure"
    },
    {
      "Name": "2. Measure Modify\\5. All columns ending with ID or Key: Set IsAvailableInMDX to False",
      "Enabled": "true",
      "Execute": "\\n\\n// Set IsAvailableInMDX to false; ***********************************************************\\n    foreach (var table in Model.Tables)\\n    {\\n        foreach (var column in table.Columns)\\n        {\\n            if (column.Name.EndsWith(\\\"Key\\\") || column.Name.EndsWith(\\\"ID\\\"))\\n            {\\n                column.IsAvailableInMDX = false;\\n            }\\n        }\\n    }\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\1. Create Calc Calendar Table (TE2)\\1. Create Table",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nstring calctableCalendar = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"CalendarCalcTable\\\");\\n\\n\\n\\n    // Define the DAX expression for the calculated table\\n    string tableExpression = @\\\"\\nVAR all_dates = CALENDARAUTO()\\nRETURN\\n    ADDCOLUMNS(\\n        all_dates,\\n        \\\"\\\"DateKey\\\"\\\", VALUE(FORMAT([Date], \\\"\\\"YYYYMMDD\\\"\\\")),\\n        \\\"\\\"Year\\\"\\\", YEAR([Date]),\\n        \\\"\\\"Quarter\\\"\\\", QUARTER([Date]),\\n        \\\"\\\"Month\\\"\\\", MONTH([Date]),\\n        \\\"\\\"End of Month\\\"\\\", EOMONTH([Date], 0),\\n        \\\"\\\"Week of Year\\\"\\\", WEEKNUM([Date]),\\n        \\\"\\\"Weekday\\\"\\\", WEEKDAY([Date])\\n    )\\n\\\";\\n\\n    // Add the calculated table to the model\\n    var table = Model.AddCalculatedTable(calctableCalendar, tableExpression);\\n        table.DataCategory = \\\"Time\\\";\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\1. Create Calc Calendar Table (TE2)\\2. Mark as Date Table",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string tableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\\n\\n    if (CalendarTable == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Check if a column named \\\"Date\\\" exists in the CalendarTable\\nstring dateColumnName = \\\"Date\\\";\\nvar dateColumn = CalendarTable.Columns.FirstOrDefault(col => col.Name == dateColumnName);\\n\\nif (dateColumn == null)\\n{\\n    // If no \\\"Date\\\" column is found, prompt the user for input\\n    dateColumnName = Interaction.InputBox(\\\"The 'Date' column was not found. Provide the name of the date column.\\\", \\\"Column Name\\\", \\\"Date\\\");\\n    dateColumn = CalendarTable.Columns.FirstOrDefault(col => col.Name == dateColumnName);\\n\\n    if (dateColumn == null)\\n    {\\n        MessageBox.Show(\\\"The column you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Modify the found column (or user-provided column)\\ndateColumn.DataType = DataType.DateTime;\\ndateColumn.IsKey = true; // Ensure this is the key column\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\1. Create Calc Calendar Table",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nstring calctableCalendar = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"CalendarCalcTable\\\");\\n\\n\\n\\n    // Define the DAX expression for the calculated table\\n    string tableExpression = @\\\"\\nVAR all_dates = CALENDARAUTO()\\nRETURN\\n    ADDCOLUMNS(\\n        all_dates,\\n        \\\"\\\"DateKey\\\"\\\", VALUE(FORMAT([Date], \\\"\\\"YYYYMMDD\\\"\\\")),\\n        \\\"\\\"Year\\\"\\\", YEAR([Date]),\\n        \\\"\\\"Quarter\\\"\\\", QUARTER([Date]),\\n        \\\"\\\"Month\\\"\\\", MONTH([Date]),\\n        \\\"\\\"End of Month\\\"\\\", EOMONTH([Date], 0),\\n        \\\"\\\"Week of Year\\\"\\\", WEEKNUM([Date]),\\n        \\\"\\\"Weekday\\\"\\\", WEEKDAY([Date])\\n    )\\n\\\";\\n\\n    // Add the calculated table to the model\\n    var table = Model.AddCalculatedTable(calctableCalendar, tableExpression);\\n        table.DataCategory = \\\"Time\\\";\\n\\n    // Modify the existing \\\"Date\\\" column\\n    var dateColumn = table.Columns[\\\"Date\\\"];\\n    dateColumn.DataType = DataType.DateTime;\\n    dateColumn.IsKey = true; // Ensure this is the key column",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\2. Create Empty Measure Table (TE2)\\1. Create - 1 Measure Table",
      "Enabled": "true",
      "Execute": "// ATTENTION FOR TE2 Users: Script needs modification AND needs to be run in 2 steps\\n\\n// First Step: Add Tables\\nvar table = Model.AddCalculatedTable(\\\"Measure\\\", \\\"{0}\\\"); \\n\\n// Second Step: JUST FOR TE2 Save Data Model Changes",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\2. Create Empty Measure Table (TE2)\\1. Create - 3 Measure Tables with Icon",
      "Enabled": "true",
      "Execute": "// ATTENTION FOR TE2 Users: Hiding of value column is not included, therefore 3 steps as 2 scripts\\n\\n// First Step: Add Tables\\nvar table = Model.AddCalculatedTable(\\\"\\U0001F3AFMeasures | 1.\\U0001F4C8KPIs\\\", \\\"{0}\\\"); \\nvar table1 = Model.AddCalculatedTable(\\\"\\U0001F3AFMeasures | 2. \\U00000023\\U000020E3 Variables\\\", \\\"{0}\\\");\\nvar table2 = Model.AddCalculatedTable(\\\"\\U0001F3AFMeasures | 3.\\U0001F4CB Titles and Labels\\\", \\\"{0}\\\");\\n\\n// Second Step: JUST FOR TE2 Save Data Model Changes\\n\\n// Third Step: Hide the columns \\\"value\\\"",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\2. Create Empty Measure Table (TE2)\\2. Hide Column - 1 Measure Table",
      "Enabled": "true",
      "Execute": "// Third Step: After saving the created table this hides the \\\"value\\\" column\\nvar table = Model.Tables[\\\"Measure\\\"];\\ntable.Columns[0].IsHidden = true;\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\2. Create Empty Measure Table (TE2)\\2. Hide Column - 3 Measure Table with Icon",
      "Enabled": "true",
      "Execute": "// Third Step: After saving the created table this hides the \\\"value\\\" column\\nvar table = Model.Tables[\\\"\\U0001F3AFMeasures | 1.\\U0001F4C8KPIs\\\"];\\ntable.Columns[0].IsHidden = true;\\n\\nvar table1 = Model.Tables[\\\"\\U0001F3AFMeasures | 2. \\U00000023\\U000020E3 Variables\\\"];\\ntable1.Columns[0].IsHidden = true;\\n\\nvar table2 = Model.Tables[\\\"\\U0001F3AFMeasures | 3.\\U0001F4CB Titles and Labels\\\"];\\ntable2.Columns[0].IsHidden = true;",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\2. Create Empty Measure Table (TE3)",
      "Enabled": "true",
      "Execute": "// ATTENTION FOR TE2 Users: Script needs modification AND needs to be run in 2 steps\\n\\n// First Step: Add Table\\nvar table = Model.AddCalculatedTable(\\\"Measure\\\", \\\"{0}\\\"); \\n\\n// Second Step: JUST FOR TE2 Save Data Model Changes\\n\\n// Third Step: Hides the column, uncomment the next line and execute it separately\\n//var table = Model.Tables[\\\"Measure\\\"]; //uncomment this line for TE2\\ntable.Columns[0].IsHidden = true;",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "3. Calc Table\\3. Create Value Parameter 1 to 10 (TE3)",
      "Enabled": "true",
      "Execute": "// Define the table name\\nstring tableName = \\\"Parameter 1 to 10\\\";\\n\\n// Create the calculated table using the DAX expression GENERATESERIES(0, 10, 1)\\nvar table = Model.AddCalculatedTable(tableName, \\\"GENERATESERIES(0, 10, 1)\\\");\\n\\n// Access the 'Value' column created by the GENERATESERIES function\\nvar fieldColumn = table.Columns[\\\"Value\\\"];\\n\\n    // Set the extended property with the given JSON value on the renamed column\\n    fieldColumn.SetExtendedProperty(\\\"ParameterMetadata\\\", \\\"{\\\"version\\\":0}\\\", ExtendedPropertyType.Json);\\n    fieldColumn.SummarizeBy =AggregateFunction.None;\\n\\n\\n// Add the measure 'Parameter 1 to 10 Value' to the table\\nstring measureName = \\\"Parameter 1 to 10 Value\\\";\\nstring daxExpression = \\\"SELECTEDVALUE('Parameter 1 to 10'[Value], 1)\\\";\\n\\n// Add the new measure\\nvar measure = table.AddMeasure(measureName, daxExpression);\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "4. Calc Group\\1. Units",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n// Creates Calculation Group for Units *******************************************************************************\\n// only sticked with k and mio because billion is not internationally usable. The German \\\"Billion\\\" is not the same as the English \\\"billion\\\"\\n\\nif (!Model.DiscourageImplicitMeasures)\\n{\\n    // Show message box\\n    DialogResult dialogResult14 = MessageBox.Show(\\n        text: \\\"We saw that discourageImplicitMeasures is not yet set to true.\\n\\nIf you proceed this will automaticaly disable implicit measures. Disabling implicit measures is generally recommended. \\n\\nWould you like to proceed?\\\",\\n        caption: \\\"Discourage Implicit Measures\\\",\\n        buttons: MessageBoxButtons.YesNo);\\n\\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\\n    if (dialogResult14 == DialogResult.No)\\n    {\\n        return;\\n    }\\n}\\n\\n    // Add a new Units Calculation Group \\n    try\\n    {\\n        var calcGroup = Model.AddCalculationGroup();\\n        calcGroup.Name = Interaction.InputBox(\\\"Provide a name of the Units calculation group table and column Name\\\", \\\"Units Calc Group Names\\\", \\\"Unit\\\"); \\n        calcGroup.Columns[\\\"Name\\\"].Name = calcGroup.Name;\\n        // Define calculation item data\\n        var calculationItemData = new[]\\n        {\\n    new { Name = \\\"Thousand\\\", Expression = string.Format(\\\"IF(ISNUMBER(SELECTEDMEASURE()),IF(NOT(CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"%\\\") ||CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"ratio\\\")),DIVIDE(SELECTEDMEASURE(), 1000),SELECTEDMEASURE()),SELECTEDMEASURE())\\\") },\\n    new { Name = \\\"Million\\\", Expression = string.Format(\\\"IF(ISNUMBER(SELECTEDMEASURE()),IF(NOT(CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"%\\\") ||CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"ratio\\\")),DIVIDE(SELECTEDMEASURE(), 1000000),SELECTEDMEASURE()),SELECTEDMEASURE())\\\") }\\n}.Where(item => item != null).ToArray();\\n\\n        // Add calculation items to the Calculation Group\\n        foreach (var itemData in calculationItemData)\\n        {\\n            var item = calcGroup.AddCalculationItem();\\n            item.Name = itemData.Name;\\n            item.Expression = itemData.Expression;\\n        }\\n    }\\n    catch (Exception ex)\\n    {\\n        MessageBox.Show(\\\"Adding the calc group units was not fully successful, but the rest of the script was completed\\n\\nReason: \\\" + ex.Message);\\n    }\\n\\n\\n// Formats the DAX of all calculation items in calc groups. Those are not measures ************************************************************\\n    FormatDax(Model.AllCalculationItems);\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "4. Calc Group\\2. Time Intelligence",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nif (!Model.DiscourageImplicitMeasures)\\n{\\n    // Show message box\\n    DialogResult dialogResult14 = MessageBox.Show(\\n        text: \\\"We saw that discourageImplicitMeasures is not yet set to true.\\n\\nIf you proceed this will automaticaly disable implicit measures. Disabling implicit measures is generally recommended. \\n\\nWould you like to proceed?\\\",\\n        caption: \\\"Discourage Implicit Measures\\\",\\n        buttons: MessageBoxButtons.YesNo);\\n\\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\\n    if (dialogResult14 == DialogResult.No)\\n    {\\n        return;\\n    }\\n}\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string tableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\\n\\n    if (CalendarTable.Name == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Checking for Date Column otherwise prompt for user input\\nstring DateColumn = null;\\n// Check if there is a column in the CalendarTable with IsKey = true\\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\\nif (keyColumn != null)\\n{\\n    DateColumn = keyColumn.Name;\\n}\\nelse\\n{\\n    // If no key column found, prompt the user for input\\n    DateColumn = Interaction.InputBox(\\\"Provide the name of the date column name\\\", \\\"Column Name\\\", \\\"Date\\\");\\n}\\n\\n\\n// Creates Calculation Group for Time Intelligence *******************************************************************************\\n    var TimeIntelligenceCalculationGroupName = Interaction.InputBox(\\\"Provide the name of the calculation group name\\\",\\\"Time Intelligence Calc Group Name\\\",\\\"Time Intelligence\\\");\\n\\n    DialogResult dialogResult4 = MessageBox.Show(text:\\\"Generate YTD Calc Items?\\\", caption:\\\"Calc Group: YTD\\\", buttons:MessageBoxButtons.YesNo);\\n    bool GenerateYTD = (dialogResult4 == DialogResult.Yes);            \\n\\n    // Add a new Time Intellignce Calculation Group **************************************************\\n    try\\n    {\\n        var calcGroup = Model.AddCalculationGroup();\\n        calcGroup.Name = TimeIntelligenceCalculationGroupName;\\n        calcGroup.Columns[\\\"Name\\\"].Name = TimeIntelligenceCalculationGroupName;\\n        // Define calculation item data\\n        var calculationItemData = new[]\\n        {\\n        new { Name = \\\"AC\\\", Expression = \\\"SELECTEDMEASURE()\\\" },\\n        new { Name = \\\"Y-1\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0}))\\\", CalendarTable.Name, DateColumn) },\\n        new { Name = \\\"Y-2\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0}))\\\", CalendarTable.Name, DateColumn) },\\n        new { Name = \\\"Y-3\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -3, YEAR), ALL({0}))\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"YTD\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0}))\\\", CalendarTable.Name, DateColumn) }: null,\\n        GenerateYTD ? new { Name = \\\"YTD-1\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0}))\\\", CalendarTable.Name, DateColumn) }: null,\\n        GenerateYTD ? new { Name = \\\"YTD-2\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0}))\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"abs. AC vs Y-1\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN AC - Y1\\\", CalendarTable.Name, DateColumn) },\\n        new { Name = \\\"abs. AC vs Y-2\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN AC - Y2\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"abs. AC vs YTD-1\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN AC - Y1\\\", CalendarTable.Name, DateColumn) }: null,\\n        GenerateYTD ? new { Name = \\\"abs. AC vs YTD-2\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN AC - Y2\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"AC vs Y-1\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), SAMEPERIODLASTYEAR({0}[{1}]), ALL({0})) RETURN DIVIDE(AC - Y1, Y1)\\\", CalendarTable.Name, DateColumn) },\\n        new { Name = \\\"AC vs Y-2\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD({0}[{1}], -2, YEAR), ALL({0})) RETURN DIVIDE(AC - Y2, Y2)\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"AC vs YTD-1\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN DIVIDE(AC - Y1, Y1)\\\", CalendarTable.Name, DateColumn) }: null,\\n        GenerateYTD ? new { Name = \\\"AC vs YTD-2\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN DIVIDE(AC - Y2, Y2)\\\", CalendarTable.Name, DateColumn) }: null,\\n\t\tnew { Name = \\\"achiev. AC vs Y-1\\\", Expression = string.Format(\\\"VAR AC = SELECTEDMEASURE() VAR Y1 = CALCULATE(SELECTEDMEASURE(), SAMEPERIODLASTYEAR({0}[{1}]), ALL({0})) RETURN 1 - DIVIDE((Y1 - AC), Y1, 0)\\\", CalendarTable.Name, DateColumn) },\\n\t\tnew { Name = \\\"achiev. AC vs Y-2\\\", Expression = string.Format(\\\"VAR AC = SELECTEDMEASURE() VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD({0}[{1}], -2, YEAR), ALL({0})) RETURN 1 - DIVIDE((Y2 - AC), Y2, 0)\\\", CalendarTable.Name, DateColumn) },\\n\t\tGenerateYTD ? new { Name = \\\"achiev. AC vs YTD-1\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN 1 - DIVIDE((Y1 - AC), Y1, 0)\\\", CalendarTable.Name, DateColumn) } : null,\\n\t\tGenerateYTD ? new { Name = \\\"achiev. AC vs YTD-2\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN 1 - DIVIDE((Y2 - AC), Y2, 0)\\\", CalendarTable.Name, DateColumn) } : null\\n\\n    }.Where(item => item != null).ToArray();\\n        // Add calculation items to the Calculation Group\\n        foreach (var itemData in calculationItemData)\\n        {\\n            var item = calcGroup.AddCalculationItem();\\n            item.Name = itemData.Name;\\n            item.Expression = itemData.Expression;\\n        }\\n    }\\n    catch (Exception ex)\\n    {\\n        MessageBox.Show(\\\"Adding the calc group time intelligence was not fully successful, but the rest of the script was completed\\n\\nReason: \\\" + ex.Message);\\n    }\\n\\n\\n// Formats the DAX of all calculation items in calc groups. Those are not measures ************************************************************\\nFormatDax(Model.AllCalculationItems);\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "4. Calc Group\\3. Time Intelligence with Value Parameter (TE3)",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n// Define the table name\\nstring tableName = \\\"Parameter 1 to 10\\\";\\n\\n// Create the calculated table using the DAX expression GENERATESERIES(0, 10, 1)\\nvar calculatedTable = Model.AddCalculatedTable(tableName, \\\"GENERATESERIES(0, 10, 1)\\\");\\n\\n// Access the 'Value' column created by the GENERATESERIES function\\nvar fieldColumn = calculatedTable.Columns[\\\"Value\\\"];\\n\\n// Set the extended property with the given JSON value on the renamed column\\nfieldColumn.SetExtendedProperty(\\\"ParameterMetadata\\\", \\\"{\\\"version\\\":0}\\\", ExtendedPropertyType.Json);\\nfieldColumn.SummarizeBy = AggregateFunction.None;\\n\\n// Add the measure 'Parameter 1 to 10 Value' to the table\\nstring measureName = \\\"Parameter 1 to 10 Value\\\";\\nstring daxExpression = \\\"SELECTEDVALUE('Parameter 1 to 10'[Value], 1)\\\";\\n\\n// Add the new measure\\nvar measure = calculatedTable.AddMeasure(measureName, daxExpression);\\n\\nif (!Model.DiscourageImplicitMeasures)\\n{\\n    // Show message box\\n    DialogResult dialogResult14 = MessageBox.Show(\\n        text: \\\"We saw that discourageImplicitMeasures is not yet set to true.\\n\\nIf you proceed this will automatically disable implicit measures. Disabling implicit measures is generally recommended. \\n\\nWould you like to proceed?\\\",\\n        caption: \\\"Discourage Implicit Measures\\\",\\n        buttons: MessageBoxButtons.YesNo);\\n\\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\\n    if (dialogResult14 == DialogResult.Yes)\\n    {\\n        Model.DiscourageImplicitMeasures = true;\\n    }\\n    else\\n    {\\n        return;\\n    }\\n}\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(t => t.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string dateTableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(t => t.Name == dateTableName);\\n\\n    if (CalendarTable == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Checking for Date Column otherwise prompt for user input\\nstring DateColumn = null;\\n\\n// Check if there is a column in the CalendarTable with IsKey = true\\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\\nif (keyColumn != null)\\n{\\n    DateColumn = keyColumn.Name;\\n}\\nelse\\n{\\n    // If no key column found, prompt the user for input\\n    DateColumn = Interaction.InputBox(\\\"Provide the name of the date column name\\\", \\\"Column Name\\\", \\\"Date\\\");\\n}\\n\\n// Creates Calculation Group for Time Intelligence *******************************************************************************\\nvar TimeIntelligenceCalculationGroupName = Interaction.InputBox(\\\"Provide the name of the calculation group name\\\", \\\"Time Intelligence Calc Group Name\\\", \\\"Time Intelligence\\\");\\n\\nDialogResult dialogResult4 = MessageBox.Show(text: \\\"Generate YTD Calc Items?\\\", caption: \\\"Calc Group: YTD\\\", buttons: MessageBoxButtons.YesNo);\\nbool GenerateYTD = (dialogResult4 == DialogResult.Yes);\\n\\n// Add a new Time Intelligence Calculation Group **************************************************\\ntry\\n{\\n    var calcGroup = Model.AddCalculationGroup();\\n    calcGroup.Name = TimeIntelligenceCalculationGroupName;\\n    calcGroup.Columns[\\\"Name\\\"].Name = TimeIntelligenceCalculationGroupName;\\n\\n    // Define calculation item data\\n    var calculationItemData = new[]\\n    {\\n        new { Name = \\\"AC\\\", Expression = \\\"SELECTEDMEASURE()\\\" },\\n        new { Name = \\\"Y-X\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}'))\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"YTD\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}'))\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"abs. AC vs Y-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN AC - Y1\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"abs. AC vs YTD-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN AC - Y1\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"AC vs Y-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN DIVIDE(AC - Y1, Y1)\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"AC vs YTD-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN DIVIDE(AC - Y1, Y1)\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"achiev. AC vs Y-X\\\", Expression = string.Format(\\\"VAR AC = SELECTEDMEASURE() VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN 1 - DIVIDE((Y1 - AC), Y1, 0)\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"achiev. AC vs YTD-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN 1 - DIVIDE((Y1 - AC), Y1, 0)\\\", CalendarTable.Name, DateColumn) } : null\\n    }.Where(item => item != null).ToArray();\\n\\n    // Add calculation items to the Calculation Group\\n    foreach (var itemData in calculationItemData)\\n    {\\n        var item = calcGroup.AddCalculationItem();\\n        item.Name = itemData.Name;\\n        item.Expression = itemData.Expression;\\n\\n        // Add the format string to \\\"AC vs Y-X\\\" and \\\"AC vs YTD-X\\\"\\n        if (itemData.Name == \\\"AC vs Y-X\\\" || itemData.Name == \\\"AC vs YTD-X\\\" || itemData.Name == \\\"achiev. AC vs Y-X\\\" || itemData.Name == \\\"achiev. AC vs YTD-X\\\")\\n        {\\n            item.FormatStringExpression = \\\"\\\"0.00%\\\"\\\"; // Sets the format to percentage with two decimal places\\n        }\\n    }\\n}\\ncatch (Exception ex)\\n{\\n    MessageBox.Show(\\\"Adding the calc group time intelligence was not fully successful, but the rest of the script was completed\\n\\nReason: \\\" + ex.Message);\\n}\\n\\n// Formats the DAX of all calculation items in calc groups. Those are not measures ************************************************************\\nFormatDax(Model.AllCalculationItems);\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "4. Calc Group\\3. Time Intelligence with Value Parameter 1 to 10\\Step 1 (TE2)",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n// Define the table name\\nstring tableName = \\\"Parameter 1 to 10\\\";\\n\\n// Create the calculated table using the DAX expression GENERATESERIES(0, 10, 1)\\nvar calculatedTable = Model.AddCalculatedTable(tableName, \\\"GENERATESERIES(0, 10, 1)\\\");\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "4. Calc Group\\3. Time Intelligence with Value Parameter 1 to 10\\Step 2 (TE2)",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n// Define the table name\\nstring tableName = \\\"Parameter 1 to 10\\\";\\n\\n// Access the 'Value' column from a pre-existing table or alternative method (remove calculatedTable creation step)\\n// Assuming fieldColumn will be provided or retrieved from elsewhere in your model\\n// var fieldColumn = calculatedTable.Columns[\\\"Value\\\"]; // REMOVED\\n\\n// Set the extended property with the given JSON value on the renamed column (If you have an alternative column source)\\nvar fieldColumn = Model.Tables[tableName].Columns[\\\"Value\\\"]; // Adjusted to get the field from the existing table\\nfieldColumn.SetExtendedProperty(\\\"ParameterMetadata\\\", \\\"{\\\"version\\\":0}\\\", ExtendedPropertyType.Json);\\nfieldColumn.SummarizeBy = AggregateFunction.None;\\n\\n// Add the measure 'Parameter 1 to 10 Value' to the table\\nstring measureName = \\\"Parameter 1 to 10 Value\\\";\\nstring daxExpression = \\\"SELECTEDVALUE('Parameter 1 to 10'[Value], 1)\\\";\\n\\n// Add the new measure (assuming 'Parameter 1 to 10' table already exists in the model)\\nvar measure = Model.Tables[tableName].AddMeasure(measureName, daxExpression);\\n\\nif (!Model.DiscourageImplicitMeasures)\\n{\\n    // Show message box\\n    DialogResult dialogResult14 = MessageBox.Show(\\n        text: \\\"We saw that discourageImplicitMeasures is not yet set to true.\\n\\nIf you proceed this will automatically disable implicit measures. Disabling implicit measures is generally recommended. \\n\\nWould you like to proceed?\\\",\\n        caption: \\\"Discourage Implicit Measures\\\",\\n        buttons: MessageBoxButtons.YesNo);\\n\\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\\n    if (dialogResult14 == DialogResult.Yes)\\n    {\\n        Model.DiscourageImplicitMeasures = true;\\n    }\\n    else\\n    {\\n        return;\\n    }\\n}\\n\\n// Find the table with the data category \\\"Time\\\"\\nvar CalendarTable = Model.Tables.FirstOrDefault(t => t.DataCategory == \\\"Time\\\");\\n\\nif (CalendarTable == null)\\n{\\n    string dateTableName = Interaction.InputBox(\\\"Provide the name of the date dimension table\\\", \\\"Table Name\\\", \\\"Calendar\\\");\\n    CalendarTable = Model.Tables.FirstOrDefault(t => t.Name == dateTableName);\\n\\n    if (CalendarTable == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Checking for Date Column otherwise prompt for user input\\nstring DateColumn = null;\\n\\n// Check if there is a column in the CalendarTable with IsKey = true\\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\\nif (keyColumn != null)\\n{\\n    DateColumn = keyColumn.Name;\\n}\\nelse\\n{\\n    // If no key column found, prompt the user for input\\n    DateColumn = Interaction.InputBox(\\\"Provide the name of the date column name\\\", \\\"Column Name\\\", \\\"Date\\\");\\n}\\n\\n// Creates Calculation Group for Time Intelligence *******************************************************************************\\nvar TimeIntelligenceCalculationGroupName = Interaction.InputBox(\\\"Provide the name of the calculation group name\\\", \\\"Time Intelligence Calc Group Name\\\", \\\"Time Intelligence\\\");\\n\\nDialogResult dialogResult4 = MessageBox.Show(text: \\\"Generate YTD Calc Items?\\\", caption: \\\"Calc Group: YTD\\\", buttons: MessageBoxButtons.YesNo);\\nbool GenerateYTD = (dialogResult4 == DialogResult.Yes);\\n\\n// Add a new Time Intelligence Calculation Group **************************************************\\ntry\\n{\\n    var calcGroup = Model.AddCalculationGroup();\\n    calcGroup.Name = TimeIntelligenceCalculationGroupName;\\n    calcGroup.Columns[\\\"Name\\\"].Name = TimeIntelligenceCalculationGroupName;\\n\\n    // Define calculation item data\\n    var calculationItemData = new[]\\n    {\\n        new { Name = \\\"AC\\\", Expression = \\\"SELECTEDMEASURE()\\\" },\\n        new { Name = \\\"Y-X\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}'))\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"YTD\\\", Expression = string.Format(\\\"CALCULATE(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}'))\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"abs. AC vs Y-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN AC - Y1\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"abs. AC vs YTD-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN AC - Y1\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"AC vs Y-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN DIVIDE(AC - Y1, Y1)\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"AC vs YTD-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN DIVIDE(AC - Y1, Y1)\\\", CalendarTable.Name, DateColumn) }: null,\\n        new { Name = \\\"achiev. AC vs Y-X\\\", Expression = string.Format(\\\"VAR AC = SELECTEDMEASURE() VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN 1 - DIVIDE((Y1 - AC), Y1, 0)\\\", CalendarTable.Name, DateColumn) },\\n        GenerateYTD ? new { Name = \\\"achiev. AC vs YTD-X\\\", Expression = string.Format(\\\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD('{0}'[{1}], \\\"12/31\\\"), ALL('{0}')) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD('{0}'[{1}], \\\"12/31\\\"), -[Parameter 1 to 10 Value], YEAR), ALL('{0}')) RETURN 1 - DIVIDE((Y1 - AC), Y1, 0)\\\", CalendarTable.Name, DateColumn) } : null\\n    }.Where(item => item != null).ToArray();\\n\\n    // Add calculation items to the Calculation Group\\n    foreach (var itemData in calculationItemData)\\n    {\\n        var item = calcGroup.AddCalculationItem();\\n        item.Name = itemData.Name;\\n        item.Expression = itemData.Expression;\\n\\n        // Add the format string to \\\"AC vs Y-X\\\" and \\\"AC vs YTD-X\\\"\\n        if (itemData.Name == \\\"AC vs Y-X\\\" || itemData.Name == \\\"AC vs YTD-X\\\" || itemData.Name == \\\"achiev. AC vs Y-X\\\" || itemData.Name == \\\"achiev. AC vs YTD-X\\\")\\n        {\\n            item.FormatStringExpression = \\\"\\\"0.00%\\\"\\\"; // Sets the format to percentage with two decimal places\\n        }\\n    }\\n}\\ncatch (Exception ex)\\n{\\n    MessageBox.Show(\\\"Adding the calc group time intelligence was not fully successful, but the rest of the script was completed\\n\\nReason: \\\" + ex.Message);\\n}\\n\\n// Formats the DAX of all calculation items in calc groups. Those are not measures ************************************************************\\nFormatDax(Model.AllCalculationItems);\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "5. Power Query\\2. Create & Replace M Parameter",
      "Enabled": "true",
      "Execute": "// This script creates a new M Parameter as a 'Shared Expression'.\\n// It will also find the default value in all M partitions and replace them with the parameter object name.\\n//#r \\\"System.Drawing\\\"\\n\\nusing System.Drawing;\\nusing System.Text.RegularExpressions;\\nusing System.Windows.Forms;\\n\\n// Hide the 'Running Macro' spinbox\\nScriptHelper.WaitFormVisible = false;\\n\\n// Initialize variables\\nstring _ParameterName = \\\"New Parameter\\\";\\nstring _ParameterValue = \\\"ParameterValue\\\";\\n\\n// WinForms prompt to get Parameter Name / Value input\\nusing (Form prompt = new Form())\\n{\\n    Font formFont = new Font(\\\"Segoe UI\\\", 11); \\n\\n    // Prompt config\\n    prompt.AutoSize = true;\\n    prompt.MinimumSize = new Size(380, 120);\\n    prompt.Text = \\\"Create New M Parameter\\\";\\n    prompt.StartPosition = FormStartPosition.CenterScreen;\\n\\n    // Find: label\\n    Label parameterNameLabel = new Label() { Text = \\\"Enter Name:\\\" };\\n    parameterNameLabel.Location = new Point(20, 20);\\n    parameterNameLabel.AutoSize = true;\\n    parameterNameLabel.Font = formFont;\\n\\n    // Textbox for inputing the substring text\\n    TextBox parameterNameBox = new TextBox();\\n    parameterNameBox.Width = 200;\\n    parameterNameBox.Location = new Point(parameterNameLabel.Location.X + parameterNameLabel.Width + 20, parameterNameLabel.Location.Y - 4);\\n    parameterNameBox.SelectedText = \\\"New Parameter\\\";\\n    parameterNameBox.Font = formFont;\\n\\n    // Replace: label\\n    Label parameterValueLabel = new Label() { Text = \\\"Enter Value:\\\" };\\n    parameterValueLabel.Location = new Point(parameterNameLabel.Location.X, parameterNameLabel.Location.Y + parameterNameLabel.Height + 20);\\n    parameterValueLabel.AutoSize = true;\\n    parameterValueLabel.Font = formFont;\\n\\n    // Textbox for inputting the substring text\\n    TextBox parameterValueBox = new TextBox() { Left = parameterValueLabel.Right + 20, Top = parameterValueLabel.Location.Y - 4, Width = parameterNameBox.Width };\\n    parameterValueBox.SelectedText = \\\"Parameter Value\\\";\\n    parameterValueBox.Font = formFont;\\n\\n    // OK Button\\n    Button okButton = new Button() { Text = \\\"Create\\\", Left = 20, Width = 75, Top = parameterValueBox.Location.Y + parameterValueBox.Height + 20 };\\n    okButton.MinimumSize = new Size(75, 25);\\n    okButton.AutoSize = true;\\n    okButton.Font = formFont;\\n\\n    // Cancel Button\\n    Button cancelButton = new Button() { Text = \\\"Cancel\\\", Left = okButton.Location.X + okButton.Width + 10, Top = okButton.Location.Y };\\n    cancelButton.MinimumSize = new Size(75, 25);\\n    cancelButton.AutoSize = true;\\n    cancelButton.Font = formFont;\\n\\n    // Button actions\\n    okButton.Click += (sender, e) => { _ParameterName = parameterNameBox.Text; _ParameterValue = parameterValueBox.Text; prompt.DialogResult = DialogResult.OK; };\\n    cancelButton.Click += (sender, e) => { prompt.DialogResult = DialogResult.Cancel; };\\n\\n    prompt.AcceptButton = okButton;\\n    prompt.CancelButton = cancelButton;\\n\\n    prompt.Controls.Add(parameterNameLabel);\\n    prompt.Controls.Add(parameterNameBox);\\n    prompt.Controls.Add(parameterValueLabel);\\n    prompt.Controls.Add(parameterValueBox);\\n    prompt.Controls.Add(okButton);\\n    prompt.Controls.Add(cancelButton);\\n\\n    // The user clicked OK, so perform the find-and-replace logic\\n    if (prompt.ShowDialog() == DialogResult.OK)\\n    {\\n\\n        // Creates the parameter\\n        Model.AddExpression( \\n            _ParameterName, \\n            @\\\"\\n        \\\"\\\"\\\" + _ParameterValue +\\n        @\\\"\\\"\\\" meta\\n        [\\n            IsParameterQuery = true,\\n            IsParameterQueryRequired = true,\\n            Type = type text\\n        ]\\\"\\n        );\\n        \\n        \\n        // Informs the user that the parameter was successfully created\\n        Info ( \\n            \\\"Successfully created a new parameter: \\\" + @\\\"\\\"\\\"\\\" +\\n            _ParameterName + @\\\"\\\"\\\"\\\" +\\n            \\\"\\nDefault value: \\\" + @\\\"\\\"\\\"\\\" +\\n            _ParameterValue + @\\\"\\\"\\\"\\\");\\n        \\n        \\n        // Finds the parameter default value in M Partitions & replaces with the parameter name\\n        string _Find = @\\\"\\\"\\\"\\\" + _ParameterValue + @\\\"\\\"\\\"\\\";\\n        string _Replace = @\\\"#\\\"\\\"\\\" + _ParameterName + @\\\"\\\"\\\"\\\";\\n        \\n        int _NrMPartitions = 0;\\n        int _NrReplacements = 0;\\n        var _ReplacementsList = new List<string>();\\n        \\n        foreach ( var _Tables in Model.Tables )\\n        {\\n            foreach ( var _p in _Tables.Partitions )\\n            {\\n                if ( _p.SourceType == PartitionSourceType.M )\\n                {\\n                    if ( _p.Expression != _p.Expression.Replace( _Find, _Replace ) )\\n                    {\\n                        _p.Expression = _p.Expression.Replace( _Find, _Replace );\\n        \\n                        // Tracks which M partitions were replaced (and how many)\\n                        _NrReplacements = _NrReplacements + 1;\\n                        _ReplacementsList.Add( _p.Name );\\n                    }\\n        \\n                // Counts the total # M Partitions\\n                _NrMPartitions = _NrMPartitions + 1;\\n                }\\n            }\\n        }\\n        \\n        \\n        // Makes a bulleted list of all the M partitions that were replaced\\n        string _ReplacedPartitions = \\\" • \\\" + String.Join(\\\"\\n • \\\", _ReplacementsList );\\n        \\n        \\n        // Informs \\n        //      - Whether the Find & Replace was successful\\n        //      - How many M partitions were replaced\\n        //      - Which M partitions had the Find & Replace done\\n        Info (\\n            \\\"Successfully replaced\\n\\n \\\" +\\n            _Find + \\n            \\\"\\n\\n with: \\n\\n\\\" + \\n            _Replace + \\n            \\\"\\n\\n in \\\" + \\n            Convert.ToString(_NrReplacements) +\\n            \\\" of \\\" +\\n            Convert.ToString(_NrMPartitions) +  \\n            \\\" M Partitions:\\n\\\" +\\n            _ReplacedPartitions\\n        );\\n\\n    }\\n    else\\n    {\\n    Error ( \\\"Cancelled input! Ended script without changes.\\\");\\n    }\\n}\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Model Refresh\\1. Refresh Whole Model with Calculate",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.AnalysisServices.Core.dll\\\"\\nusing ToM = Microsoft.AnalysisServices.Tabular;\\n\\nvar refreshType = ToM.RefreshType.Calculate;\\nModel.Database.TOMDatabase.Model.RequestRefresh(refreshType); \\nModel.Database.TOMDatabase.Model.SaveChanges();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Model Refresh\\2. Refresh Selected Tables",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.AnalysisServices.Core.dll\\\"\\nusing ToM = Microsoft.AnalysisServices.Tabular;\\n\\nvar refreshType = ToM.RefreshType.DataOnly;\\nToM.SaveOptions so = new ToM.SaveOptions();\\n//so.MaxParallelism = 10;\\n\\nforeach (var t in Selected.Tables)\\n{\\n    string tableName = t.Name;\\n    Model.Database.TOMDatabase.Model.Tables[tableName].RequestRefresh(refreshType); \\n}\\n\\nModel.Database.TOMDatabase.Model.SaveChanges(so);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Model Refresh\\3. Refresh Partitions",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.AnalysisServices.Core.dll\\\"\\nusing ToM = Microsoft.AnalysisServices.Tabular;\\n\\nvar refreshType = ToM.RefreshType.DataOnly;\\nToM.SaveOptions so = new ToM.SaveOptions();\\n//so.MaxParallelism = 10;\\n\\nforeach (var p in Selected.Partitions)\\n{\\n    string tableName = p.Table.Name;\\n    string partitionName = p.Name;\\n    Model.Database.TOMDatabase.Model.Tables[tableName].Partitions[partitionName].RequestRefresh(refreshType); \\n}\\n\\nModel.Database.TOMDatabase.Model.SaveChanges(so);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Other\\1. Load BPA",
      "Enabled": "true",
      "Execute": "System.Net.WebClient w = new System.Net.WebClient(); \\n\\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\\nstring url = \\\"https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json\\\";\\nstring downloadLoc = path+@\\\"\\TabularEditor\\BPARules.json\\\";\\nw.DownloadFile(url, downloadLoc);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Other\\2. Check Discourage Implicit Measures",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nif (!Model.DiscourageImplicitMeasures)\\n{\\n    // Show message box\\n    DialogResult dialogResult14 = MessageBox.Show(\\n        text: \\\"Set DiscourageImplicitMeasures to true?\\n\\nThis is in general recommended and needed for calculation groups.\\\",\\n        caption: \\\"Discourage Implicit Measures\\\",\\n        buttons: MessageBoxButtons.YesNo);\\n\\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\\n    if (dialogResult14 == DialogResult.Yes)\\n    {\\n        Model.DiscourageImplicitMeasures = true;\\n    }\\n}\\nelse\\n{\\n    // Show message box indicating it is already set to true\\n    MessageBox.Show(\\n        text: \\\"DiscourageImplicitMeasures is already set to true.\\\",\\n        caption: \\\"Discourage Implicit Measures\\\",\\n        buttons: MessageBoxButtons.OK,\\n        icon: MessageBoxIcon.Information);\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Other\\4. Backup All MacroAction.json Files to Desktop",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.IO;\\nusing System.Windows.Forms;\\n\\n// Get the path to Local AppData and Desktop directories\\nstring localAppDataPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\\nstring desktopPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Desktop);\\n\\n// Get the current timestamp for the backup file name\\nstring timestamp = DateTime.Now.ToString(\\\"yyyyMMddHHmmss\\\");\\n\\n// Show a message box to ask the user for confirmation\\nDialogResult result = MessageBox.Show(\\\"Do you want to backup the MacroActions.json files?\\\", \\\"Backup Confirmation\\\", MessageBoxButtons.YesNo, MessageBoxIcon.Question);\\n\\n// If the user confirms, proceed with the backup\\nif (result == DialogResult.Yes)\\n{\\n    // Look for folders containing \\\"TabularEditor\\\" in LocalAppData\\n    string[] folders = Directory.GetDirectories(localAppDataPath, \\\"*TabularEditor*\\\", SearchOption.TopDirectoryOnly);\\n\\n    int filesCopied = 0; // Counter to track how many files are copied\\n\\n    foreach (string folder in folders)\\n    {\\n        // Check if MacroActions.json exists in the folder\\n        string macroActionsPath = Path.Combine(folder, \\\"MacroActions.json\\\");\\n        if (File.Exists(macroActionsPath))\\n        {\\n            // Create a new file name with folder name and timestamp\\n            string folderName = new DirectoryInfo(folder).Name;\\n            string newFileName = folderName + \\\"_MacroActionsBackup_\\\" + timestamp + \\\".json\\\";\\n            string newFilePath = Path.Combine(desktopPath, newFileName);\\n\\n            // Copy the file to the desktop with the new name\\n            File.Copy(macroActionsPath, newFilePath, true);\\n\\n            // Count the number of successful copies\\n            filesCopied++;\\n        }\\n    }\\n\\n    // Show a message box with the result of the operation\\n    if (filesCopied > 0)\\n    {\\n        Interaction.MsgBox(filesCopied+\\\"MacroActions.json file(s) backed up successfully!\\\", MsgBoxStyle.Information, \\\"Backup Completed\\\");\\n    }\\n    else\\n    {\\n        Interaction.MsgBox(\\\"No MacroActions.json files found to back up.\\\", MsgBoxStyle.Exclamation, \\\"Backup Completed\\\");\\n    }\\n}\\nelse\\n{\\n    Interaction.MsgBox(\\\"Backup canceled.\\\", MsgBoxStyle.Information, \\\"Operation Canceled\\\");\\n}\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Other\\5. Auto Clean Up Table Into Displayfolders",
      "Enabled": "true",
      "Execute": "//Author: David Kofod Hanna\\n//Modified: Alexander Korn \\n//Modification: Calculated Columns extra folder and applies only to selected tables + result box\\n\\n// Get selected tables from the Tabular Editor interface\\nvar selectedTables = Selected.Tables;\\n\\n// If no tables are selected, show a message and exit\\nif (!selectedTables.Any())\\n{\\n    Info(\\\"No tables selected. Please select one or more tables to modify.\\\");\\n    return;\\n}\\n\\n// Go through each selected table\\nforeach(var table in selectedTables) \\n{\\n    if(table.Name != \\\"Date\\\")\\n    {\\n        // First look at columns\\n        foreach(var column in table.Columns)\\n        {\\n            var keySuffix = \\\"Key\\\";\\n            var columnDateType = column.DataType.ToString();\\n            \\n            // Calculated columns go into their own folder\\n            if(column.Type == ColumnType.Calculated)\\n            {\\n                column.DisplayFolder = \\\"Calculated Columns\\\";\\n                continue; // Skip other processing for calculated columns\\n            }\\n            \\n            // DWCreatedDate column should be hidden in a separate folder\\n            if(column.Name == \\\"DWCreatedDate\\\")\\n            {\\n                column.DisplayFolder = \\\"Attributes\\\\Metadata\\\";   \\n                column.IsHidden = true;   \\n            }\\n            \\n            // Numeric columns should not be aggregated and float (double) data type should not be used\\n            if(column.DataType == DataType.Double || column.DataType == DataType.Decimal || column.DataType == DataType.Int64)\\n            {\\n                column.DisplayFolder = \\\"Numeric\\\";  \\n                column.SummarizeBy = AggregateFunction.None;\\n                if(column.DataType == DataType.Double)\\n                {\\n                    column.DataType = DataType.Decimal;\\n                }\\n            }\\n            \\n            // Boolean data types into their own folder\\n            if(column.DataType == DataType.Boolean)\\n            {\\n                column.DisplayFolder = \\\"Flags\\\";  \\n            }\\n            \\n            if(column.DataType == DataType.String)\\n            {\\n                column.DisplayFolder = \\\"Attributes\\\";  \\n            }\\n            \\n            // Keys go into their own display folder, should not be aggregated and hidden\\n            if(column.UsedInRelationships.Any()) \\n            {\\n                column.DisplayFolder = \\\"Key\\\";\\n                column.SummarizeBy = AggregateFunction.None;\\n                column.IsHidden = true;\\n            }\\n            \\n            // Date keys get their own folder and other dates go in attributes\\n            if(columnDateType == \\\"DateTime\\\" && column.Name != \\\"DWCreatedDate\\\")\\n            {\\n                if(column.UsedInRelationships.Any()) \\n                {\\n                    column.DisplayFolder = \\\"Key\\\";\\n                    column.IsHidden = true;\\n                }\\n                else\\n                {\\n                    column.DisplayFolder = \\\"Dates\\\";\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n// Provide feedback on completion\\nInfo(\\\"Process Complete: Column organization completed for \\\" + selectedTables.Count().ToString() + \\\" selected table(s).\\\");",
      "Tooltip": "",
      "ValidContexts": "Measure, Column"
    },
    {
      "Name": "6. Other\\6. Favorites Displayfolder",
      "Enabled": "true",
      "Execute": "//Author: Mads Steenstrup Hannibal\\n\\nstring favoriteFolderName = \\\"00. Favorites\\\";\\n\\nforeach (var measure in Selected.Measures)\\n{\\n string displayFolder = measure.DisplayFolder;\\n\\n if(!displayFolder.Contains(favoriteFolderName))\\n measure.DisplayFolder = displayFolder + \\\";\\\" + favoriteFolderName; \\n}\\n\\nforeach (var column in Selected.Columns)\\n{\\n string displayFolder = column.DisplayFolder;\\n\\n if(!displayFolder.Contains(favoriteFolderName))\\n column.DisplayFolder = displayFolder + \\\";\\\" + favoriteFolderName; \\n}",
      "Tooltip": "",
      "ValidContexts": "Measure, Column"
    },
    {
      "Name": "6. Other\\Document Model\\Step 1: Create Tables",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\nstring calctableTables = \\\"_Tables\\\";\\nstring calctableColumns = \\\"_Columns\\\";\\nstring calctableMeasure = \\\"_Measure\\\";\\nstring calctableRelationships = \\\"_Relationships\\\";\\n\\n// Define the DAX expression for the calculated table\\nstring tableExpression1 = \\\"INFO.VIEW.TABLES()\\\";\\nstring tableExpression2 = \\\"INFO.VIEW.COLUMNS()\\\";\\nstring tableExpression3 = \\\"INFO.VIEW.MEASURES()\\\";\\nstring tableExpression4 = \\\"INFO.VIEW.RELATIONSHIPS()\\\";\\n\\n// Add the calculated table to the model\\nvar table1 = Model.AddCalculatedTable(calctableTables, tableExpression1);\\nvar table2 = Model.AddCalculatedTable(calctableColumns, tableExpression2);\\nvar table3 = Model.AddCalculatedTable(calctableMeasure, tableExpression3);\\nvar table4 = Model.AddCalculatedTable(calctableRelationships, tableExpression4);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "6. Other\\Document Model\\Step 2: Create Relationship and Hide Tables",
      "Enabled": "true",
      "Execute": "// Make Sure to SAVE THE MODEL after you have added the four info tables\\nvar rel = Model.AddRelationship();\\n// Assign the \\\"many\\\" side (from _Columns[Table])\\nrel.FromColumn = Model.Tables[\\\"_Columns\\\"].Columns[\\\"Table\\\"];\\n// Assign the \\\"one\\\" side (to _Tables[Table Name])\\nrel.ToColumn = Model.Tables[\\\"_Tables\\\"].Columns[\\\"Name\\\"];\\n// Set the relationship as active\\nrel.IsActive = true;\\n// Name the relationship\\nrel.Name = \\\"Relationship between _Columns and _Tables\\\";\\n\\nModel.Tables[\\\"_Tables\\\"].IsHidden = true;\\nModel.Tables[\\\"_Columns\\\"].IsHidden = true;\\nModel.Tables[\\\"_Relationships\\\"].IsHidden = true;\\nModel.Tables[\\\"_Measure\\\"].IsHidden = true;",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "7. Official TE Library\\Calculated Table: Calendar",
      "Enabled": "true",
      "Execute": "// To use this C# Script:\\n//\\n// 1. Run the script\\n// 2. Select the column that has the earliest date\\n// 3. Select the column that has the latest date\\n\\n// List of all DateTime columns in the model\\nvar _dateColumns = Model.AllColumns.Where(c => c.DataType == DataType.DateTime ).ToList();\\n\\n// Select the column with the earliest date in the model\\ntry\\n{\\n    string _EarliestDate = \\n        SelectColumn(\\n            _dateColumns, \\n            null, \\n            \\\"Select the Column with the Earliest Date:\\\"\\n        ).DaxObjectFullName;\\n    \\n    try\\n    {\\n        // Select the column with the latest date in the model\\n        string _LatestDate = \\n            SelectColumn(\\n                _dateColumns, \\n                null, \\n                \\\"Select the Column with the Latest Date:\\\"\\n            ).DaxObjectFullName;\\n        \\n        \\n        // Create measure for reference date\\n        var _RefDateMeasure = _dateColumns[0].Table.AddMeasure(\\n            \\\"RefDate\\\",\\n            \\\"CALCULATE ( MAX ( \\\" + _LatestDate + \\\" ), REMOVEFILTERS ( ) )\\\"\\n        );\\n        \\n        \\n        // Formatted date table DAX\\n        // Based on date table from https://www.sqlbi.com/topics/date-table/\\n        // To adjust, copy everything after the @\\\" into a DAX query window & replace\\n        \\n        var _DateDaxExpression = @\\\"-- Reference date for the latest date in the report\\n        -- Until when the business wants to see data in reports\\n        VAR _Refdate_Measure = [RefDate]\\n        VAR _Today = TODAY ( )\\n        \\n        -- Replace with \\\"\\\"Today\\\"\\\" if [RefDate] evaluates blank\\n        VAR _Refdate = IF ( ISBLANK ( _Refdate_Measure ), _Today, _Refdate_Measure )\\n            VAR _RefYear        = YEAR ( _Refdate )\\n            VAR _RefQuarter     = _RefYear * 100 + QUARTER(_Refdate)\\n            VAR _RefMonth       = _RefYear * 100 + MONTH(_Refdate)\\n            VAR _RefWeek_EU     = _RefYear * 100 + WEEKNUM(_Refdate, 2)\\n        \\n        -- Earliest date in the model scope\\n        VAR _EarliestDate       = DATE ( YEAR ( MIN ( \\\" + _EarliestDate + @\\\" ) ) - 2, 1, 1 )\\n        VAR _EarliestDate_Safe  = MIN ( _EarliestDate, DATE ( YEAR ( _Today ) + 1, 1, 1 ) )\\n        \\n        -- Latest date in the model scope\\n        VAR _LatestDate_Safe    = DATE ( YEAR ( _Refdate ) + 2, 12, 1 )\\n        \\n        ------------------------------------------\\n        -- Base calendar table\\n        VAR _Base_Calendar      = CALENDAR ( _EarliestDate_Safe, _LatestDate_Safe )\\n        ------------------------------------------\\n        \\n        \\n        \\n        ------------------------------------------\\n        VAR _IntermediateResult = \\n            ADDCOLUMNS ( _Base_Calendar,\\n        \\n                    ------------------------------------------\\n                \\\"\\\"Calendar Year Number (ie 2021)\\\"\\\",           --|\\n                    YEAR ([Date]),                          --|-- Year\\n                                                            --|\\n                \\\"\\\"Calendar Year (ie 2021)\\\"\\\",                  --|\\n                    FORMAT ([Date], \\\"\\\"YYYY\\\"\\\"),                --|\\n                    ------------------------------------------\\n        \\n                    ------------------------------------------\\n                \\\"\\\"Calendar Quarter Year (ie Q1 2021)\\\"\\\",       --|\\n                    \\\"\\\"Q\\\"\\\" &                                   --|-- Quarter\\n                    CONVERT(QUARTER([Date]), STRING) &      --|\\n                    \\\"\\\" \\\"\\\" &                                   --|\\n                    CONVERT(YEAR([Date]), STRING),          --|\\n                                                            --|\\n                \\\"\\\"Calendar Year Quarter (ie 202101)\\\"\\\",        --|\\n                    YEAR([Date]) * 100 + QUARTER([Date]),   --|\\n                    ------------------------------------------\\n        \\n                    ------------------------------------------\\n                \\\"\\\"Calendar Month Year (ie Jan 21)\\\"\\\",          --|\\n                    FORMAT ( [Date], \\\"\\\"MMM YY\\\"\\\" ),            --|-- Month\\n                                                            --|\\n                \\\"\\\"Calendar Year Month (ie 202101)\\\"\\\",          --|\\n                    YEAR([Date]) * 100 + MONTH([Date]),     --|\\n                                                            --|\\n                \\\"\\\"Calendar Month (ie Jan)\\\"\\\",                  --|\\n                    FORMAT ( [Date], \\\"\\\"MMM\\\"\\\" ),               --|\\n                                                            --|\\n                \\\"\\\"Calendar Month # (ie 1)\\\"\\\",                  --|\\n                    MONTH ( [Date] ),                       --|\\n                    ------------------------------------------\\n                    \\n                    ------------------------------------------\\n                \\\"\\\"Calendar Week EU (ie WK25)\\\"\\\",               --|\\n                    \\\"\\\"WK\\\"\\\" & WEEKNUM( [Date], 2 ),            --|-- Week\\n                                                            --|\\n                \\\"\\\"Calendar Week Number EU (ie 25)\\\"\\\",          --|\\n                    WEEKNUM( [Date], 2 ),                   --|\\n                                                            --|\\n                \\\"\\\"Calendar Year Week Number EU (ie 202125)\\\"\\\", --|\\n                    YEAR ( [Date] ) * 100                   --|\\n                    +                                       --|\\n                    WEEKNUM( [Date], 2 ),                   --|\\n                                                            --|\\n                \\\"\\\"Calendar Week US (ie WK25)\\\"\\\",               --|\\n                    \\\"\\\"WK\\\"\\\" & WEEKNUM( [Date], 1 ),            --|\\n                                                            --|\\n                \\\"\\\"Calendar Week Number US (ie 25)\\\"\\\",          --|\\n                    WEEKNUM( [Date], 1 ),                   --|\\n                                                            --|\\n                \\\"\\\"Calendar Year Week Number US (ie 202125)\\\"\\\", --|\\n                    YEAR ( [Date] ) * 100                   --|\\n                    +                                       --|\\n                    WEEKNUM( [Date], 1 ),                   --|\\n                                                            --|\\n                \\\"\\\"Calendar Week ISO (ie WK25)\\\"\\\",              --|\\n                    \\\"\\\"WK\\\"\\\" & WEEKNUM( [Date], 21 ),           --|\\n                                                            --|\\n                \\\"\\\"Calendar Week Number ISO (ie 25)\\\"\\\",         --|\\n                    WEEKNUM( [Date], 21 ),                  --|\\n                                                            --|\\n                \\\"\\\"Calendar Year Week Number ISO (ie 202125)\\\"\\\",--|\\n                    YEAR ( [Date] ) * 100                   --|\\n                    +                                       --|\\n                    WEEKNUM( [Date], 21 ),                  --|\\n                    ------------------------------------------\\n        \\n                    ------------------------------------------\\n                \\\"\\\"Weekday Short (i.e. Mon)\\\"\\\",                 --|\\n                    FORMAT ( [Date], \\\"\\\"DDD\\\"\\\" ),               --|-- Weekday\\n                                                            --|\\n                \\\"\\\"Weekday Name (i.e. Monday)\\\"\\\",               --|\\n                    FORMAT ( [Date], \\\"\\\"DDDD\\\"\\\" ),              --|\\n                                                            --|\\n                \\\"\\\"Weekday Number EU (i.e. 1)\\\"\\\",               --|\\n                    WEEKDAY ( [Date], 2 ),                  --|\\n                    ------------------------------------------\\n                    \\n                    ------------------------------------------\\n                \\\"\\\"Calendar Month Day (i.e. Jan 05)\\\"\\\",         --|\\n                    FORMAT ( [Date], \\\"\\\"MMM DD\\\"\\\" ),            --|-- Day\\n                                                            --|\\n                \\\"\\\"Calendar Month Day (i.e. 0105)\\\"\\\",           --|\\n                    MONTH([Date]) * 100                     --|\\n                    +                                       --|\\n                    DAY([Date]),                            --|\\n                                                            --|\\n                \\\"\\\"YYYYMMDD\\\"\\\",                                 --|\\n                    YEAR ( [Date] ) * 10000                 --|\\n                    +                                       --|\\n                    MONTH ( [Date] ) * 100                  --|\\n                    +                                       --|\\n                    DAY ( [Date] ),                         --|\\n                    ------------------------------------------\\n        \\n        \\n                    ------------------------------------------\\n                \\\"\\\"IsDateInScope\\\"\\\",                            --|\\n                    [Date] <= _Refdate                      --|-- Boolean\\n                    &&                                      --|\\n                    YEAR([Date]) > YEAR(_EarliestDate),     --|\\n                                                            --|\\n                \\\"\\\"IsBeforeThisMonth\\\"\\\",                        --|\\n                    [Date] <= EOMONTH ( _Refdate, -1 ),     --|\\n                                                            --|\\n                \\\"\\\"IsLastMonth\\\"\\\",                              --|\\n                    [Date] <= EOMONTH ( _Refdate, 0 )       --|\\n                    &&                                      --|\\n                    [Date] > EOMONTH ( _Refdate, -1 ),      --|\\n                                                            --|\\n                \\\"\\\"IsYTD\\\"\\\",                                    --|\\n                    MONTH([Date])                           --|\\n                    <=                                      --|\\n                    MONTH(EOMONTH ( _Refdate, 0 )),         --|\\n                                                            --|\\n                \\\"\\\"IsActualToday\\\"\\\",                            --|\\n                    [Date] = _Today,                        --|\\n                                                            --|\\n                \\\"\\\"IsRefDate\\\"\\\",                                --|\\n                    [Date] = _Refdate,                      --|\\n                                                            --|\\n                \\\"\\\"IsHoliday\\\"\\\",                                --|\\n                    MONTH([Date]) * 100                     --|\\n                    +                                       --|\\n                    DAY([Date])                             --|\\n                        IN {0101, 0501, 1111, 1225},        --|\\n                                                            --|\\n                \\\"\\\"IsWeekday\\\"\\\",                                --|\\n                    WEEKDAY([Date], 2)                      --|\\n                        IN {1, 2, 3, 4, 5})                 --|\\n                    ------------------------------------------\\n        \\n        VAR _Result = \\n            \\n                    --------------------------------------------\\n            ADDCOLUMNS (                                      --|\\n                _IntermediateResult,                          --|-- Boolean #2\\n                \\\"\\\"IsThisYear\\\"\\\",                                 --|\\n                    [Calendar Year Number (ie 2021)]          --|\\n                        = _RefYear,                           --|\\n                                                            --|\\n                \\\"\\\"IsThisMonth\\\"\\\",                                --|\\n                    [Calendar Year Month (ie 202101)]         --|\\n                        = _RefMonth,                          --|\\n                                                            --|\\n                \\\"\\\"IsThisQuarter\\\"\\\",                              --|\\n                    [Calendar Year Quarter (ie 202101)]       --|\\n                        = _RefQuarter,                        --|\\n                                                            --|\\n                \\\"\\\"IsThisWeek\\\"\\\",                                 --|\\n                    [Calendar Year Week Number EU (ie 202125)]--|\\n                        = _RefWeek_EU                         --|\\n            )                                                 --|\\n                    --------------------------------------------\\n                    \\n        RETURN \\n            _Result\\\";\\n        \\n        // Create date table\\n        var _date = Model.AddCalculatedTable(\\n            \\\"Date\\\",\\n            _DateDaxExpression\\n        );\\n        \\n        //-------------------------------------------------------------------------------------------//\\n        \\n        // Sort by...\\n        \\n        // Sort Weekdays\\n        (_date.Columns[\\\"Weekday Name (i.e. Monday)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Weekday Number EU (i.e. 1)\\\"] as CalculatedTableColumn);\\n        (_date.Columns[\\\"Weekday Short (i.e. Mon)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Weekday Number EU (i.e. 1)\\\"] as CalculatedTableColumn);\\n        \\n        // Sort Weeks\\n        (_date.Columns[\\\"Calendar Week EU (ie WK25)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Week Number EU (ie 25)\\\"] as CalculatedTableColumn);\\n        (_date.Columns[\\\"Calendar Week ISO (ie WK25)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Week Number ISO (ie 25)\\\"] as CalculatedTableColumn);\\n        (_date.Columns[\\\"Calendar Week US (ie WK25)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Week Number US (ie 25)\\\"] as CalculatedTableColumn);\\n        \\n        // Sort Months\\n        (_date.Columns[\\\"Calendar Month (ie Jan)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Month # (ie 1)\\\"] as CalculatedTableColumn);\\n        (_date.Columns[\\\"Calendar Month Day (i.e. Jan 05)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Month Day (i.e. 0105)\\\"] as CalculatedTableColumn);\\n        (_date.Columns[\\\"Calendar Month Year (ie Jan 21)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Year Month (ie 202101)\\\"] as CalculatedTableColumn);\\n        \\n        // Sort Quarters\\n        (_date.Columns[\\\"Calendar Quarter Year (ie Q1 2021)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Year Quarter (ie 202101)\\\"] as CalculatedTableColumn);\\n        \\n        // Sort Years\\n        (_date.Columns[\\\"Calendar Year (ie 2021)\\\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\\\"Calendar Year Number (ie 2021)\\\"] as CalculatedTableColumn);\\n        \\n        \\n        //-------------------------------------------------------------------------------------------//\\n        \\n        \\n        // For all the columns in the date table:\\n        foreach (var c in _date.Columns )\\n        {\\n        c.DisplayFolder = \\\"7. Boolean Fields\\\";\\n        c.IsHidden = true;\\n        \\n        // Organize the date table into folders\\n            if ( ( c.DataType == DataType.DateTime & c.Name.Contains(\\\"Date\\\") ) )\\n                {\\n                c.DisplayFolder = \\\"6. Calendar Date\\\";\\n                c.IsHidden = false;\\n                c.IsKey = true;\\n                }\\n        \\n            if ( c.Name == \\\"YYMMDDDD\\\" )\\n                {\\n                c.DisplayFolder = \\\"6. Calendar Date\\\";\\n                c.IsHidden = true;\\n                }\\n        \\n            if ( c.Name.Contains(\\\"Year\\\") & c.DataType != DataType.Boolean )\\n                {\\n                c.DisplayFolder = \\\"1. Year\\\";\\n                c.IsHidden = false;\\n                }\\n        \\n            if ( c.Name.Contains(\\\"Week\\\") & c.DataType != DataType.Boolean )\\n                {\\n                c.DisplayFolder = \\\"4. Week\\\";\\n                c.IsHidden = true;\\n                }\\n        \\n            if ( c.Name.Contains(\\\"day\\\") & c.DataType != DataType.Boolean )\\n                {\\n                c.DisplayFolder = \\\"5. Weekday / Workday\\\\Weekday\\\";\\n                c.IsHidden = false;\\n                }\\n        \\n            if ( c.Name.Contains(\\\"Month\\\") & c.DataType != DataType.Boolean )\\n                {\\n                c.DisplayFolder = \\\"3. Month\\\";\\n                c.IsHidden = false;\\n                }\\n        \\n            if ( c.Name.Contains(\\\"Quarter\\\") & c.DataType != DataType.Boolean )\\n                {\\n                c.DisplayFolder = \\\"2. Quarter\\\";\\n                c.IsHidden = false;\\n                }\\n        \\n        }\\n        \\n        // Mark as date table\\n        _date.DataCategory = \\\"Time\\\";\\n        \\n        \\n        //-------------------------------------------------------------------------------------------//\\n        \\n        \\n        // Create Workdays MTD, QTD, YTD logic \\n        //      (separate into measures & calc. column to be easier to maintain)\\n        //\\n        // Add calculated columns for Workdays MTD, QTD, YTD\\n        \\n        string _WorkdaysDax = @\\\"VAR _Holidays =\\n            CALCULATETABLE (\\n                DISTINCT ('Date'[Date]),\\n                'Date'[IsHoliday] <> TRUE\\n            )\\n        VAR _WeekdayName = CALCULATE ( SELECTEDVALUE ( 'Date'[Weekday Short (i.e. Mon)] ) )\\n        VAR _WeekendDays = SWITCH (\\n                _WeekdayName,\\n                \\\"\\\"Sat\\\"\\\", 2,\\n                \\\"\\\"Sun\\\"\\\", 3,\\n                0\\n            )\\n        VAR _WorkdaysMTD =\\n            CALCULATE (\\n                NETWORKDAYS (\\n                    CALCULATE (\\n                        MIN ('Date'[Date]),\\n                        ALLEXCEPT ('Date', 'Date'[Calendar Month Year (ie Jan 21)])\\n                    ),\\n                    CALCULATE (MAX ('Date'[Date]) - _WeekendDays),\\n                    1,\\n                    _Holidays\\n                )\\n            )\\n                + 1\\n        RETURN\\n            IF (_WorkdaysMTD < 1, 1, _WorkdaysMTD)\\\";\\n        \\n        _date.AddCalculatedColumn(\\n            \\\"Workdays MTD\\\",\\n            _WorkdaysDax,\\n            \\\"5. Weekday / Workday\\\\Workdays\\\"\\n        );\\n        \\n        _date.AddCalculatedColumn(\\n            \\\"Workdays QTD\\\",\\n            _WorkdaysDax.Replace(\\\"'Date'[Calendar Month Year (ie Jan 21)]\\\", \\\"'Date'[Calendar Quarter Year (ie Q1 2021)]\\\"),\\n            \\\"5. Weekday / Workday\\\\Workdays\\\"\\n        );\\n        \\n        _date.AddCalculatedColumn(\\n            \\\"Workdays YTD\\\",\\n            _WorkdaysDax.Replace(\\\"'Date'[Calendar Month Year (ie Jan 21)]\\\", \\\"'Date'[Calendar Year (ie 2021)]\\\"),\\n            \\\"5. Weekday / Workday\\\\Workdays\\\"\\n        );\\n        \\n        \\n        //-------------------------------------------------------------------------------------------//\\n        \\n        \\n        // Create measures for showing how many workdays passed\\n        _WorkdaysDax = @\\\"CALCULATE(\\n            MAX( 'Date'[Workdays MTD] ),\\n            'Date'[IsDateInScope] = TRUE\\n        )\\\";\\n        \\n        _date.AddMeasure(\\n            \\\"# Workdays MTD\\\",\\n            _WorkdaysDax,\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        _date.AddMeasure(\\n            \\\"# Workdays QTD\\\",\\n            _WorkdaysDax.Replace(\\\"MTD\\\", \\\"QTD\\\"),\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        _date.AddMeasure(\\n            \\\"# Workdays YTD\\\",\\n            _WorkdaysDax.Replace(\\\"MTD\\\", \\\"YTD\\\"),\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        // Create measures showing how many workdays are in the selected period\\n        \\n        _WorkdaysDax = @\\\"IF (\\n            HASONEVALUE ('Date'[Calendar Month Year (ie Jan 21)]),\\n            CALCULATE (\\n                MAX ('Date'[Workdays MTD]),\\n                VALUES ('Date'[Calendar Month Year (ie Jan 21)])\\n            )\\n        )\\\";\\n        \\n        _date.AddMeasure(\\n            \\\"# Workdays in Selected Month\\\",\\n            _WorkdaysDax,\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        _date.AddMeasure(\\n            \\\"# Workdays in Selected Quarter\\\",\\n            _WorkdaysDax.Replace(\\\"MTD\\\", \\\"QTD\\\").Replace(\\\"'Date'[Calendar Month Year (ie Jan 21)]\\\", \\\"'Date'[Calendar Quarter Year (ie Q1 2021)]\\\"),\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        _date.AddMeasure(\\n            \\\"# Workdays in Selected Year\\\",\\n            _WorkdaysDax.Replace(\\\"MTD\\\", \\\"YTD\\\").Replace(\\\"'Date'[Calendar Month Year (ie Jan 21)]\\\", \\\"'Date'[Calendar Year (ie 2021)]\\\"),\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        \\n        // Create measures showing how many workdays passed as a %\\n        \\n        _WorkdaysDax = @\\\"IF (\\n            HASONEVALUE ('Date'[Calendar Month Year (ie Jan 21)]),\\n            MROUND (\\n                DIVIDE ([# Workdays MTD], [# Workdays in Selected Month]),\\n                0.01\\n            )\\n        )\\\";\\n        \\n        _date.AddMeasure(\\n            \\\"% Workdays MTD\\\",\\n            _WorkdaysDax,\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        _date.AddMeasure(\\n            \\\"% Workdays QTD\\\",\\n            _WorkdaysDax.Replace(\\\"MTD\\\", \\\"QTD\\\").Replace(\\\"'Date'[Calendar Month Year (ie Jan 21)]\\\", \\\"'Date'[Calendar Quarter Year (ie Q1 2021)]\\\").Replace(\\\"Month\\\", \\\"Quarter\\\"),\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        _date.AddMeasure(\\n            \\\"% Workdays YTD\\\",\\n            _WorkdaysDax.Replace(\\\"MTD\\\", \\\"YTD\\\").Replace(\\\"'Date'[Calendar Month Year (ie Jan 21)]\\\", \\\"'Date'[Calendar Year (ie 2021)]\\\").Replace(\\\"Month\\\", \\\"Year\\\"),\\n            \\\"5. Weekday / Workday\\\\Measures\\\\# Workdays\\\"\\n        );\\n        \\n        \\n        //-------------------------------------------------------------------------------------------//\\n        \\n        \\n        // Move the reference measure to the newly created 'Date' table.\\n        _RefDateMeasure.Delete();\\n        _RefDateMeasure = Model.Tables[\\\"Date\\\"].AddMeasure(\\n            \\\"RefDate\\\",\\n            \\\"CALCULATE ( MAX ( \\\" + _LatestDate + \\\" ), REMOVEFILTERS ( ) )\\\",\\n            \\\"0. Measures\\\"\\n        );\\n        \\n        _RefDateMeasure.IsHidden = true;\\n        \\n        Info ( \\\"Created a new, organized 'Date' table based on the template in the C# Script.\\nThe Earliest Date is taken from \\\" + _EarliestDate + \\\"\\nThe Latest Date is taken from \\\" + _LatestDate );\\n    \\n        }\\n        catch\\n        {\\n            Error( \\\"Latest column not selected! Ending script without making changes.\\\" );\\n        }\\n}\\ncatch\\n{\\n    Error( \\\"Earliest column not selected! Ending script without making changes.\\\" );\\n}\\n\\n",
      "Tooltip": "Create Date Table based on 1-2 selected date columns",
      "ValidContexts": "Model"
    },
    {
      "Name": "7. Official TE Library\\Count Rows in Table",
      "Enabled": "true",
      "Execute": "// This script counts rows in a selected table and displays the result in a pop-up info box.\\n// It does not write any changes to this model.\\n//\\n// Use this script when you want to check whether a table was loaded or how many rows it has.\\n//\\n// Get table name\\nstring _TableName = \\n    Selected.Table.DaxObjectFullName;\\n\\n// Count table rows\\nstring _dax = \\n    \\\"{ FORMAT( COUNTROWS (\\\" + _TableName + \\\"), \\\"#,##0\\\" ) }\\\";\\n\\n// Evaluate DAX\\nstring _TableRows = \\n    Convert.ToString(EvaluateDax( _dax ));\\n\\n// Return output in pop-up\\nInfo ( \\\"Number of rows in \\\" + _TableName + \\\": \\\" + _TableRows);\\n",
      "Tooltip": "If you want to see how many rows are loaded to a table, or quickly check if the table has been loaded, at all. This script requires connection to a remote model or connection via Workspace Mode.",
      "ValidContexts": "Table"
    },
    {
      "Name": "7. Official TE Library\\Create Field Parameters with Selected Columns\\Measures",
      "Enabled": "true",
      "Execute": "// Before running the script, select the measures or columns that you\\n// would like to use as field parameters (hold down CTRL to select multiple\\n// objects). Also, you may change the name of the field parameter table\\n// below. NOTE: If used against Power BI Desktop, you must enable unsupported\\n// features under File > Preferences (TE2) or Tools > Preferences (TE3).\\nvar name = \\\"Parameter\\\";\\n\\nif(Selected.Columns.Count == 0 && Selected.Measures.Count == 0) throw new Exception(\\\"No columns or measures selected!\\\");\\n\\n// Construct the DAX for the calculated table based on the current selection:\\nvar objects = Selected.Columns.Any() ? Selected.Columns.Cast<ITabularTableObject>() : Selected.Measures;\\nvar dax = \\\"{\\n    \\\" + string.Join(\\\",\\n    \\\", objects.Select((c,i) => string.Format(\\\"(\\\"{0}\\\", NAMEOF('{1}'[{0}]), {2})\\\", c.Name, c.Table.Name, i))) + \\\"\\n}\\\";\\n\\n// Add the calculated table to the model:\\nvar table = Model.AddCalculatedTable(name, dax);\\n\\n// In TE2 columns are not created automatically from a DAX expression, so \\n// we will have to add them manually:\\nvar te2 = table.Columns.Count == 0;\\nvar nameColumn = te2 ? table.AddCalculatedTableColumn(name, \\\"[Value1]\\\") : table.Columns[\\\"Value1\\\"] as CalculatedTableColumn;\\nvar fieldColumn = te2 ? table.AddCalculatedTableColumn(name + \\\" Fields\\\", \\\"[Value2]\\\") : table.Columns[\\\"Value2\\\"] as CalculatedTableColumn;\\nvar orderColumn = te2 ? table.AddCalculatedTableColumn(name + \\\" Order\\\", \\\"[Value3]\\\") : table.Columns[\\\"Value3\\\"] as CalculatedTableColumn;\\n\\nif(!te2) {\\n    // Rename the columns that were added automatically in TE3:\\n    nameColumn.IsNameInferred = false;\\n    nameColumn.Name = name;\\n    fieldColumn.IsNameInferred = false;\\n    fieldColumn.Name = name + \\\" Fields\\\";\\n    orderColumn.IsNameInferred = false;\\n    orderColumn.Name = name + \\\" Order\\\";\\n}\\n// Set remaining properties for field parameters to work\\n// See: https://twitter.com/markbdi/status/1526558841172893696\\nnameColumn.SortByColumn = orderColumn;\\nnameColumn.GroupByColumns.Add(fieldColumn);\\nfieldColumn.SortByColumn = orderColumn;\\nfieldColumn.SetExtendedProperty(\\\"ParameterMetadata\\\", \\\"{\\\"version\\\":3,\\\"kind\\\":2}\\\", ExtendedPropertyType.Json);\\nfieldColumn.IsHidden = true;\\norderColumn.IsHidden = true;\\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "7. Official TE Library\\Create M Parameter",
      "Enabled": "true",
      "Execute": "// This script creates a new M parameter in the 'Shared Expressions' of a model.\\n//\\n// Create a new shared expression called \\\"New Parameter\\\"\\nModel.AddExpression( \\n    \\\"New Parameter\\\", \\n    @\\\"\\n\\\"\\\"Parameter Text\\\"\\\" meta\\n[\\n\tIsParameterQuery = true,\\n\tIsParameterQueryRequired = true,\\n\tType = type text\\n]\\\"\\n);\\n\\n// Provides an output informing how to configure and use the parameter\\nInfo ( \\n    \\\"Created a new Shared Expression called 'New Parameter', which is an M Parameter template.\\\" + \\n    \\\"\\n------------------------------------------------------\\n\\\" + \\n    \\\"To configure:\\\" +\\n    \\\"\\n------------------------------------------------------\\n    \\\" + \\n    \\\"1. Replace the text 'New Parameter' with the desired parameter value\\n    \\\" +\\n    \\\"2. Set the data type appropriately\\n    \\\" +\\n    \\\"3. Replace any values found in the M partitions with the parameter reference.\\\" );\\n",
      "Tooltip": "If you want to create a new dynamic M Parameter to use in Power Query queries (M Partitions or Shared Expressions).",
      "ValidContexts": "Model"
    },
    {
      "Name": "7. Official TE Library\\Distinct Column Values",
      "Enabled": "true",
      "Execute": "// Construct the DAX expression to get all distinct column values, from the selected column:\\nvar dax = string.Format(\\\"ALL({0})\\\", Selected.Column.DaxObjectFullName);\\n\\n// Evaluate the DAX expression against the connected model:\\nvar result = EvaluateDax(dax);\\n\\n// Output the DataTable containing the result of the DAX expression:\\nOutput(result);\\n",
      "Tooltip": "Display the distinct values in a column for quick data profiling and access. Save as a Macro on the column level to have it quickly available.",
      "ValidContexts": "Column"
    },
    {
      "Name": "7. Official TE Library\\Edit Hidden Partitions",
      "Enabled": "true",
      "Execute": "Selected.Table.Partitions[0].Output();\\n",
      "Tooltip": "Calculated Tables, Calculation Groups and Field Parameters do not have partitions displayed in Tabular Editor. This is on purpose as these should/can not generally be edited. The partition's properties can however still be accessed and edited with bellow script snippet.",
      "ValidContexts": "Table"
    },
    {
      "Name": "7. Official TE Library\\Find & Replace Substring in Measures",
      "Enabled": "true",
      "Execute": "#r \\\"System.Drawing\\\"\\n\\nusing System.Drawing;\\nusing System.Text.RegularExpressions;\\nusing System.Windows.Forms;\\n\\n// Hide the 'Running Macro' spinbox\\nScriptHelper.WaitFormVisible = false;\\n\\n// Replace Selected.Measures with Model.AllMeasures to scan all measures\\nvar _measures = Model.AllMeasures;\\n    // Optional: Replace _m.Expression with _m.Name to find & replace in names.\\n\\n// Initialize _find and _replace string variables\\nstring _find = \\\"Find\\\";\\nstring _replace = \\\"Replace\\\";\\n\\n// WinForms prompt to get Find & Replace input\\nusing (Form prompt = new Form())\\n{\\n    Font formFont = new Font(\\\"Segoe UI\\\", 11); \\n\\n    // Prompt config\\n    prompt.AutoSize = true;\\n    prompt.MinimumSize = new Size(350, 120);\\n    prompt.Text = \\\"Find and Replace Dialog\\\";\\n    prompt.StartPosition = FormStartPosition.CenterScreen;\\n\\n    // Set the AutoScaleMode property to Dpi\\n    prompt.AutoScaleMode = AutoScaleMode.Dpi;\\n\\n    // Find: label\\n    Label findLabel = new Label() { Text = \\\"Find:\\\" };\\n    findLabel.Location = new Point(20, 20);\\n    findLabel.Width = 80;\\n    findLabel.Font = formFont;\\n\\n    // Textbox for inputing the substring text\\n    TextBox findBox = new TextBox();\\n    findBox.Width = 200;\\n    findBox.Location = new Point(findLabel.Location.X + findLabel.Width + 20, findLabel.Location.Y - 4);\\n    findBox.SelectedText = \\\"Find this Text\\\";\\n    findBox.Font = formFont;\\n\\n    // Replace: label\\n    Label replaceLabel = new Label() { Left = 20, Top = 60, Text = \\\"Replace:\\\" };\\n    replaceLabel.Width = 80;\\n    replaceLabel.Font = formFont;\\n\\n    // Textbox for inputting the substring text\\n    TextBox replaceBox = new TextBox() { Left = replaceLabel.Right + 20, Top = replaceLabel.Location.Y - 4, Width = findBox.Width };\\n    replaceBox.SelectedText = \\\"Replace with this Text\\\";\\n    replaceBox.Font = formFont;\\n\\n    // OK Button\\n    Button okButton = new Button() { Text = \\\"OK\\\", Left = 20, Width = 75, Top = replaceBox.Location.Y + replaceBox.Height + 20 };\\n    okButton.MinimumSize = new Size(75, 25);\\n    okButton.AutoSize = true;\\n    okButton.Font = formFont;\\n\\n    // Cancel Button\\n    Button cancelButton = new Button() { Text = \\\"Cancel\\\", Left = okButton.Location.X + okButton.Width + 10, Top = okButton.Location.Y };\\n    cancelButton.MinimumSize = new Size(75, 25);\\n    cancelButton.AutoSize = true;\\n    cancelButton.Font = formFont;\\n\\n    // Button actions\\n    okButton.Click += (sender, e) => { _find = findBox.Text; _replace = replaceBox.Text; prompt.DialogResult = DialogResult.OK; };\\n    cancelButton.Click += (sender, e) => { prompt.DialogResult = DialogResult.Cancel; };\\n\\n    prompt.AcceptButton = okButton;\\n    prompt.CancelButton = cancelButton;\\n\\n    prompt.Controls.Add(findLabel);\\n    prompt.Controls.Add(findBox);\\n    prompt.Controls.Add(replaceLabel);\\n    prompt.Controls.Add(replaceBox);\\n    prompt.Controls.Add(okButton);\\n    prompt.Controls.Add(cancelButton);\\n\\n    // The user clicked OK, so perform the find-and-replace logic\\n    if (prompt.ShowDialog() == DialogResult.OK)\\n        {\\n            \\n            int _occurrences = 0;\\n            var _ReplacedList = new List<string>();\\n    \\n            foreach (var _m in _measures)\\n                {\\n                    if (_m.Expression != _m.Expression.Replace(_find, _replace))\\n                        {\\n                            try\\n                                {\\n                                    // Count number of occurrences of _find substring in the string\\n                                    string _pattern = Regex.Escape(_find);\\n                                    _occurrences = Regex.Matches(_m.Expression, _pattern).Count;\\n                                }\\n                            catch\\n                                {\\n                                    // If it's not found there are 0 occurrences\\n                                    _occurrences = 0;\\n                                }\\n            \\n                            // Perform the Find/Replace\\n                            _m.Expression = _m.Expression.Replace(_find, _replace);\\n                            _ReplacedList.Add(_m.DaxObjectName);\\n                        }\\n                }\\n    \\n            // Create a list of all the measures replaced\\n            string _Replaced = _ReplacedList.Count > 0\\n                ? \\\"\\n\\nMeasures with Replacements:\\n • \\\" + string.Join(\\\"\\n • \\\", _ReplacedList)\\n                : \\\"\\\";\\n    \\n            // Return a success Info box pop-up\\n            Info(\\n                \\\"Replaced \\\" + \\n                _occurrences + \\n                \\\" occurrences of '\\\" + \\n                _find + \\n                \\\"' with '\\\" + \\n                _replace + \\n                \\\"'\\\" + \\n                _Replaced);\\n        }\\n    else\\n        {\\n            Error(\\\"Find/Replace cancelled!\\\");\\n        }\\n}\\n\\n",
      "Tooltip": "Will find & replace a substring in the model's measures DAX expression.",
      "ValidContexts": "Model"
    },
    {
      "Name": "7. Official TE Library\\Format Numeric Measures",
      "Enabled": "true",
      "Execute": "// This script is meant to format all measures with a default formatstring\\nforeach (var ms in Selected.Measures) {\\n//Don't set format string on hidden measures\\n\tif (ms.IsHidden) continue;\\n// If the format string is empty continue. \\n\tif (!string.IsNullOrWhiteSpace(ms.FormatString)) continue;\\n//If the data type is int set a whole number format string\\n\tif (ms.DataType == DataType.Int64) ms.FormatString = \\\"#,##0\\\";\\n//If the datatype is double or decimal \\n\tif (ms.DataType == DataType.Double || ms.DataType == DataType.Decimal) {\\n    //and the name contains # or QTY then set the format string to a whole number\\n\t\tif (ms.Name.Contains(\\\"#\\\")\\n\t\t\t|| ms.Name.IndexOf(\\\"QTY\\\", StringComparison.OrdinalIgnoreCase) >= 0) ms.FormatString = \\\"#,##0\\\";\\n\t\t//otherwise set it a decimal format string. \\n    else ms.FormatString = \\\"#,##0.00\\\";\\n\t}\\n}\\n",
      "Tooltip": "Allows you to quickly set default format strings on the measures selected.",
      "ValidContexts": "Measure"
    },
    {
      "Name": "7. Official TE Library\\TE3\\Create New M Parameter and Add it to Existing M Partitions",
      "Enabled": "true",
      "Execute": "// This script creates a new M Parameter as a 'Shared Expression'.\\n// It will also find the default value in all M partitions and replace them with the parameter object name.\\n//#r \\\"System.Drawing\\\"\\n\\nusing System.Drawing;\\nusing System.Text.RegularExpressions;\\nusing System.Windows.Forms;\\n\\n// Hide the 'Running Macro' spinbox\\nScriptHelper.WaitFormVisible = false;\\n\\n// Initialize variables\\nstring _ParameterName = \\\"New Parameter\\\";\\nstring _ParameterValue = \\\"ParameterValue\\\";\\n\\n// WinForms prompt to get Parameter Name / Value input\\nusing (Form prompt = new Form())\\n{\\n    Font formFont = new Font(\\\"Segoe UI\\\", 11); \\n\\n    // Prompt config\\n    prompt.AutoSize = true;\\n    prompt.MinimumSize = new Size(380, 120);\\n    prompt.Text = \\\"Create New M Parameter\\\";\\n    prompt.StartPosition = FormStartPosition.CenterScreen;\\n\\n    // Find: label\\n    Label parameterNameLabel = new Label() { Text = \\\"Enter Name:\\\" };\\n    parameterNameLabel.Location = new Point(20, 20);\\n    parameterNameLabel.AutoSize = true;\\n    parameterNameLabel.Font = formFont;\\n\\n    // Textbox for inputing the substring text\\n    TextBox parameterNameBox = new TextBox();\\n    parameterNameBox.Width = 200;\\n    parameterNameBox.Location = new Point(parameterNameLabel.Location.X + parameterNameLabel.Width + 20, parameterNameLabel.Location.Y - 4);\\n    parameterNameBox.SelectedText = \\\"New Parameter\\\";\\n    parameterNameBox.Font = formFont;\\n\\n    // Replace: label\\n    Label parameterValueLabel = new Label() { Text = \\\"Enter Value:\\\" };\\n    parameterValueLabel.Location = new Point(parameterNameLabel.Location.X, parameterNameLabel.Location.Y + parameterNameLabel.Height + 20);\\n    parameterValueLabel.AutoSize = true;\\n    parameterValueLabel.Font = formFont;\\n\\n    // Textbox for inputting the substring text\\n    TextBox parameterValueBox = new TextBox() { Left = parameterValueLabel.Right + 20, Top = parameterValueLabel.Location.Y - 4, Width = parameterNameBox.Width };\\n    parameterValueBox.SelectedText = \\\"Parameter Value\\\";\\n    parameterValueBox.Font = formFont;\\n\\n    // OK Button\\n    Button okButton = new Button() { Text = \\\"Create\\\", Left = 20, Width = 75, Top = parameterValueBox.Location.Y + parameterValueBox.Height + 20 };\\n    okButton.MinimumSize = new Size(75, 25);\\n    okButton.AutoSize = true;\\n    okButton.Font = formFont;\\n\\n    // Cancel Button\\n    Button cancelButton = new Button() { Text = \\\"Cancel\\\", Left = okButton.Location.X + okButton.Width + 10, Top = okButton.Location.Y };\\n    cancelButton.MinimumSize = new Size(75, 25);\\n    cancelButton.AutoSize = true;\\n    cancelButton.Font = formFont;\\n\\n    // Button actions\\n    okButton.Click += (sender, e) => { _ParameterName = parameterNameBox.Text; _ParameterValue = parameterValueBox.Text; prompt.DialogResult = DialogResult.OK; };\\n    cancelButton.Click += (sender, e) => { prompt.DialogResult = DialogResult.Cancel; };\\n\\n    prompt.AcceptButton = okButton;\\n    prompt.CancelButton = cancelButton;\\n\\n    prompt.Controls.Add(parameterNameLabel);\\n    prompt.Controls.Add(parameterNameBox);\\n    prompt.Controls.Add(parameterValueLabel);\\n    prompt.Controls.Add(parameterValueBox);\\n    prompt.Controls.Add(okButton);\\n    prompt.Controls.Add(cancelButton);\\n\\n    // The user clicked OK, so perform the find-and-replace logic\\n    if (prompt.ShowDialog() == DialogResult.OK)\\n    {\\n\\n        // Creates the parameter\\n        Model.AddExpression( \\n            _ParameterName, \\n            @\\\"\\n        \\\"\\\"\\\" + _ParameterValue +\\n        @\\\"\\\"\\\" meta\\n        [\\n            IsParameterQuery = true,\\n            IsParameterQueryRequired = true,\\n            Type = type text\\n        ]\\\"\\n        );\\n        \\n        \\n        // Informs the user that the parameter was successfully created\\n        Info ( \\n            \\\"Successfully created a new parameter: \\\" + @\\\"\\\"\\\"\\\" +\\n            _ParameterName + @\\\"\\\"\\\"\\\" +\\n            \\\"\\nDefault value: \\\" + @\\\"\\\"\\\"\\\" +\\n            _ParameterValue + @\\\"\\\"\\\"\\\");\\n        \\n        \\n        // Finds the parameter default value in M Partitions & replaces with the parameter name\\n        string _Find = @\\\"\\\"\\\"\\\" + _ParameterValue + @\\\"\\\"\\\"\\\";\\n        string _Replace = @\\\"#\\\"\\\"\\\" + _ParameterName + @\\\"\\\"\\\"\\\";\\n        \\n        int _NrMPartitions = 0;\\n        int _NrReplacements = 0;\\n        var _ReplacementsList = new List<string>();\\n        \\n        foreach ( var _Tables in Model.Tables )\\n        {\\n            foreach ( var _p in _Tables.Partitions )\\n            {\\n                if ( _p.SourceType == PartitionSourceType.M )\\n                {\\n                    if ( _p.Expression != _p.Expression.Replace( _Find, _Replace ) )\\n                    {\\n                        _p.Expression = _p.Expression.Replace( _Find, _Replace );\\n        \\n                        // Tracks which M partitions were replaced (and how many)\\n                        _NrReplacements = _NrReplacements + 1;\\n                        _ReplacementsList.Add( _p.Name );\\n                    }\\n        \\n                // Counts the total # M Partitions\\n                _NrMPartitions = _NrMPartitions + 1;\\n                }\\n            }\\n        }\\n        \\n        \\n        // Makes a bulleted list of all the M partitions that were replaced\\n        string _ReplacedPartitions = \\\" • \\\" + String.Join(\\\"\\n • \\\", _ReplacementsList );\\n        \\n        \\n        // Informs \\n        //      - Whether the Find & Replace was successful\\n        //      - How many M partitions were replaced\\n        //      - Which M partitions had the Find & Replace done\\n        Info (\\n            \\\"Successfully replaced\\n\\n \\\" +\\n            _Find + \\n            \\\"\\n\\n with: \\n\\n\\\" + \\n            _Replace + \\n            \\\"\\n\\n in \\\" + \\n            Convert.ToString(_NrReplacements) +\\n            \\\" of \\\" +\\n            Convert.ToString(_NrMPartitions) +  \\n            \\\" M Partitions:\\n\\\" +\\n            _ReplacedPartitions\\n        );\\n\\n    }\\n    else\\n    {\\n    Error ( \\\"Cancelled input! Ended script without changes.\\\");\\n    }\\n}\\n",
      "Tooltip": "If you want to replace a string in model M Partitions (i.e. connection string, filter condition, column name, etc.) with a parameter value.",
      "ValidContexts": "Model"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Add Total by Calc Item (NAMASDATA)",
      "Enabled": "true",
      "Execute": "string annotationLabel = \\\"Namasdata\\\";\\nstring annotationValue = \\\"Totales\\\";\\nstring sliceColumnLabel = \\\"sliceColumn\\\";\\nif (Selected.CalculationItems.Count() == 0)\\n{\\n    Error(\\\"Selecciona al menos un elemento de cálculo\\\");\\n    return;\\n}\\nif (!Model.Tables.Any(t => t.GetAnnotation(annotationLabel) == annotationValue))\\n{\\n    Error(\\\"Ejecuta primero la macro de crear Grupo de cálculo de Totales\\\");\\n    return;\\n}\\nCalculationGroupTable totalsCG = Model.Tables.Where(t => t.GetAnnotation(annotationLabel) == annotationValue).First() as CalculationGroupTable;\\nstring sliceColumn = totalsCG.GetAnnotation(sliceColumnLabel);\\nforeach(CalculationItem cItem in Selected.CalculationItems)\\n{\\n    Column cItemColumn = cItem.CalculationGroupTable.Columns[0];\\n    string calcItemName = cItem.Name;\\n    string calcItemExpression =\\n        String.Format(\\n            @\\\"IF(\\n                ISINSCOPE({0}),\\n                BLANK(),\\n                CALCULATE(\\n                    SELECTEDMEASURE(),\\n                    {1} = \\\"\\\"{2}\\\"\\\"\\n                )\\n            )\\\", sliceColumn, cItemColumn.DaxObjectFullName, cItem.Name);\\n    CalculationItem calcItem = totalsCG.AddCalculationItem(calcItemName, calcItemExpression);\\n    calcItem.FormatDax();\\n}\\n",
      "Tooltip": "",
      "ValidContexts": "CalculationItem"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Add Total by Calc Item",
      "Enabled": "true",
      "Execute": "string calcGroupTypeLabel = \\\"CalcGroupType\\\";\\nstring calcGroupTypeValue = \\\"MultiTotal\\\";\\nIEnumerable<Table> multiTotalCalcGroups = \\n    Model.Tables.Where(\\n        t => \\n        t.GetAnnotation(calcGroupTypeLabel) \\n            == calcGroupTypeValue);\\nTable calcGroupAsTable = null as Table; \\nif(multiTotalCalcGroups.Count() == 0)\\n{\\n    Error(\\\"No multi-total calc group found. \\\" +\\n        \\\"Run the macro to create a multi-total \\\" +\\n        \\\"calc group first and try again\\\");\\n    return;\\n} else if(multiTotalCalcGroups.Count() == 1)\\n{\\n    calcGroupAsTable = multiTotalCalcGroups.First();\\n}\\nelse\\n{\\n    calcGroupAsTable = SelectTable(multiTotalCalcGroups, label: \\\"Select Multi-total Calc Group to use\\\");\\n    if(calcGroupAsTable == null)\\n    {\\n        Error(\\\"You cancelled the execution.\\\");\\n        return;\\n    }\\n}\\nif(Selected.CalculationItems.Count() == 0)\\n{\\n    Error(\\\"Select one or more calculation items and try again.\\\");\\n    return;\\n}\\nstring calcGroupValuesFieldLabel = \\\"ValuesField\\\";\\nstring multiTotalBreakDownColumnCode = calcGroupAsTable.GetAnnotation(calcGroupValuesFieldLabel);\\nCalculationGroupTable calcGroup = calcGroupAsTable as CalculationGroupTable;\\nforeach(CalculationItem calcItem in Selected.CalculationItems)\\n{\\n    string calcItemName = calcItem.Name;\\n    string calcItemExpression =\\n        String.Format(\\n            @\\\"IF(\\n                NOT ISINSCOPE( {0} ),\\n                CALCULATE(\\n                    SELECTEDMEASURE( ),\\n                    {1} = \\\"\\\"{2}\\\"\\\"\\n                )\\n            )\\\",\\n            multiTotalBreakDownColumnCode,\\n            calcItem.CalculationGroupTable.Columns[0].DaxObjectFullName,\\n            calcItem.Name);\\n    CalculationItem customTotalCalcItem = \\n        calcGroup.AddCalculationItem(\\n            name:calcItemName, \\n            expression:calcItemExpression);\\n    string calcItemFormatStringExpression =\\n        String.Format(\\n            @\\\"IF(\\n                NOT ISINSCOPE( {0} ),\\n                CALCULATE(\\n                    SELECTEDMEASUREFORMATSTRING( ),\\n                    {1} = \\\"\\\"{2}\\\"\\\"\\n                )\\n            )\\\",\\n            multiTotalBreakDownColumnCode,\\n            calcItem.CalculationGroupTable.Columns[0].DaxObjectFullName,\\n            calcItem.Name);\\n    customTotalCalcItem.FormatStringExpression = \\n        calcItemFormatStringExpression;\\n    customTotalCalcItem.FormatDax();\\n}\\n",
      "Tooltip": "requires the existence of a Multi-total Calc Group",
      "ValidContexts": "CalculationItem"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Avg by Custom Column",
      "Enabled": "true",
      "Execute": "if(Selected.Measures.Count() == 0)\\n{\\n    Error(\\\"You need to select at least one measure.\\\");\\n    return;\\n};\\nTable table = SelectTable(label: \\\"Select a table\\\");\\nif(table == null)\\n{\\n    Error(\\\"You cancelled\\\");\\n    return;\\n};\\nColumn column = SelectColumn(table);\\nif (column == null)\\n{\\n    Error(\\\"You cancelled\\\");\\n    return;\\n};\\nforeach(Measure measure in Selected.Measures)\\n{\\n    string measureName = \\\"Avg \\\" + measure.Name + \\\" by \\\" + column.Name;\\n    string measureExpression = String.Format(@\\\"AVERAGEX(  VALUES({0}),  {1})\\\", column.DaxObjectFullName, measure.DaxObjectFullName);\\n    string measureDisplayFolder = \\\"Avgs of \\\" + measure.Name;\\n    string measureDescription = measureName;\\n    Measure newMeasure = measure.Table.AddMeasure(measureName, measureExpression,displayFolder:measureDisplayFolder);\\n    newMeasure.Description = measureDescription;\\n    newMeasure.FormatDax();\\n}\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Create Measures From Calc Group",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic; \\nusing System.Windows.Forms;\\n\\n/* '2022-06-13 / B.Agullo / */\\n/* '2022-09-17 / B.Agullo / possibility to create a Field Parameter with a column for the base measure & calc Item\\n/* CREATE MEASURES WITH BASE MEASURES AND A CALCULATION GROUP */ \\n\\n/* See: https://www.esbrina-ba.com/creating-well-formatted-measures-based-on-a-calculation-group/  */\\n/* See: https://www.esbrina-ba.com/a-dynamic-legend-for-a-dynamic-measure-time-intel-chart/\\n/* select measures and execute, you will need to run it twice */ \\n/* first time to create aux calc group, second time to actually create measuree*/ \\n/* remove aux calc group before going to production, do the right thing */ \\n\\nstring auxCgTag = \\\"@AgulloBernat\\\";\\nstring auxCgTagValue = \\\"CG to extract format strings\\\";\\n\\nstring auxCalcGroupName = \\\"DELETE AUX CALC GROUP\\\";\\nstring auxCalcItemName = \\\"Get Format String\\\";\\n\\nstring baseMeasureAnnotationName = \\\"Base Measure\\\"; \\nstring calcItemAnnotationName = \\\"Calc Item\\\"; \\nstring calcItemSortOrderName = \\\"Sort Order\\\";\\nstring calcItemSortOrderValue = String.Empty;  \\n\\nstring scriptAnnotationName = \\\"Script\\\";\\nstring scriptAnnotationValue = \\\"Create Measures with a Calculation Group\\\"; \\n\\nbool generateFieldParameter;\\n\\nDialogResult dialogResult = MessageBox.Show(\\\"Generate Field Parameter?\\\", \\\"Field Parameter\\\", MessageBoxButtons.YesNo);\\ngenerateFieldParameter = (dialogResult == DialogResult.Yes);\\n\\n\\n/*find any regular CGs (excluding the one we might have created)*/\\nvar regularCGs = Model.Tables.Where(\\n    x => x.ObjectType == ObjectType.CalculationGroupTable\\n    & x.GetAnnotation(auxCgTag) != auxCgTagValue);\\n\\nif (regularCGs.Count() == 0)\\n{\\n    Error(\\\"No Calculation Groups Found\\\");\\n    return;\\n};\\n\\n/*check if we already created the auxiliary calculation group*/\\nvar auxCgs = Model.Tables.Where(x => x.GetAnnotation(auxCgTag) == auxCgTagValue);\\n\\nCalculationGroupTable auxCg = null as CalculationGroupTable; \\n\\n/*if there are more than one for some reason we'll just use the first one*/\\nif(auxCgs.Count() >= 1)\\n{\\n    auxCg = auxCgs.First() as CalculationGroupTable; \\n} else \\n{\\n    /*create the aux calc group and ask for a refresh since it cannot be used in a query before that*/\\n    auxCg = Model.AddCalculationGroup(name: auxCalcGroupName);\\n    auxCg.AddCalculationItem(name: auxCalcItemName, expression: \\\"SELECTEDMEASUREFORMATSTRING()\\\");\\n    auxCg.SetAnnotation(auxCgTag, auxCgTagValue);\\n\\n    /*better hidden in case someone forgets to delete it*/\\n    auxCg.IsHidden = true; \\n    int maxPrecedence = 0; \\n\\n    /*check for the max precedence of other calc groups*/\\n    foreach (CalculationGroupTable cg in regularCGs)\\n    {\\n        if (cg.CalculationGroupPrecedence > maxPrecedence)\\n        {\\n            maxPrecedence = cg.CalculationGroupPrecedence;\\n        };\\n    };\\n\\n    /*assign the highest precedence and some margin*/\\n    auxCg.CalculationGroupPrecedence = maxPrecedence + 10; \\n\\n    Info(\\\"Save changes to the model, recalculate the model, and launch the script again.\\\");\\n    return;\\n\\n};\\n\\n\\n\\n\\n/*check if any measures are selected*/\\nif (Selected.Measures.Count == 0)\\n{\\n    Error(\\\"No measures selected\\\");\\n    return;\\n}\\n\\nCalculationGroupTable regularCg = null as CalculationGroupTable;\\n\\n/*allow user to select calculation group if more than one is found*/\\nif (regularCGs.Count() > 1)\\n{\\n    regularCg = SelectTable(regularCGs) as CalculationGroupTable;\\n}\\n/*otherwise just pick the first (and only)*/\\nelse\\n{\\n    regularCg = regularCGs.First() as CalculationGroupTable;\\n}\\n\\n/*check if no selection was made*/ \\nif(regularCg == null)\\n{\\n    Error(\\\"No Target Calculation Group selected\\\");\\n    return;\\n};\\n\\nstring name = String.Empty; \\nif(generateFieldParameter) {\\n    name = Interaction.InputBox(\\\"Provide a name for the field parameter\\\", \\\"Field Parameter\\\", regularCg.Name + \\\" Measures\\\", 740, 400);\\n    if(name == \\\"\\\") {Error(\\\"Execution Aborted\\\"); return;};\\n}; \\n\\n\\nMeasureCollection measures; \\n\\n/*iterates through each selected measure*/\\nforeach (Measure m in Selected.Measures)\\n{\\n    /*check that base measure has a proper format string*/ \\n    if(m.FormatString == \\\"\\\") {\\n        Error(\\\"Define FormatString for \\\" + m.Name + \\\" and try again\\\");\\n        return;\\n    };\\n\\n    /*prepares a displayfolder to store all new measures*/\\n    string displayFolderName = m.Name + \\\" Measures\\\";\\n\\n    /*iterates thorough all calculation items of the selected calc group*/ \\n    foreach (CalculationItem calcItem in regularCg.CalculationItems)\\n    {\\n        /*measure name*/ \\n        string measureName = m.Name + \\\" \\\" + calcItem.Name;           \\n        \\n        //only if the measure is not yet there (think of reruns)\\n        if(!Model.AllMeasures.Any(x => x.Name == measureName)){\\n\\n            /*prepares a query to calculate the resulting format when applying the calculation item on the measure*/ \\n            string query = string.Format(\\n                \\\"EVALUATE {{CALCULATE({0},{1},{2})}}\\\",\\n                m.DaxObjectFullName,\\n                string.Format(\\n                    \\\"{0}=\\\"{1}\\\"\\\",\\n                    regularCg.Columns[0].DaxObjectFullName,\\n                    calcItem.Name),\\n                string.Format(\\n                    \\\"{0}=\\\"{1}\\\"\\\",\\n                    auxCg.Columns[0].DaxObjectFullName,\\n                    auxCalcItemName)\\n                );\\n\\n            /*executes the query*/ \\n            using (var reader = Model.Database.ExecuteReader(query))\\n            {\\n                // resultset should contain just one row, with the format string\\n                while (reader.Read())\\n                {\\n                                 \\n\\n                    /*retrive the formatstring from the query*/ \\n                    string formatString = reader.GetValue(0).ToString();\\n\\n                    /*build the expression of the measure*/\\n                    string measureExpression = string.Format(\\n                        \\\"CALCULATE({0},{1}=\\\"{2}\\\")\\\",\\n                        m.DaxObjectName,\\n                        regularCg.Columns[0].DaxObjectFullName,\\n                        calcItem.Name);\\n\\n                    \\n                    \\n                    /*actually build the measure*/ \\n                    Measure newMeasure = \\n                        m.Table.AddMeasure(\\n                            name: measureName,\\n                            expression: measureExpression);\\n\\n\\n                    /*the all important format string!*/\\n                    newMeasure.FormatString = formatString;\\n\\n                    /*final polish*/\\n                    newMeasure.DisplayFolder = displayFolderName;\\n                    newMeasure.FormatDax();\\n                    \\n                    /*add annotations for the creation of the field parameter*/\\n                    newMeasure.SetAnnotation(baseMeasureAnnotationName,m.Name); \\n                    newMeasure.SetAnnotation(calcItemAnnotationName,calcItem.Name);\\n                    newMeasure.SetAnnotation(scriptAnnotationName,scriptAnnotationValue);\\n                    newMeasure.SetAnnotation(calcItemSortOrderName,calcItem.Ordinal.ToString(\\\"000\\\"));\\n\\n                }\\n            }\\n        }\\n    } \\n}\\n\\n\\nif(!generateFieldParameter) {\\n    //end of execution\\n    return;\\n};\\n\\n\\n// Before running the script, select the measures or columns that you\\n// would like to use as field parameters (hold down CTRL to select multiple\\n// objects). Also, you may change the name of the field parameter table\\n// below. NOTE: If used against Power BI Desktop, you must enable unsupported\\n// features under File > Preferences (TE2) or Tools > Preferences (TE3).\\n\\n\\nif(Selected.Columns.Count == 0 && Selected.Measures.Count == 0) throw new Exception(\\\"No columns or measures selected!\\\");\\n\\n// Construct the DAX for the calculated table based on the measures created previously by the script\\nvar objects = Model.AllMeasures\\n    .Where(x => x.GetAnnotation(scriptAnnotationName) == scriptAnnotationValue)\\n    .OrderBy(x => x.GetAnnotation(baseMeasureAnnotationName) + x.GetAnnotation(calcItemSortOrderName)); \\n\\nvar dax = \\\"{\\n    \\\" + string.Join(\\\",\\n    \\\", objects.Select((c,i) => string.Format(\\\"(\\\"{0}\\\", NAMEOF('{1}'[{0}]), {2},\\\"{3}\\\",\\\"{4}\\\")\\\", \\n    c.Name, c.Table.Name, i,\\n    Model.Tables[c.Table.Name].Measures[c.Name].GetAnnotation(\\\"Base Measure\\\"),\\n    Model.Tables[c.Table.Name].Measures[c.Name].GetAnnotation(\\\"Calc Item\\\")))) + \\\"\\n}\\\";\\n\\n// Add the calculated table to the model:\\nvar table = Model.AddCalculatedTable(name, dax);\\n\\n// In TE2 columns are not created automatically from a DAX expression, so \\n// we will have to add them manually:\\nvar te2 = table.Columns.Count == 0;\\nvar nameColumn = te2 ? table.AddCalculatedTableColumn(name, \\\"[Value1]\\\") : table.Columns[\\\"Value1\\\"] as CalculatedTableColumn;\\nvar fieldColumn = te2 ? table.AddCalculatedTableColumn(name + \\\" Fields\\\", \\\"[Value2]\\\") : table.Columns[\\\"Value2\\\"] as CalculatedTableColumn;\\nvar orderColumn = te2 ? table.AddCalculatedTableColumn(name + \\\" Order\\\", \\\"[Value3]\\\") : table.Columns[\\\"Value3\\\"] as CalculatedTableColumn;\\n\\nif(!te2) {\\n    // Rename the columns that were added automatically in TE3:\\n    nameColumn.IsNameInferred = false;\\n    nameColumn.Name = name;\\n    fieldColumn.IsNameInferred = false;\\n    fieldColumn.Name = name + \\\" Fields\\\";\\n    orderColumn.IsNameInferred = false;\\n    orderColumn.Name = name + \\\" Order\\\";\\n}\\n// Set remaining properties for field parameters to work\\n// See: https://twitter.com/markbdi/status/1526558841172893696\\nnameColumn.SortByColumn = orderColumn;\\nnameColumn.GroupByColumns.Add(fieldColumn);\\nfieldColumn.SortByColumn = orderColumn;\\nfieldColumn.SetExtendedProperty(\\\"ParameterMetadata\\\", \\\"{\\\"version\\\":3,\\\"kind\\\":2}\\\", ExtendedPropertyType.Json);\\nfieldColumn.IsHidden = true;\\norderColumn.IsHidden = true;",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\DISTINCTCOUNT",
      "Enabled": "true",
      "Execute": "if(Selected.Columns.Count() == 0)\\n{\\n    Error(\\\"You need to select at least one measure.\\\");\\n    return;\\n};\\nforeach(Column column in Selected.Columns)\\n{\\n    string measureName = \\\"Distinct \\\" + column.Name;\\n    string measureExpression = String.Format(\\\"DISTINCTCOUNT({0})\\\", column.DaxObjectFullName);\\n    string measureDescription = \\\"Distinct count of \\\" + column.Name;\\n    Measure measure = column.Table.AddMeasure(measureName, measureExpression);\\n    measure.Description = measureDescription;\\n    measure.FormatDax(); \\n};\\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Dynamic Headers by measure",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n\\n/* '2023-01-26 / B.Agullo / creates a field parameter of measures filtered by calc group and values of a column with a name defined by a measure evaluated in the filtered value and calc item  */\\n\\n/* DYNAMIC HEADER FIELD PARAMETER SCRIPT */ \\n\\n/* see https://www.esbrina-ba.com/dynamic-headers-in-power-bi-sort-of/ */\\n/* select measures and execute, you will need to run it twice */\\n/* first time to create aux calc group, second time to actually create measuree*/\\n/* remove aux calc group before going to production, do the right thing */\\n\\nstring auxCgTag = \\\"@AgulloBernat\\\";\\nstring auxCgTagValue = \\\"CG to extract format strings\\\";\\n\\nstring auxCalcGroupName = \\\"DELETE AUX CALC GROUP\\\";\\nstring auxCalcItemName = \\\"Get Format String\\\";\\n\\nstring baseMeasureAnnotationName = \\\"Base Measure\\\";\\nstring calcItemAnnotationName = \\\"Calc Item\\\";\\nstring calcItemSortOrderName = \\\"Sort Order\\\";\\nstring calcItemSortOrderValue = String.Empty;\\n\\nstring filterValueAnnotationName = String.Empty;\\nstring dynamicNameAnnotationName = \\\"Dynamic Name\\\";\\n\\n\\nstring scriptAnnotationName = \\\"Script\\\";\\nstring scriptAnnotationValue = \\\"Create Measures with a Calculation Group \\\" + DateTime.Now.ToString(\\\"yyyyMMddHHmmss\\\") ;\\n\\nbool generateFieldParameter;\\n\\nDialogResult dialogResult = MessageBox.Show(\\\"Generate Field Parameter?\\\", \\\"Field Parameter\\\", MessageBoxButtons.YesNo);\\ngenerateFieldParameter = (dialogResult == DialogResult.Yes);\\n\\n/*check if any measures are selected*/\\nif (Selected.Measures.Count == 0)\\n{\\n    Error(\\\"No measures selected\\\");\\n    return;\\n}\\n\\n/*find any regular CGs (excluding the one we might have created)*/\\nvar regularCGs = Model.Tables.Where(\\n    x => x.ObjectType == ObjectType.CalculationGroupTable\\n    & x.GetAnnotation(auxCgTag) != auxCgTagValue);\\n\\nif (regularCGs.Count() == 0)\\n{\\n    Error(\\\"No Calculation Groups Found\\\");\\n    return;\\n};\\n\\n\\n\\n\\n//the lambda expression will be avaluated for all calc groups to find a matching calc group\\n//CalculationGroupTable auxCg = Fx.SelectCalculationGroup(model:Model,lambdaExpression:lambda,selectFirst:true, showErrorIfNoTablesFound:false);\\n\\nbool calcGroupWasCreated = false;\\n\\n//the calc group will only be created if not found, and when so the boolean will point to it\\nCalculationGroupTable auxCg = Fx.AddCalculationGroupExt(model: Model, calcGroupWasCreated: out calcGroupWasCreated, \\n    defaultName: auxCalcGroupName, customCalcGroupName: false, annotationName: auxCgTag, annotationValue: auxCgTagValue);\\n\\nif (calcGroupWasCreated)\\n{\\n    CalculationItem cItem = Fx.AddCalculationItemExt(cg: auxCg, calcItemName: auxCalcItemName, valueExpression: \\\"SELECTEDMEASUREFORMATSTRING()\\\");\\n    auxCg.IsHidden = true; \\n    \\n    Info(\\\"Save changes to the model, recalculate the model, and launch the script again.\\\");\\n    return;\\n}\\n\\n//to avoid showing the aux calc group in the list\\nFunc<Table, bool> lambda = (x) => x.GetAnnotation(auxCgTag) != auxCgTagValue;\\n\\nCalculationGroupTable regularCg = Fx.SelectCalculationGroup(model: Model, lambdaExpression: lambda);\\nif (regularCg == null) return;\\n\\n\\nTable filterTable = Fx.SelectTableExt(model: Model, excludeCalcGroups: true, label:\\\"Select table of filter field\\\",showErrorIfNoSelection:true);\\nif(filterTable == null) return;\\nColumn filterColumn = SelectColumn(filterTable,label:\\\"Select filter Field\\\");\\nif (filterColumn == null) return;\\n\\nfilterValueAnnotationName = filterColumn.Name; \\n\\nString filterQuery = String.Format(\\\"EVALUATE DISTINCT({0})\\\", filterColumn.DaxObjectFullName);\\n\\nList<String> filterValues = new List<String>();\\n\\nusing (var filterReader = Model.Database.ExecuteReader(filterQuery))\\n{\\n\\n    while (filterReader.Read())\\n    {\\n\\n        filterValues.Add(filterReader.GetValue(0).ToString());\\n    }\\n}\\n\\nstring name = String.Empty;\\nif (generateFieldParameter)\\n{\\n    name = Interaction.InputBox(\\\"Provide a name for the field parameter\\\", \\\"Field Parameter\\\", regularCg.Name + \\\" Measures\\\", 740, 400);\\n    if (name == \\\"\\\") { Error(\\\"Execution Aborted\\\"); return; };\\n};\\n\\nMeasure dynamicNameMeasure = SelectMeasure(label: \\\"Select measure for dynamic name, cancel if none\\\");\\n\\n\\n/*iterates through each selected measure*/\\nforeach (Measure m in Selected.Measures)\\n{\\n    /*check that base measure has a proper format string*/\\n    if (m.FormatString == \\\"\\\")\\n    {\\n        Error(\\\"Define FormatString for \\\" + m.Name + \\\" and try again\\\");\\n        return;\\n    };\\n\\n    /*prepares a displayfolder to store all new measures*/\\n    string displayFolderName = m.Name + \\\" Measures\\\";\\n\\n    /*iterates thorough all calculation items of the selected calc group*/\\n    foreach (CalculationItem calcItem in regularCg.CalculationItems)\\n    {\\n\\n        string measureNamePrefix = string.Concat(Enumerable.Repeat(\\\"\\u200B\\\", calcItem.Ordinal));\\n\\n        foreach (string filterValue in filterValues)\\n        {\\n            \\n            \\n            \\n            /*measure name*/\\n            string measureName = measureName = m.Name + \\\" \\\" + calcItem.Name + \\\" \\\" + filterValue;\\n\\n            string dynamicMeasureName = String.Empty;  \\n\\n            if (dynamicNameMeasure == null)\\n            {\\n                dynamicMeasureName = measureName;\\n            }\\n            else\\n            {\\n\\n                string measureNameQuery = String.Empty;\\n\\n                if (filterColumn.DataType == DataType.String)\\n                {\\n\\n                    measureNameQuery =\\n                        String.Format(\\\"EVALUATE {{CALCULATE({0},{1}=\\\"{2}\\\",{3}=\\\"{4}\\\") & \\\"\\\"}}\\\", \\n                            dynamicNameMeasure.DaxObjectFullName, \\n                            filterColumn.DaxObjectFullName, \\n                            filterValue,\\n                            regularCg.Columns[0].DaxObjectFullName,\\n                            calcItem.Name);\\n                }\\n                else\\n                {\\n                    measureNameQuery =\\n                        String.Format(\\\"EVALUATE {{CALCULATE({0},{1}={2},{3}=\\\"{4}\\\") & \\\"\\\"}}\\\",\\n                            dynamicNameMeasure.DaxObjectFullName,\\n                            filterColumn.DaxObjectFullName,\\n                            filterValue,\\n                            regularCg.Columns[0].DaxObjectFullName,\\n                            calcItem.Name);\\n                }\\n\\n\\n               \\n                using (var reader = Model.Database.ExecuteReader(measureNameQuery))\\n                {\\n                    while (reader.Read())\\n                    {\\n                        dynamicMeasureName = reader.GetString(0).ToString();\\n\\n                    }\\n                }\\n\\n                dynamicMeasureName =  m.Name + \\\" \\\" +  measureNamePrefix + dynamicMeasureName;\\n\\n\\n            }\\n\\n            \\n\\n            //only if the measure is not yet there (think of reruns)\\n            if (!Model.AllMeasures.Any(x => x.Name == measureName))\\n            {\\n\\n                /*prepares a query to calculate the resulting format when applying the calculation item on the measure*/\\n                string query = string.Format(\\n                    \\\"EVALUATE {{CALCULATE({0},{1},{2})}}\\\",\\n                    m.DaxObjectFullName,\\n                    string.Format(\\n                        \\\"{0}=\\\"{1}\\\"\\\",\\n                        regularCg.Columns[0].DaxObjectFullName,\\n                        calcItem.Name),\\n                    string.Format(\\n                        \\\"{0}=\\\"{1}\\\"\\\",\\n                        auxCg.Columns[0].DaxObjectFullName,\\n                        auxCalcItemName)\\n                );\\n\\n                /*executes the query*/\\n                using (var reader = Model.Database.ExecuteReader(query))\\n                {\\n                    // resultset should contain just one row, with the format string\\n                    while (reader.Read())\\n                    {\\n\\n\\n                        /*retrive the formatstring from the query*/\\n                        string formatString = reader.GetValue(0).ToString();\\n\\n                       \\n\\n\\n\\n\\n                        /*build the expression of the measure*/\\n                        string measureExpression = String.Empty;\\n\\n                        if(filterColumn.DataType == DataType.String)\\n                        {\\n                            measureExpression = string.Format(\\n                                \\\"CALCULATE({0},{1}=\\\"{2}\\\",KEEPFILTERS({3}=\\\"{4}\\\"))\\\",\\n                                m.DaxObjectName,\\n                                regularCg.Columns[0].DaxObjectFullName,\\n                                calcItem.Name,\\n                                filterColumn.DaxObjectFullName,\\n                                filterValue\\n                            );\\n                        }\\n                        else\\n                        {\\n                            measureExpression = string.Format(\\n                                \\\"CALCULATE({0},{1}=\\\"{2}\\\",KEEPFILTERS({3}={4}))\\\",\\n                                m.DaxObjectName,\\n                                regularCg.Columns[0].DaxObjectFullName,\\n                                calcItem.Name,\\n                                filterColumn.DaxObjectFullName,\\n                                filterValue\\n                            );\\n                        }\\n\\n                            \\n                            \\n                            \\n\\n\\n\\n                        /*actually build the measure*/\\n                        Measure newMeasure =\\n                            m.Table.AddMeasure(\\n                                name: measureName,\\n                                expression: measureExpression);\\n\\n\\n                        /*the all important format string!*/\\n                        newMeasure.FormatString = formatString;\\n\\n                        /*final polish*/\\n                        newMeasure.DisplayFolder = displayFolderName;\\n                        newMeasure.FormatDax();\\n\\n                        /*add annotations for the creation of the field parameter*/\\n                        newMeasure.SetAnnotation(baseMeasureAnnotationName, m.Name);\\n                        newMeasure.SetAnnotation(calcItemAnnotationName, calcItem.Name);\\n                        newMeasure.SetAnnotation(scriptAnnotationName, scriptAnnotationValue);\\n                        newMeasure.SetAnnotation(calcItemSortOrderName, calcItem.Ordinal.ToString(\\\"000\\\"));\\n                        newMeasure.SetAnnotation(filterValueAnnotationName, filterValue);\\n                        newMeasure.SetAnnotation(dynamicNameAnnotationName, dynamicMeasureName);\\n\\n\\n                    }\\n                }\\n            }\\n        }\\n            \\n        \\n    }\\n}\\n\\n\\nif (!generateFieldParameter)\\n{\\n    //end of execution\\n    return;\\n};\\n\\n\\n// Before running the script, select the measures or columns that you\\n// would like to use as field parameters (hold down CTRL to select multiple\\n// objects). Also, you may change the name of the field parameter table\\n// below. NOTE: If used against Power BI Desktop, you must enable unsupported\\n// features under File > Preferences (TE2) or Tools > Preferences (TE3).\\n\\n\\nif (Selected.Columns.Count == 0 && Selected.Measures.Count == 0) throw new Exception(\\\"No columns or measures selected!\\\");\\n\\n// Construct the DAX for the calculated table based on the measures created previously by the script\\nvar objects = Model.AllMeasures\\n    .Where(x => x.GetAnnotation(scriptAnnotationName) == scriptAnnotationValue)\\n    .OrderBy(x => x.GetAnnotation(baseMeasureAnnotationName) + x.GetAnnotation(calcItemSortOrderName));\\n\\nvar dax = \\\"{\\n    \\\" + string.Join(\\\",\\n    \\\", objects.Select((c, i) => string.Format(\\\"(\\\"{6}\\\", NAMEOF('{1}'[{0}]), {2},\\\"{3}\\\",\\\"{4}\\\",\\\"{5}\\\")\\\",\\n    c.Name, c.Table.Name, i,\\n    Model.Tables[c.Table.Name].Measures[c.Name].GetAnnotation(baseMeasureAnnotationName),\\n    Model.Tables[c.Table.Name].Measures[c.Name].GetAnnotation(calcItemAnnotationName),\\n    Model.Tables[c.Table.Name].Measures[c.Name].GetAnnotation(filterValueAnnotationName),\\n    Model.Tables[c.Table.Name].Measures[c.Name].GetAnnotation(dynamicNameAnnotationName)\\n    ))) + \\\"\\n}\\\";\\n\\n// Add the calculated table to the model:\\nvar table = Model.AddCalculatedTable(name, dax);\\n\\n// In TE2 columns are not created automatically from a DAX expression, so \\n// we will have to add them manually:\\nvar te2 = table.Columns.Count == 0;\\nvar nameColumn = te2 ? table.AddCalculatedTableColumn(name, \\\"[Value1]\\\") : table.Columns[\\\"Value1\\\"] as CalculatedTableColumn;\\nvar fieldColumn = te2 ? table.AddCalculatedTableColumn(name + \\\" Fields\\\", \\\"[Value2]\\\") : table.Columns[\\\"Value2\\\"] as CalculatedTableColumn;\\nvar orderColumn = te2 ? table.AddCalculatedTableColumn(name + \\\" Order\\\", \\\"[Value3]\\\") : table.Columns[\\\"Value3\\\"] as CalculatedTableColumn;\\n\\nif (!te2)\\n{\\n    // Rename the columns that were added automatically in TE3:\\n    nameColumn.IsNameInferred = false;\\n    nameColumn.Name = name;\\n    fieldColumn.IsNameInferred = false;\\n    fieldColumn.Name = name + \\\" Fields\\\";\\n    orderColumn.IsNameInferred = false;\\n    orderColumn.Name = name + \\\" Order\\\";\\n}\\n// Set remaining properties for field parameters to work\\n// See: https://twitter.com/markbdi/status/1526558841172893696\\nnameColumn.SortByColumn = orderColumn;\\nnameColumn.GroupByColumns.Add(fieldColumn);\\nfieldColumn.SortByColumn = orderColumn;\\nfieldColumn.SetExtendedProperty(\\\"ParameterMetadata\\\", \\\"{\\\"version\\\":3,\\\"kind\\\":2}\\\", ExtendedPropertyType.Json);\\nfieldColumn.IsHidden = true;\\norderColumn.IsHidden = true;\\n\\n\\npublic static class Fx\\n{\\n    \\n\\n\\n\\n    //in TE2 (at least up to 2.17.2) any method that accesses or modifies the model needs a reference to the model \\n    //the following is an example method where you can build extra logic\\n    public static Table CreateCalcTable(Model model, string tableName, string tableExpression) \\n    { \\n        return model.AddCalculatedTable(name:tableName,expression:tableExpression);\\n    }\\n\\n    public static Table SelectTableExt(Model model, string possibleName = null, string annotationName = null, string annotationValue = null, \\n        Func<Table,bool>  lambdaExpression = null, string label = \\\"Select Table\\\", bool skipDialogIfSingleMatch = true, bool showOnlyMatchingTables = true,\\n        IEnumerable<Table> candidateTables = null, bool showErrorIfNoTablesFound = false, string errorMessage = \\\"No tables found\\\", bool selectFirst = false,\\n        bool showErrorIfNoSelection = true, string noSelectionErrorMessage = \\\"No table was selected\\\", bool excludeCalcGroups = false,bool returnNullIfNoTablesFound = false)\\n    {\\n\\n        Table table = null as Table;\\n\\n        if (lambdaExpression == null)\\n        {\\n            if (possibleName != null) { \\n                lambdaExpression = (t) => t.Name == possibleName;\\n            } else if(annotationName!= null && annotationValue != null)\\n            {\\n                lambdaExpression = (t) => t.GetAnnotation(annotationName) == annotationValue;\\n            }\\n            else\\n            {\\n                lambdaExpression = (t) => true; //no filtering\\n            }\\n        }\\n\\n        //use candidateTables if passed as argument\\n        IEnumerable<Table> tables = null as IEnumerable<Table>;\\n\\n        if(candidateTables != null)\\n        {\\n            tables = candidateTables;\\n        }\\n        else\\n        {\\n            tables = model.Tables;\\n        }\\n\\n        if(lambdaExpression != null)\\n        {\\n            tables = tables.Where(lambdaExpression);\\n        }\\n\\n        if (excludeCalcGroups)\\n        {\\n            tables = tables.Where(t => t.ObjectType != ObjectType.CalculationGroupTable);\\n        }\\n\\n        //none found, let the user choose from all tables\\n        if (tables.Count() == 0)\\n        {\\n\\n            if (returnNullIfNoTablesFound)\\n            {\\n                if (showErrorIfNoTablesFound) Error(errorMessage);\\n                return table;\\n            } \\n            else\\n            {\\n                \\n                table =  SelectTable(tables: model.Tables, label: label);\\n            }\\n            \\n        }\\n        else if (tables.Count() == 1 && !skipDialogIfSingleMatch)\\n        {\\n            \\n            table = SelectTable(tables: model.Tables, preselect: tables.First(), label: label);\\n        }\\n        else if (tables.Count() == 1 && skipDialogIfSingleMatch)\\n        {\\n            table = tables.First();\\n        } \\n        else if (tables.Count() > 1) \\n            \\n        {\\n            if (selectFirst)\\n            {\\n                table = tables.First();\\n            }\\n            else if (showOnlyMatchingTables)\\n            {\\n                \\n                table = SelectTable(tables: tables, preselect: tables.First(), label: label);\\n            }\\n            else\\n            {\\n               \\n                table = SelectTable(tables: model.Tables, preselect: tables.First(), label: label);\\n            }\\n            \\n        }\\n        else\\n        {\\n            Error(@\\\"Unexpected logic in \\\"\\\"SelectTableExt\\\"\\\"\\\");\\n            return null;\\n        }\\n\\n        if(showErrorIfNoSelection && table == null)\\n        {\\n            Error(noSelectionErrorMessage);\\n        }\\n\\n        return table;\\n\\n    }\\n\\n\\n    public static CalculationGroupTable SelectCalculationGroup(Model model, string possibleName = null, string annotationName = null, string annotationValue = null,\\n        Func<Table, bool> lambdaExpression = null, string label = \\\"Select Table\\\", bool skipDialogIfSingleMatch = true, bool showOnlyMatchingTables = true,\\n        bool showErrorIfNoTablesFound = true, string errorMessage = \\\"No calculation groups found\\\",bool selectFirst = false, \\n        bool showErrorIfNoSelection = true, string noSelectionErrorMessage = \\\"No calculation group was selected\\\", bool returnNullIfNoTablesFound = false)\\n    {\\n\\n        CalculationGroupTable calculationGroupTable = null as CalculationGroupTable;\\n        \\n        Func<Table, bool> lambda = (x) => x.ObjectType == ObjectType.CalculationGroupTable;\\n        if (!model.Tables.Any(lambda)) return calculationGroupTable;\\n\\n        IEnumerable<Table> tables = model.Tables.Where(lambda);\\n\\n        Table table = Fx.SelectTableExt(\\n            model:model,\\n            possibleName:possibleName,\\n            annotationName:annotationName,\\n            annotationValue:annotationValue,\\n            lambdaExpression:lambdaExpression,\\n            label:label,\\n            skipDialogIfSingleMatch:skipDialogIfSingleMatch,\\n            showOnlyMatchingTables:showOnlyMatchingTables,\\n            showErrorIfNoTablesFound:showErrorIfNoTablesFound,\\n            errorMessage:errorMessage, \\n            selectFirst:selectFirst,\\n            showErrorIfNoSelection:showErrorIfNoSelection,\\n            noSelectionErrorMessage:noSelectionErrorMessage, \\n            returnNullIfNoTablesFound:returnNullIfNoTablesFound, \\n            candidateTables:tables);\\n\\n        if(table == null) return calculationGroupTable;\\n\\n        calculationGroupTable = table as CalculationGroupTable;\\n\\n        return calculationGroupTable;\\n\\n    }\\n\\n    public static CalculationGroupTable AddCalculationGroupExt(Model model, out bool calcGroupWasCreated, string defaultName = \\\"New Calculation Group\\\", \\n        string annotationName = null, string annotationValue = null, bool createOnlyIfNotFound = true, \\n        string prompt = \\\"Name\\\", string Title = \\\"Provide a name for the Calculation Group\\\", bool customCalcGroupName = true)\\n    {\\n        \\n        Func<Table,bool> lambda = null as Func<Table,bool>;\\n        CalculationGroupTable cg = null as CalculationGroupTable;\\n        calcGroupWasCreated = false;\\n        string calcGroupName = String.Empty;\\n\\n        if (createOnlyIfNotFound)\\n        {\\n\\n            if (annotationName == null && annotationValue == null)\\n            {\\n\\n                if (customCalcGroupName)\\n                {\\n                    calcGroupName = Interaction.InputBox(Prompt: \\\"Name\\\", Title: \\\"Provide a name for the Calculation Group\\\");\\n                }\\n                else\\n                {\\n                    calcGroupName = defaultName;\\n                }\\n\\n                cg = Fx.SelectCalculationGroup(model: model, possibleName: calcGroupName, showErrorIfNoTablesFound: false, selectFirst: true);\\n\\n            }\\n            else\\n            {\\n                cg = Fx.SelectCalculationGroup(model: model, \\n                    showErrorIfNoTablesFound: false, \\n                    annotationName: annotationName, \\n                    annotationValue: annotationValue, \\n                    returnNullIfNoTablesFound: true);\\n            }\\n\\n            if (cg != null) return cg;\\n        }\\n        \\n        if (calcGroupName == String.Empty)\\n        {\\n            if (customCalcGroupName)\\n            {\\n                calcGroupName = Interaction.InputBox(Prompt: \\\"Name\\\", Title: \\\"Provide a name for the Calculation Group\\\");\\n            }\\n            else\\n            {\\n                calcGroupName = defaultName;\\n            }\\n        }\\n\\n        cg = model.AddCalculationGroup(name: calcGroupName);\\n\\n        if (annotationName != null && annotationValue != null)\\n        {\\n            cg.SetAnnotation(annotationName,annotationValue);\\n        }\\n\\n        calcGroupWasCreated = true;\\n\\n        return cg;\\n\\n    }\\n\\n    public static CalculationItem AddCalculationItemExt(CalculationGroupTable cg, string calcItemName, string valueExpression = \\\"SELECTEDMEASURE()\\\",\\n        string formatStringExpression = \\\"\\\", bool createOnlyIfNotFound = true, bool rewriteIfFound = false)\\n    {\\n\\n        CalculationItem calcItem = null as CalculationItem;\\n\\n        Func<CalculationItem, bool> lambda = (ci) => ci.Name == calcItemName;\\n\\n        if(createOnlyIfNotFound)\\n        {\\n            if (cg.CalculationItems.Any(lambda))\\n            {\\n\\n                calcItem = cg.CalculationItems.Where(lambda).FirstOrDefault();\\n\\n                if (!rewriteIfFound)\\n                {\\n                    return calcItem;\\n                }\\n            }\\n        }\\n\\n\\n        if(calcItem == null)\\n        {\\n            calcItem = cg.AddCalculationItem(name: calcItemName, expression: valueExpression);\\n        }\\n        else \\n        {\\n            //rewrite the found calcItem\\n            calcItem.Expression = valueExpression;\\n        }\\n\\n        if(formatStringExpression != String.Empty)\\n        {\\n            calcItem.FormatStringExpression = formatStringExpression;\\n        }\\n        \\n        return calcItem;\\n            \\n    }\\n\\n}",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Dynamic Measure Cambra",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n\\n// by Johnny Winter\\n// www.greyskullanalytics.com\\n// '2021-10-15 / B.Agullo / dynamic parameters by B.Agullo / \\n// '2022-05-14 / B.Agullo / you can now rerun the script to simply add new measures or update existing ones\\n// '2022-07-11 / B.Agullo / no check on the number of measures selected so it can be launched just to create the calc group table\\n\\n// Instructions:\\n//select the measures you want to add to your Dynamic Measure and then run this script (or store it as macro)\\n\\n//\\n// ----- do not modify script below this line -----\\n//\\n\\nstring dynamicMeasureCgTag = \\\"@GreyskullPBI\\\";\\nstring dynamicMeasureCgValue = \\\"Dynamic Measure Calculation Group\\\";\\n\\nstring dummyMeasureTag = dynamicMeasureCgTag;\\nstring dummyMeasureValue = \\\"Dummy Measure\\\";\\n\\nstring calcGroupName = \\\"\\\";\\nstring columnName = \\\"\\\";\\nstring measureName = \\\"\\\";\\nstring secondaryMeasureName = \\\"\\\";\\nstring conditionalFormatMeasureName = \\\"\\\"; \\n\\nMeasure dummyMeasure = null as Measure;\\n\\nvar dynamicCGs = Model.Tables.Where(x => x.GetAnnotation(dynamicMeasureCgTag) == dynamicMeasureCgValue);\\n\\nCalculationGroupTable cgTable = null as CalculationGroupTable; \\n// CalculationGroup cg = null as CalculationGroup;\\n\\nif(dynamicCGs.Count() == 1)\\n{\\n    //reuse the calc group\\n    cgTable = dynamicCGs.First() as CalculationGroupTable;\\n\\n}\\nelse if (dynamicCGs.Count() < 1)\\n{\\n    //create the calc group\\n    calcGroupName = Interaction.InputBox(\\\"Provide a name for your Calc Group\\\", \\\"Calc Group Name\\\", \\\"Dynamic Measure\\\", 740, 400);\\n    if (calcGroupName == \\\"\\\") return;\\n\\n    columnName = Interaction.InputBox(\\\"Calc Group column name\\\", \\\"Column Name\\\", calcGroupName, 740, 400);\\n    if (columnName == \\\"\\\") return;\\n\\n    //check to see if a table with this name already exists\\n    //if it doesnt exist, create a calculation group with this name\\n    if (!Model.Tables.Contains(calcGroupName))\\n    {\\n        cgTable = Model.AddCalculationGroup(calcGroupName);\\n        cgTable.Description = \\\"Contains dynamic measures and a column called \\\" + columnName + \\\". The contents of the dynamic measures can be controlled by selecting values from \\\" + columnName + \\\".\\\";\\n    };\\n    \\n    //set variable for the calc group\\n    Table calcGroup = Model.Tables[calcGroupName];\\n\\n    //if table already exists, make sure it is a Calculation Group type\\n    if (calcGroup.SourceType.ToString() != \\\"CalculationGroup\\\")\\n    {\\n        Error(\\\"Table exists in Model but is not a Calculation Group. Rename the existing table or choose an alternative name for your Calculation Group.\\\");\\n        return;\\n    };\\n\\n    //apply the annotation so the user is not asked again\\n    cgTable = calcGroup as CalculationGroupTable;\\n    cgTable.SetAnnotation(dynamicMeasureCgTag, dynamicMeasureCgValue);\\n\\n    //by default the calc group has a column called Name. If this column is still called Name change this in line with specfied variable\\n    if (cgTable.Columns.Contains(\\\"Name\\\"))\\n    {\\n        cgTable.Columns[\\\"Name\\\"].Name = columnName;\\n    };\\n    cgTable.Columns[columnName].Description = \\\"Select value(s) from this column to control the contents of the dynamic measures.\\\";\\n\\n}\\nelse\\n{\\n    //make them choose the calc group -- should not happen! \\n    cgTable = SelectTable(dynamicCGs, label: \\\"Select your Dynamic Measure Calculation Group For Arbitrary 2-row Header\\\") as CalculationGroupTable;\\n}\\n\\n//get the column name in case the calc group was already there\\ncolumnName = cgTable.Columns.Where(x => x.Name != \\\"Ordinal\\\").First().Name;\\n\\nvar dummyMeasures = Model.AllMeasures.Where(x => x.GetAnnotation(dummyMeasureTag) == dummyMeasureValue);\\n\\nif (dummyMeasures.Count() == 1)\\n{\\n    //get the measure\\n    measureName = dummyMeasures.First().Name;\\n\\n}\\nelse if (dummyMeasures.Count() < 1)\\n{\\n    //create the measure\\n    measureName = Interaction.InputBox(\\\"Dynamic Measure Name (cannot be named \\\"\\\" + columnName + \\\"\\\")\\\", \\\"Measure Name\\\", \\\"Dummy\\\", 740, 400);\\n    if (measureName == \\\"\\\") return;\\n\\n}\\nelse\\n{\\n    //choose measure (should not happen!)\\n    measureName = SelectMeasure(dummyMeasures).Name;\\n};\\n\\nsecondaryMeasureName = measureName + \\\" 2\\\";\\nconditionalFormatMeasureName = measureName + \\\" CF\\\";\\n\\n//check to see if dynamic measure has been created, if not create it now\\n//if a measure with that name alredy exists elsewhere in the model, throw an error\\nif (!cgTable.Measures.Contains(measureName))\\n{\\n    dummyMeasure = cgTable.AddMeasure(measureName, \\\"BLANK()\\\");\\n    dummyMeasure.Description = \\\"Control the content of this measure by selecting values from \\\" + columnName + \\\".\\\";\\n    dummyMeasure.SetAnnotation(dummyMeasureTag, dummyMeasureValue);\\n};\\n\\nif (!cgTable.Measures.Contains(secondaryMeasureName))\\n{\\n    dummyMeasure = cgTable.AddMeasure(secondaryMeasureName, \\\"BLANK()\\\");\\n    dummyMeasure.Description = \\\"Control the content of this measure by selecting values from \\\" + columnName + \\\". Secondary dynamic measure for complex use cases\\\";\\n};\\n\\nif (!cgTable.Measures.Contains(conditionalFormatMeasureName))\\n{\\n    dummyMeasure = cgTable.AddMeasure(conditionalFormatMeasureName, \\\"BLANK()\\\");\\n    dummyMeasure.Description = \\\"Control the content of this measure by selecting values from \\\" + columnName + \\\". Used this measure for conditional format purposes\\\";\\n};\\n\\n\\n\\nstring isSelectedMeasureString = \\\"[\\\" + measureName + \\\"],[\\\" + secondaryMeasureName + \\\"],[\\\" + conditionalFormatMeasureName + \\\"]\\\";\\n\\n//if no measures were selected that's the end of the story\\n//(only makes sense if being launched from another script and soon after will be launched against one or more measures)\\nif (Selected.Measures.Count == 0) \\n{\\n    return;\\n}\\nforeach (var m in Selected.Measures)\\n{\\n    \\n    //remove calculation item if already exists\\n    if (cgTable.CalculationItems.Contains(m.Name)) {\\n        cgTable.CalculationItems[m.Name].Delete();\\n    };\\n            \\n    //if (!cg.CalculationItems.Contains(m.Name))\\n    //{\\n\\n    var newCalcItem = \\n        cgTable.AddCalculationItem(\\n            m.Name, \\n            \\\"IF ( \\\" + \\\"ISSELECTEDMEASURE (\\\" + isSelectedMeasureString + \\\"), \\\" + \\\"[\\\" + m.Name + \\\"], \\\" + \\\"SELECTEDMEASURE() )\\\"\\n        );\\n\\n    // '2021-10-15 / B.Agullo / double quotes in format string need to be doubled to be preserved\\n    newCalcItem.FormatStringExpression = \\\"IF ( \\\" + \\\"ISSELECTEDMEASURE (\\\" + isSelectedMeasureString + \\\"),\\\"\\\" + m.FormatString.Replace(\\\"\\\"\\\", \\\"\\\"\\\"\\\") + \\\"\\\", SELECTEDMEASUREFORMATSTRING() )\\\";\\n    newCalcItem.FormatDax();\\n\\n\\n    //};\\n};",
      "Tooltip": "creates sum measures for selected columns",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Dynamic Measure",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n\\n// by Johnny Winter\\n// www.greyskullanalytics.com\\n// '2021-10-15 / B.Agullo / dynamic parameters by B.Agullo / \\n// '2022-05-14 / B.Agullo / you can now rerun the script to simply add new measures or update existing ones\\n// '2022-07-11 / B.Agullo / no check on the number of measures selected so it can be launched just to create the calc group table\\n\\n// Instructions:\\n//select the measures you want to add to your Dynamic Measure and then run this script (or store it as macro)\\n\\n//\\n// ----- do not modify script below this line -----\\n//\\n\\nstring dynamicMeasureCgTag = \\\"@GreyskullPBI\\\";\\nstring dynamicMeasureCgValue = \\\"Dynamic Measure Calculation Group\\\";\\n\\nstring dummyMeasureTag = dynamicMeasureCgTag;\\nstring dummyMeasureValue = \\\"Dummy Measure\\\";\\n\\nstring calcGroupName = \\\"\\\";\\nstring columnName = \\\"\\\";\\nstring measureName = \\\"\\\";\\nstring secondaryMeasureName = \\\"\\\";\\nstring conditionalFormatMeasureName = \\\"\\\"; \\n\\nMeasure dummyMeasure = null as Measure;\\n\\nvar dynamicCGs = Model.Tables.Where(x => x.GetAnnotation(dynamicMeasureCgTag) == dynamicMeasureCgValue);\\n\\nCalculationGroupTable cgTable = null as CalculationGroupTable; \\n// CalculationGroup cg = null as CalculationGroup;\\n\\nif(dynamicCGs.Count() == 1)\\n{\\n    //reuse the calc group\\n    cgTable = dynamicCGs.First() as CalculationGroupTable;\\n\\n}\\nelse if (dynamicCGs.Count() < 1)\\n{\\n    //create the calc group\\n    calcGroupName = Interaction.InputBox(\\\"Provide a name for your Calc Group\\\", \\\"Calc Group Name\\\", \\\"Dynamic Measure\\\", 740, 400);\\n    if (calcGroupName == \\\"\\\") return;\\n\\n    columnName = Interaction.InputBox(\\\"Calc Group column name\\\", \\\"Column Name\\\", calcGroupName, 740, 400);\\n    if (columnName == \\\"\\\") return;\\n\\n    //check to see if a table with this name already exists\\n    //if it doesnt exist, create a calculation group with this name\\n    if (!Model.Tables.Contains(calcGroupName))\\n    {\\n        cgTable = Model.AddCalculationGroup(calcGroupName);\\n        cgTable.Description = \\\"Contains dynamic measures and a column called \\\" + columnName + \\\". The contents of the dynamic measures can be controlled by selecting values from \\\" + columnName + \\\".\\\";\\n    };\\n    \\n    //set variable for the calc group\\n    Table calcGroup = Model.Tables[calcGroupName];\\n\\n    //if table already exists, make sure it is a Calculation Group type\\n    if (calcGroup.SourceType.ToString() != \\\"CalculationGroup\\\")\\n    {\\n        Error(\\\"Table exists in Model but is not a Calculation Group. Rename the existing table or choose an alternative name for your Calculation Group.\\\");\\n        return;\\n    };\\n\\n    //apply the annotation so the user is not asked again\\n    cgTable = calcGroup as CalculationGroupTable;\\n    cgTable.SetAnnotation(dynamicMeasureCgTag, dynamicMeasureCgValue);\\n\\n    //by default the calc group has a column called Name. If this column is still called Name change this in line with specfied variable\\n    if (cgTable.Columns.Contains(\\\"Name\\\"))\\n    {\\n        cgTable.Columns[\\\"Name\\\"].Name = columnName;\\n    };\\n    cgTable.Columns[columnName].Description = \\\"Select value(s) from this column to control the contents of the dynamic measures.\\\";\\n\\n}\\nelse\\n{\\n    //make them choose the calc group -- should not happen! \\n    cgTable = SelectTable(dynamicCGs, label: \\\"Select your Dynamic Measure Calculation Group For Arbitrary 2-row Header\\\") as CalculationGroupTable;\\n}\\n\\n//get the column name in case the calc group was already there\\ncolumnName = cgTable.Columns.Where(x => x.Name != \\\"Ordinal\\\").First().Name;\\n\\nvar dummyMeasures = Model.AllMeasures.Where(x => x.GetAnnotation(dummyMeasureTag) == dummyMeasureValue);\\n\\nif (dummyMeasures.Count() == 1)\\n{\\n    //get the measure\\n    measureName = dummyMeasures.First().Name;\\n\\n}\\nelse if (dummyMeasures.Count() < 1)\\n{\\n    //create the measure\\n    measureName = Interaction.InputBox(\\\"Dynamic Measure Name (cannot be named \\\"\\\" + columnName + \\\"\\\")\\\", \\\"Measure Name\\\", \\\"Dummy\\\", 740, 400);\\n    if (measureName == \\\"\\\") return;\\n\\n}\\nelse\\n{\\n    //choose measure (should not happen!)\\n    measureName = SelectMeasure(dummyMeasures).Name;\\n};\\n\\nsecondaryMeasureName = measureName + \\\" 2\\\";\\nconditionalFormatMeasureName = measureName + \\\" CF\\\";\\n\\n//check to see if dynamic measure has been created, if not create it now\\n//if a measure with that name alredy exists elsewhere in the model, throw an error\\nif (!cgTable.Measures.Contains(measureName))\\n{\\n    dummyMeasure = cgTable.AddMeasure(measureName, \\\"BLANK()\\\");\\n    dummyMeasure.Description = \\\"Control the content of this measure by selecting values from \\\" + columnName + \\\".\\\";\\n    dummyMeasure.SetAnnotation(dummyMeasureTag, dummyMeasureValue);\\n};\\n\\nif (!cgTable.Measures.Contains(secondaryMeasureName))\\n{\\n    dummyMeasure = cgTable.AddMeasure(secondaryMeasureName, \\\"BLANK()\\\");\\n    dummyMeasure.Description = \\\"Control the content of this measure by selecting values from \\\" + columnName + \\\". Secondary dynamic measure for complex use cases\\\";\\n};\\n\\nif (!cgTable.Measures.Contains(conditionalFormatMeasureName))\\n{\\n    dummyMeasure = cgTable.AddMeasure(conditionalFormatMeasureName, \\\"BLANK()\\\");\\n    dummyMeasure.Description = \\\"Control the content of this measure by selecting values from \\\" + columnName + \\\". Used this measure for conditional format purposes\\\";\\n};\\n\\n\\n\\nstring isSelectedMeasureString = \\\"[\\\" + measureName + \\\"],[\\\" + secondaryMeasureName + \\\"],[\\\" + conditionalFormatMeasureName + \\\"]\\\";\\n\\n//if no measures were selected that's the end of the story\\n//(only makes sense if being launched from another script and soon after will be launched against one or more measures)\\nif (Selected.Measures.Count == 0) \\n{\\n    return;\\n}\\nforeach (var m in Selected.Measures)\\n{\\n    \\n    //remove calculation item if already exists\\n    if (cgTable.CalculationItems.Contains(m.Name)) {\\n        cgTable.CalculationItems[m.Name].Delete();\\n    };\\n            \\n    //if (!cg.CalculationItems.Contains(m.Name))\\n    //{\\n\\n    var newCalcItem = \\n        cgTable.AddCalculationItem(\\n            m.Name, \\n            \\\"IF ( \\\" + \\\"ISSELECTEDMEASURE (\\\" + isSelectedMeasureString + \\\"), \\\" + \\\"[\\\" + m.Name + \\\"], \\\" + \\\"SELECTEDMEASURE() )\\\"\\n        );\\n\\n    // '2021-10-15 / B.Agullo / double quotes in format string need to be doubled to be preserved\\n    newCalcItem.FormatStringExpression = \\\"IF ( \\\" + \\\"ISSELECTEDMEASURE (\\\" + isSelectedMeasureString + \\\"),\\\"\\\" + m.FormatString.Replace(\\\"\\\"\\\", \\\"\\\"\\\"\\\") + \\\"\\\", SELECTEDMEASUREFORMATSTRING() )\\\";\\n    newCalcItem.FormatDax();\\n\\n\\n    //};\\n};",
      "Tooltip": "",
      "ValidContexts": "Model, Measure"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Filtered Measures",
      "Enabled": "true",
      "Execute": "// '2022-09-24 / B.Agullo / Removed ScriptHost to make it TE2 compatible\\n// '2022-05-21 / B.Agullo / \\n// FILTERED MEASURES BY COLUMN VALUES SCRIPT \\n// creates a measure for each of the values in a column filtering the selected base measure\\n// step by step instructions at https://www.esbrina-ba.com/creating-filtered-measures-or-how-to-show-the-total-along-with-the-detail-in-a-chart/\\n\\nvar measures = Selected.Measures;\\n\\nif (measures.Count == 0)\\n{\\n    Error(\\\"Select one or more measures\\\");\\n}\\n\\nTable table = SelectTable();\\nColumn column = SelectColumn(table);\\n\\nstring query = \\\"EVALUATE DISTINCT(\\\" + column.DaxObjectFullName + \\\")\\\";\\n\\nusing (var reader = Model.Database.ExecuteReader(query))\\n{\\n    // Create a loop for every row in the resultset\\n    while (reader.Read())\\n    {\\n        string columnValue = reader.GetValue(0).ToString();\\n        string formulaColumnValue = columnValue; \\n\\n\\n\\n        if (column.DataType.Equals(DataType.String))\\n        {\\n            formulaColumnValue = \\\"\\\"\\\" + columnValue + \\\"\\\"\\\";\\n        }\\n\\n\\n        foreach (Measure measure in measures)\\n        {\\n            string measureName = measure.Name + \\\" \\\" + columnValue;\\n            string measureExpression =\\n                string.Format(\\\"CALCULATE({0},{1}={2})\\\",\\n                    measure.DaxObjectName,\\n                    column.DaxObjectFullName,\\n                    formulaColumnValue\\n                );\\n            string measureDescription =\\n                string.Format(\\\"{0} filtered by {1} = {2}\\\",\\n                    measure.Name,\\n                    column.Name,\\n                    columnValue\\n               );\\n            string displayFolderName =\\n                string.Format(\\\"{0} by {1}\\\",\\n                    measure.Name,\\n                    column.Name\\n                );\\n            Measure newMeasure =\\n                measure.Table.AddMeasure(\\n                    name: measureName,\\n                    expression: measureExpression,\\n                    displayFolder: displayFolderName\\n                );\\n            newMeasure.Description = measureDescription;\\n            newMeasure.FormatDax();\\n            newMeasure.FormatString = measure.FormatString;\\n\\n\\n        }\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\MAX",
      "Enabled": "true",
      "Execute": "string annotationLabel = \\\"Namasdata\\\";\\nstring annotationValue = \\\"Statistics\\\";\\nif(Selected.Columns.Count() != 1)\\n{\\n    Error(\\\"Selecciona una única columna y vuelve a intentarlo\\\");\\n    return;\\n}\\nColumn sliceColumn = Selected.Column;\\nCalculationGroupTable statisticsCG = null as CalculationGroupTable;\\nif(Model.Tables.Any(t => t.GetAnnotation(annotationLabel) == annotationValue))\\n{\\n    statisticsCG = Model.Tables.Where(t => t.GetAnnotation(annotationLabel) == annotationValue).First() as CalculationGroupTable;\\n} else\\n{\\n    statisticsCG = Model.AddCalculationGroup(\\\"Statistics\\\");\\n    statisticsCG.SetAnnotation(annotationLabel, annotationValue);\\n}\\nstring calcItemName = \\\"MAX\\\";\\nstring calcItemExpression =\\n    String.Format(\\n        @\\\"MAXX (\\n            VALUES ( {0} ),\\n            SELECTEDMEASURE ()\\n        )\\\", sliceColumn.DaxObjectFullName);\\nCalculationItem calcItem = statisticsCG.AddCalculationItem(calcItemName, calcItemExpression);\\ncalcItem.FormatDax();\\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Measure in Calc Item",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n\\n// CHANGE LOG: \\n// '2021-10-20 / B.Agullo / \\n// '2021-11-22 / B.Agullo / Totally rewrote the script as did not work the way it was \\n\\n\\n// Instructions:\\n// select the calculation items and and the measure(s) for which the calculation should be shown. \\n// the first time you will be asked to introduce a name for your calc group and dummy measure \\n// second time on it will reuse the same group and dummy measure to add new calc items \\n// the script will create a new calc item for eachs elected measure\\n// A pop-up will show if the measure has been previously selected and thus already has a calculation item with its name\\n\\n\\n//\\n// ----- do not modify script below this line -----\\n//\\n\\nstring affectedMeasures = \\\"\\\"; \\nstring selectedCalcItems = \\\"\\\"; \\nstring selectedCalcItemsCalcGroupName = \\\"\\\"; \\n\\nCalculationGroup selectedCalculationGroup = null as CalculationGroup; \\nColumn selectedCalcItemsCalcGroupColumn = null as Column; \\n\\nif (Selected.Measures.Count == 0) {\\n    \\n    Error(\\\"No measures selected\\\"); \\n    return; \\n\\n} else if (Selected.CalculationItems.Count == 0) { \\n    \\n    Error(\\\"No calculation items selected\\\"); \\n    return; \\n\\n} else {\\n    \\n    // create in-line table with selected calc item names \\n    foreach(var ci in Selected.CalculationItems) { \\n        \\n        if(selectedCalcItems == \\\"\\\") {\\n            selectedCalcItems += \\\"{\\\"\\\" + ci.Name + \\\"\\\"\\\"; \\n\\n        } else { \\n            \\n            selectedCalcItems += \\\",\\\"\\\" + ci.Name + \\\"\\\"\\\"; \\n\\n        }; \\n        \\n        if(selectedCalcItemsCalcGroupName == \\\"\\\") {\\n             \\n            //selectedCalculationGroup = ci.CalculationGroupTable;\\n            selectedCalcItemsCalcGroupName = ci.CalculationGroupTable.Name; \\n            \\n        };\\n        \\n        if(selectedCalcItemsCalcGroupColumn == null) {\\n            \\n            //get the only column that is not \\\"ordinal\\\"\\n            selectedCalcItemsCalcGroupColumn = (ci.CalculationGroupTable as Table).Columns.Where(x => x.Name != \\\"Ordinal\\\").First(); \\n            \\n        };\\n    };  \\n    \\n    selectedCalcItems += \\\"}\\\"; \\n    \\n};\\n\\nstring calcGroupTag = \\\"Dynamic Measure Calculation Group For Arbitrary 2-row Header\\\";\\nstring dummyMeasureTag = \\\"Dummy Measure for the Dynamic Measure Calculation Group For Arbitrary 2-row Header\\\";\\n\\n//dynamic Measure CG for 2 row header\\nvar DynamicMeasureCGs = Model.Tables.Where(x => x.GetAnnotation(\\\"@AgulloBernat\\\") == calcGroupTag);\\n\\nvar DynamicMeasureCG = null as CalculationGroupTable; \\n\\nif (DynamicMeasureCGs.Count() == 1 ) {\\n    \\n    DynamicMeasureCG = DynamicMeasureCGs.First() as CalculationGroupTable;\\n    \\n} else if (DynamicMeasureCGs.Count() < 1) {\\n    \\n    string calcGroupName = \\n        Interaction.InputBox(\\n            \\\"Provide a name for your Dynamic Measure Calculation Group For Arbitrary 2-row Header\\\", \\n            \\\"Calculation Group Name\\\", \\\"\\\", 740, 400\\n        );\\n\\n    if(calcGroupName == \\\"\\\") {\\n        \\n        Error(\\\"No name provided\\\");         \\n        return;\\n        \\n    };\\n    \\n    DynamicMeasureCG = Model.AddCalculationGroup(calcGroupName);\\n    DynamicMeasureCG.Description = \\n        \\\"Under this calc group only certain calculation items of \\\" \\n            + selectedCalcItemsCalcGroupName \\n            + \\\" calculation group will be visible and with a certain measure. See calculation items for details\\\";\\n    \\n    DynamicMeasureCG.SetAnnotation(\\\"@AgulloBernat\\\",calcGroupTag);\\n    Model.Tables[calcGroupName].Columns[\\\"Name\\\"].Name = calcGroupName; \\n\\n} else {\\n    \\n    //this should never happen --\\n    DynamicMeasureCG = SelectTable(DynamicMeasureCGs, label:\\\"Select your Dynamic Measure Calculation Group For Arbitrary 2-row Header\\\") as CalculationGroupTable;\\n    \\n};\\n\\nif (DynamicMeasureCG == null) { return; } // doesn't work in TE3 as cancel button doesn't return null in TE3\\n\\n//INIT DUMMY MEASURE (if necessary) \\nvar dummyMeasureCandidates = DynamicMeasureCG.Measures.Where(x => x.GetAnnotation(\\\"@AgulloBernat\\\") == dummyMeasureTag);\\nMeasure dummyMeasure = null as Measure; \\n\\nif (dummyMeasureCandidates.Count() == 1) {\\n    \\n    dummyMeasure = dummyMeasureCandidates.First() as Measure; \\n\\n} else if (dummyMeasureCandidates.Count() < 1) {\\n    \\n    string dummyMeasureName = Interaction.InputBox(\\\"Enter a name for the dummy measure\\\", \\\"Measure Name\\\", \\\"\\\", 740, 400);\\n\\n    if(dummyMeasureName == \\\"\\\") {\\n        \\n        Error(\\\"No name provided\\\");         \\n        return;\\n        \\n    };\\n    \\n    //add dummy measure if not present yet\\n    if(!DynamicMeasureCG.Measures.Where(m => m.Name == dummyMeasureName).Any())  {\\n        \\n        dummyMeasure = DynamicMeasureCG.AddMeasure(dummyMeasureName,\\\"0\\\");\\n        \\n    } else { \\n        \\n        //get the reference if already exists \\n        dummyMeasure = DynamicMeasureCG.Measures.Where(m => m.Name == dummyMeasureName).First(); \\n        \\n    };\\n\\n    //in any case add the annotation so it will be found next time \\n    dummyMeasure.SetAnnotation(\\\"@AgulloBernat\\\",dummyMeasureTag); \\n\\n} else {\\n    \\n    dummyMeasure = \\n        SelectMeasure(\\n            dummyMeasureCandidates,\\n            label:\\\"Select your Dummy Measure for your Dynamic Measure Calculation Group For Arbitrary 2-row Header\\\"\\n        ) as Measure; \\n\\n} ; \\n\\nforeach (var m in Selected.Measures) { \\n    \\n    if (!DynamicMeasureCG.CalculationItems.Where(x => x.Name == m.Name).Any()) { \\n        \\n        string newCalcItemName = m.Name; \\n        string newCalcItemExpression = \\n             \\\"IF(\\\" + \\n             \\\"    ISSELECTEDMEASURE( [\\\" + dummyMeasure.Name + \\\"] ),\\\" + \\n             \\\"    VAR currentCalcItem =\\\" + \\n             \\\"        SELECTEDVALUE( \\\"+  selectedCalcItemsCalcGroupColumn.DaxObjectFullName +\\\", \\\"NO SELECTION\\\" )\\\" + \\n             \\\"    RETURN\\\" + \\n             \\\"        IF( currentCalcItem IN \\\" + selectedCalcItems + \\\", [\\\" + m.Name + \\\"] ),\\\" + \\n             \\\"    SELECTEDMEASURE()\\\" + \\n             \\\")\\\";\\n        \\n        CalculationItem newCalcItem =  DynamicMeasureCG.AddCalculationItem(newCalcItemName, newCalcItemExpression); \\n        newCalcItem.FormatDax(); \\n        \\n    } else { \\n        \\n        Info(\\\"Calculation item \\\" + m.Name + \\\" already present. Please modify manually, or delete it and try again\\\"); \\n        \\n    };\\n    \\n}; \\n\\nCallDaxFormatter(); ",
      "Tooltip": "",
      "ValidContexts": "Measure, CalculationItem"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\Measures from Calculation Group",
      "Enabled": "true",
      "Execute": "/* '2022-06-13 / B.Agullo / */\\n/* CREATE MEASURES WITH BASE MEASURES AND A CALCULATION GROUP */ \\n/* https://www.esbrina-ba.com/creating-well-formatted-measures-based-on-a-calculation-group/  */\\n/* select measures and execute, you will need to run it twice */ \\n/* first time to create aux calc group, second time to actually create measuree*/ \\n/* remove aux calc group before going to production, do the right thing */ \\n\\nstring auxCgTag = \\\"@AgulloBernat\\\";\\nstring auxCgTagValue = \\\"CG to extract format strings\\\";\\n\\nstring auxCalcGroupName = \\\"DELETE AUX CALC GROUP\\\";\\nstring auxCalcItemName = \\\"Get Format String\\\";\\n\\n/*find any regular CGs (excluding the one we might have created)*/\\nvar regularCGs = Model.Tables.Where(\\n    x => x.ObjectType == ObjectType.CalculationGroupTable\\n    & x.GetAnnotation(auxCgTag) != auxCgTagValue);\\n\\nif (regularCGs.Count() == 0)\\n{\\n    Error(\\\"No Calculation Groups Found\\\");\\n    return;\\n};\\n\\n/*check if we already created the auxiliary calculation group*/\\nvar auxCgs = Model.Tables.Where(x => x.GetAnnotation(auxCgTag) == auxCgTagValue);\\n\\nCalculationGroupTable auxCg = null as CalculationGroupTable; \\n\\n/*if there are more than one for some reason we'll just use the first one*/\\nif(auxCgs.Count() >= 1)\\n{\\n    auxCg = auxCgs.First() as CalculationGroupTable; \\n} else \\n{\\n    /*create the aux calc group and ask for a refresh since it cannot be used in a query before that*/\\n    auxCg = Model.AddCalculationGroup(name: auxCalcGroupName);\\n    auxCg.AddCalculationItem(name: auxCalcItemName, expression: \\\"SELECTEDMEASUREFORMATSTRING()\\\");\\n    auxCg.SetAnnotation(auxCgTag, auxCgTagValue);\\n\\n    /*better hidden in case someone forgets to delete it*/\\n    auxCg.IsHidden = true; \\n    int maxPrecedence = 0; \\n\\n    /*check for the max precedence of other calc groups*/\\n    foreach (CalculationGroupTable cg in regularCGs)\\n    {\\n        if (cg.CalculationGroupPrecedence > maxPrecedence)\\n        {\\n            maxPrecedence = cg.CalculationGroupPrecedence;\\n        };\\n    };\\n\\n    /*assign the highest precedence and some margin*/\\n    auxCg.CalculationGroupPrecedence = maxPrecedence + 10; \\n\\n    Info(\\\"Save changes to the model, recalculate the model, and launch the script again.\\\");\\n    return;\\n\\n};\\n\\n/*check if any measures are selected*/\\nif (Selected.Measures.Count == 0)\\n{\\n    Error(\\\"No measures selected\\\");\\n    return;\\n}\\n\\nCalculationGroupTable regularCg = null as CalculationGroupTable;\\n\\n/*allow user to select calculation group if more than one is found*/\\nif (regularCGs.Count() > 1)\\n{\\n    regularCg = SelectTable(regularCGs) as CalculationGroupTable;\\n}\\n/*otherwise just pick the first (and only)*/\\nelse\\n{\\n    regularCg = regularCGs.First() as CalculationGroupTable;\\n}\\n\\n/*check if no selection was made*/ \\nif(regularCg == null)\\n{\\n    Error(\\\"No Target Calculation Group selected\\\");\\n    return;\\n};\\n\\n/*iterates through each selected measure*/\\nforeach (Measure m in Selected.Measures)\\n{\\n    /*prepares a displayfolder to store all new measures*/\\n    string displayFolderName = m.Name + \\\" Measures\\\";\\n\\n    /*iterates thorough all calculation items of the selected calc group*/ \\n    foreach (CalculationItem calcItem in regularCg.CalculationItems)\\n    {\\n        \\n        /*prepares a query to calculate the resulting format when applying the calculation item on the measure*/ \\n        string query = string.Format(\\n            \\\"EVALUATE {{CALCULATE({0},{1},{2})}}\\\",\\n            m.DaxObjectFullName,\\n            string.Format(\\n                \\\"{0}=\\\"{1}\\\"\\\",\\n                regularCg.Columns[0].DaxObjectFullName,\\n                calcItem.Name),\\n            string.Format(\\n                \\\"{0}=\\\"{1}\\\"\\\",\\n                auxCg.Columns[0].DaxObjectFullName,\\n                auxCalcItemName)\\n            );\\n\\n        /*executes the query*/ \\n        using (var reader = Model.Database.ExecuteReader(query))\\n        {\\n            // resultset should contain just one row, with the format string\\n            while (reader.Read())\\n            {\\n                /*retrive the formatstring from the query*/ \\n                string formatString = reader.GetValue(0).ToString();\\n\\n                /*build the expression of the measure*/\\n                string measureExpression = string.Format(\\n                    \\\"CALCULATE({0},{1}=\\\"{2}\\\")\\\",\\n                    m.DaxObjectName,\\n                    regularCg.Columns[0].DaxObjectFullName,\\n                    calcItem.Name);\\n\\n                /*measure name*/ \\n                string measureName = m.Name + \\\" \\\" + calcItem.Name;\\n                \\n                /*actually build the measure*/ \\n                Measure newMeasure = \\n                    m.Table.AddMeasure(\\n                        name: measureName,\\n                        expression: measureExpression);\\n\\n\\n                /*the all important format string!*/\\n                newMeasure.FormatString = formatString;\\n\\n                /*final polish*/\\n                newMeasure.DisplayFolder = displayFolderName;\\n                newMeasure.FormatDax();\\n\\n            }\\n        }\\n    } \\n}",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\MIN",
      "Enabled": "true",
      "Execute": "string annotationLabel = \\\"Namasdata\\\";\\nstring annotationValue = \\\"Statistics\\\";\\nif (Selected.Columns.Count() != 1)\\n{\\n    Error(\\\"Selecciona una única columna y vuelve a intentarlo\\\");\\n    return;\\n}\\nColumn sliceColumn = Selected.Column;\\nCalculationGroupTable statisticsCG = null as CalculationGroupTable;\\nif (Model.Tables.Any(t => t.GetAnnotation(annotationLabel) == annotationValue))\\n{\\n    statisticsCG = Model.Tables.Where(t => t.GetAnnotation(annotationLabel) == annotationValue).First() as CalculationGroupTable;\\n}\\nelse\\n{\\n    statisticsCG = Model.AddCalculationGroup(\\\"Statistics\\\");\\n    statisticsCG.SetAnnotation(annotationLabel, annotationValue);\\n}\\nstring calcItemName = \\\"MIN\\\";\\nstring calcItemExpression =\\n    String.Format(\\n        @\\\"MINX (\\n            VALUES ( {0} ),\\n            SELECTEDMEASURE ()\\n        )\\\", sliceColumn.DaxObjectFullName);\\nCalculationItem calcItem = statisticsCG.AddCalculationItem(calcItemName, calcItemExpression);\\ncalcItem.FormatDax();\\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\MultiTotal (add total)",
      "Enabled": "true",
      "Execute": "string calcGroupTypeLabel = \\\"CalcGroupType\\\";\\nstring calcGroupTypeValue = \\\"MultiTotal\\\";\\nIEnumerable<Table> multiTotalCalcGroups = \\n    Model.Tables.Where(\\n        t => \\n        t.GetAnnotation(calcGroupTypeLabel) \\n            == calcGroupTypeValue);\\nTable calcGroupAsTable = null as Table; \\nif(multiTotalCalcGroups.Count() == 0)\\n{\\n    Error(\\\"No multi-total calc group found. \\\" +\\n        \\\"Run the macro to create a multi-total \\\" +\\n        \\\"calc group first and try again\\\");\\n    return;\\n} else if(multiTotalCalcGroups.Count() == 1)\\n{\\n    calcGroupAsTable = multiTotalCalcGroups.First();\\n}\\nelse\\n{\\n    calcGroupAsTable = SelectTable(multiTotalCalcGroups, label: \\\"Select Multi-total Calc Group to use\\\");\\n    if(calcGroupAsTable == null)\\n    {\\n        Error(\\\"You cancelled the execution.\\\");\\n        return;\\n    }\\n}\\nif(Selected.CalculationItems.Count() == 0)\\n{\\n    Error(\\\"Select one or more calculation items and try again.\\\");\\n    return;\\n}\\nstring calcGroupValuesFieldLabel = \\\"ValuesField\\\";\\nstring multiTotalBreakDownColumnCode = calcGroupAsTable.GetAnnotation(calcGroupValuesFieldLabel);\\nCalculationGroupTable calcGroup = calcGroupAsTable as CalculationGroupTable;\\nforeach(CalculationItem calcItem in Selected.CalculationItems)\\n{\\n    string calcItemName = calcItem.Name;\\n    string calcItemExpression =\\n        String.Format(\\n            @\\\"IF(\\n                NOT ISINSCOPE( {0} ),\\n                CALCULATE(\\n                    SELECTEDMEASURE( ),\\n                    {1} = \\\"\\\"{2}\\\"\\\"\\n                )\\n            )\\\",\\n            multiTotalBreakDownColumnCode,\\n            calcItem.CalculationGroupTable.Columns[0].DaxObjectFullName,\\n            calcItem.Name);\\n    CalculationItem customTotalCalcItem = \\n        calcGroup.AddCalculationItem(\\n            name:calcItemName, \\n            expression:calcItemExpression);\\n    string calcItemFormatStringExpression =\\n        String.Format(\\n            @\\\"IF(\\n                NOT ISINSCOPE( {0} ),\\n                CALCULATE(\\n                    SELECTEDMEASUREFORMATSTRING( ),\\n                    {1} = \\\"\\\"{2}\\\"\\\"\\n                )\\n            )\\\",\\n            multiTotalBreakDownColumnCode,\\n            calcItem.CalculationGroupTable.Columns[0].DaxObjectFullName,\\n            calcItem.Name);\\n    customTotalCalcItem.FormatStringExpression = \\n        calcItemFormatStringExpression;\\n    customTotalCalcItem.FormatDax();\\n}",
      "Tooltip": "",
      "ValidContexts": "CalculationItem"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\MultiTotal (base)",
      "Enabled": "true",
      "Execute": "// '2023-07-09 / B.Agullo / \\n//\\n// Multi-Total Calc Group: Base script\\n//\\n// The development of this script is shown here https://www.esbrina-ba.com/industrializing-calculation-groups/\\n// store as macro and select only column as target object\\n// to use the right click on a single column you want to use to slice your data from the columns section of your matrix.\\n// to add custom totals to the matrix using this calc group as top level column field, you need to run \\n// the script shared in the file \\\"Multi-Total Calc Group (add total script).csx\\\" in this same repository folder. \\n//\\n// Follow Bernat on LinkedIn and Twitter\\n// https://www.linkedin.com/in/bernatagullo/\\n// https://twitter.com/AgulloBernat\\n\\n#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n\\nif (Selected.Columns.Count() != 1)\\n{\\n    Error(\\\"Select only 1 column and try again\\\");\\n    return;\\n}\\nColumn column = Selected.Column;\\nstring suggestedCalcGroupName = column.Name + \\\" Multi-Totals\\\";\\nstring calcGroupName = Interaction.InputBox(\\n    Prompt:\\\"Please provide the name of the multi-total calc group.\\\",\\n    DefaultResponse:suggestedCalcGroupName);\\nif (calcGroupName == \\\"\\\")\\n{\\n    Error(\\\"No name provided\\\");\\n    return;\\n};\\nCalculationGroupTable calcGroup = \\n    Model.AddCalculationGroup(\\n        calcGroupName);\\nstring valuesCalcItemName = \\\"Values\\\";\\nstring valuesCalcItemExpression =\\n    String.Format(\\n        @\\\"IF(\\n            ISINSCOPE( {0} ),\\n            SELECTEDMEASURE()\\n        )\\\", column.DaxObjectFullName);\\nCalculationItem valuesCalcItem =\\n    calcGroup.AddCalculationItem(\\n        name: valuesCalcItemName,\\n        expression: valuesCalcItemExpression);\\nvaluesCalcItem.FormatDax();\\nvaluesCalcItem.Description = \\\"This calculation item is to show the breakdown by \\\" + column.Name;\\nvaluesCalcItem.Ordinal = 0;\\nstring totalCalcItemName = \\\"Total\\\";\\nstring totalCalcItemExpression =\\n    String.Format(\\n        @\\\"IF(\\n            NOT ISINSCOPE( {0} ),\\n            SELECTEDMEASURE()\\n        )\\\", column.DaxObjectFullName);\\nCalculationItem totalCalcItem =\\n    calcGroup.AddCalculationItem(\\n        name: totalCalcItemName,\\n        expression: totalCalcItemExpression);\\ntotalCalcItem.FormatDax();\\ntotalCalcItem.Description = \\\"This calculation item is to show the regular total as a calculation item along with different totals that will be added to this calculation group\\\";\\ntotalCalcItem.Ordinal = 1; \\nstring calcGroupTypeLabel = \\\"CalcGroupType\\\";\\nstring calcGroupTypeValue = \\\"MultiTotal\\\";\\ncalcGroup.SetAnnotation(\\n    calcGroupTypeLabel,\\n    calcGroupTypeValue);\\nstring calcGroupValuesFieldLabel = \\\"ValuesField\\\";\\nstring calcGroupValuesFieldValue = column.DaxObjectFullName;\\ncalcGroup.SetAnnotation(\\n    calcGroupValuesFieldLabel,\\n    calcGroupValuesFieldValue);",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "8. Bernats Repo\\1. Measure\\SUM",
      "Enabled": "true",
      "Execute": "/*\\n * Title: Auto-generate SUM measures from columns\\n * \\n * Author: Daniel Otykier, twitter.com/DOtykier\\n * \\n * This script, when executed, will loop through the currently selected columns,\\n * creating one SUM measure for each column and also hiding the column itself.\\n */\\n \\n// Loop through all currently selected columns:\\nforeach(var c in Selected.Columns)\\n{\\n    var newMeasure = c.Table.AddMeasure(\\n        \\\"Sum of \\\" + c.Name,                    // Name\\n        \\\"SUM(\\\" + c.DaxObjectFullName + \\\")\\\",    // DAX expression\\n        c.DisplayFolder                        // Display Folder\\n    );\\n    \\n    // Set the format string on the new measure:\\n    newMeasure.FormatString = \\\"0.00\\\";\\n\\n    // Provide some documentation:\\n    newMeasure.Description = \\\"This measure is the sum of column \\\" + c.DaxObjectFullName;\\n\\n    // Hide the base column:\\n    c.IsHidden = true;\\n}",
      "Tooltip": "creates sum measures for selected columns",
      "ValidContexts": "Column"
    },
    {
      "Name": "8. Bernats Repo\\2. Calc Table\\Duplicate Date Table",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing System.Windows.Forms;\\n\\nusing Microsoft.VisualBasic;\\nstring annotationLabel = \\\"createSecondaryDateTable\\\";\\nstring annotationValue1 = \\\"Main\\\";\\nstring annotationValue2 = \\\"Secondary\\\"; \\nTable dateTable = Fx.GetTablesWithAnnotation(Model.Tables, annotationLabel, annotationValue1); \\nTable dateTable2 = Fx.GetTablesWithAnnotation(Model.Tables, annotationLabel, annotationValue2);\\nif (dateTable == null || dateTable2 == null)\\n{\\n    IEnumerable<Table> dateTables = Fx.GetDateTables(Model);\\n    if (dateTables == null) return;\\n    if (dateTables.Count() != 1)\\n    {\\n        dateTable = SelectTable(dateTables, dateTables.First(), \\\"Select Date table to duplicate\\\");\\n        if (dateTable == null) return;\\n    }\\n    else\\n    {\\n        dateTable = dateTables.First();\\n    }\\n    string dateTable2Name = Fx.GetNameFromUser(\\\"Secondary Date Table Name\\\", \\\"Name\\\", dateTable.Name + \\\" comparison\\\");\\n    dateTable2 = Model.AddCalculatedTable(name: dateTable2Name, expression: dateTable.DaxObjectFullName);\\n    dateTable2.DataCategory = dateTable.DataCategory;\\n    var te2 = dateTable2.Columns.Count == 0;\\n    for (int i = 0; i < dateTable2.Columns.Count(); i++)\\n    {\\n        Column c = dateTable.Columns[i];\\n        Column c2 = te2 ? dateTable2.AddCalculatedColumn(c.Name, String.Format(\\\"[Value{0}]\\\", i)) : dateTable2.Columns[i];\\n    }\\n    dateTable.SetAnnotation(annotationLabel, annotationValue1);\\n    dateTable2.SetAnnotation(annotationLabel, annotationValue2);\\n    Info(\\\"Save changes back to the model, recalculate and run again\\\");\\n}\\nelse\\n{\\n    for (int i = 0; i < dateTable2.Columns.Count(); i++)\\n    {\\n        Column c = dateTable.Columns[i];\\n        Column c2 = dateTable2.Columns[i];\\n        c2.IsKey = c.IsKey;\\n        c2.SortByColumn = c.SortByColumn;\\n    }\\n    IEnumerable<SingleColumnRelationship> dateTableRelatioships =\\n        Model.Relationships.Where(r => r.FromTable.Name == dateTable.Name\\n        || r.ToTable.Name == dateTable.Name);\\n    foreach (SingleColumnRelationship r in dateTableRelatioships)\\n    {\\n        SingleColumnRelationship newR = Model.AddRelationship();\\n        if (r.FromTable.Name == dateTable.Name)\\n        {\\n            newR.FromColumn = dateTable2.Columns[r.FromColumn.Name];\\n            newR.ToColumn = r.ToColumn;\\n        }else\\n        {\\n            newR.ToColumn = dateTable2.Columns[r.ToColumn.Name];\\n            newR.FromColumn = r.FromColumn;\\n        }\\n        newR.FromCardinality = r.FromCardinality;\\n        newR.ToCardinality = r.ToCardinality;\\n        newR.CrossFilteringBehavior = r.CrossFilteringBehavior;\\n        newR.IsActive = r.IsActive; \\n    }\\n    Info(\\\"Metadata updated\\\");\\n}\\n\\npublic static class Fx\\n{\\n    public static IEnumerable<Table> GetDateTables(Model model)\\n    {\\n        IEnumerable<Table> dateTables = null as IEnumerable<Table>;\\n        if (model.Tables.Any(t => t.DataCategory == \\\"Time\\\" && t.Columns.Any(c => c.IsKey == true)))\\n        {\\n            dateTables = model.Tables.Where(t => t.DataCategory == \\\"Time\\\" && t.Columns.Any(c => c.IsKey == true && c.DataType == DataType.DateTime));\\n        }\\n        else\\n        {\\n            Error(\\\"No date table detected in the model. Please mark your date table(s) as date table\\\");\\n        }\\n        return dateTables;\\n    }\\n    public static Table GetTablesWithAnnotation(IEnumerable<Table> tables, string annotationLabel, string annotationValue)\\n    {\\n        Func<Table, bool> lambda = t => t.GetAnnotation(annotationLabel) == annotationValue;\\n        IEnumerable<Table> matchTables = GetFilteredTables(tables, lambda);\\n        if(matchTables == null)\\n        {\\n            return null;\\n        }\\n        else\\n        {\\n            return matchTables.First();\\n        }\\n    }\\n    public static IEnumerable<Table> GetFilteredTables(IEnumerable<Table> tables, Func<Table,bool> lambda)\\n    {\\n        if (tables.Any(t => lambda(t)))\\n        {\\n            return tables.Where(t => lambda(t));\\n        }\\n        else\\n        {\\n            return null as IEnumerable<Table>; \\n        }\\n    }\\n    public static IEnumerable<Column> GetFilteredColumns(IEnumerable<Column> columns, Func<Column,bool> lambda, bool returnAllIfNoneFound = true) \\n    {\\n        if (columns.Any(c => lambda(c)))\\n        {\\n            return columns.Where(c => lambda(c));\\n        }\\n        else\\n        {\\n            if(returnAllIfNoneFound)\\n            {\\n                return columns;\\n            }\\n            else\\n            {\\n                return null as IEnumerable<Column>;\\n            }\\n        }\\n    }\\n    public static Table CreateCalcTable(Model model, string tableName, string tableExpression)\\n    {\\n        if(!model.Tables.Any(t => t.Name == tableName))\\n        {\\n            return model.AddCalculatedTable(tableName, tableExpression);\\n        }\\n        else\\n        {\\n            return model.Tables.Where(t => t.Name == tableName).First();\\n        }\\n    }\\n    public static string GetNameFromUser(string Prompt, string Title =\\\"\\\", string DefaultResponse = \\\"\\\")\\n    {    \\n        string response = Interaction.InputBox(Prompt, Title, DefaultResponse, 740, 400);\\n        return response;\\n    }\\n    public static string ChooseString(IList<string> OptionList)\\n    {\\n        Func<IList<string>, string, string> SelectString = (IList<string> options, string title) =>\\n        {\\n            var form = new Form();\\n            form.Text = title;\\n            var buttonPanel = new Panel();\\n            buttonPanel.Dock = DockStyle.Bottom;\\n            buttonPanel.Height = 30;\\n            var okButton = new Button() { DialogResult = DialogResult.OK, Text = \\\"OK\\\" };\\n            var cancelButton = new Button() { DialogResult = DialogResult.Cancel, Text = \\\"Cancel\\\", Left = 80 };\\n            var listbox = new ListBox();\\n            listbox.Dock = DockStyle.Fill;\\n            listbox.Items.AddRange(options.ToArray());\\n            listbox.SelectedItem = options[0];\\n            form.Controls.Add(listbox);\\n            form.Controls.Add(buttonPanel);\\n            buttonPanel.Controls.Add(okButton);\\n            buttonPanel.Controls.Add(cancelButton);\\n            var result = form.ShowDialog();\\n            if (result == DialogResult.Cancel) return null;\\n            return listbox.SelectedItem.ToString();\\n        };\\n        //let the user select the name of the macro to copy\\n        String select = SelectString(OptionList, \\\"Choose a macro\\\");\\n        //check that indeed one macro was selected\\n        if (select == null)\\n        {\\n            Info(\\\"You cancelled!\\\");\\n        }\\n        return select;\\n    }\\n}\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "8. Bernats Repo\\3. Calc Group\\Activate Relationship Calc Group",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing System.Windows.Forms; \\nusing Microsoft.VisualBasic;\\n\\n//2022-09-14 / B.Agullo / first release\\n//CREATE CALCULATION GROUP TO ENABLE INACTIVE RELEATIONSHIPS\\n//Select releationships of your model and run the script\\n\\n//see https://www.esbrina-ba.com/activating-inactive-relationships-the-smart-way/ \\n\\n//initialize calc group variable\\nCalculationGroupTable cg = null as CalculationGroupTable;\\n\\n//create calc group (only first time)\\nif(!CalculationGroupUtils.CreateCalculationGroup(\\n    model:Model,\\n    myCalculationGroup: out cg,\\n    defaultCalculationGroupName: \\\"Model\\\",annotationValue:\\\"Model modifications\\\")) return;\\n\\n//goes through selected relationships\\nforeach (SingleColumnRelationship r in Selected.SingleColumnRelationships)\\n{\\n    //and only for those inactive\\n    if (!r.IsActive)\\n    {   \\n        //prepare name and expression for the calculation item\\n        string calcItemName = r.FromColumn.DaxObjectFullName + \\\" - \\\" + r.ToColumn.DaxObjectFullName;\\n        string calcItemExpression =\\n            String.Format(\\n                \\\"CALCULATE(SELECTEDMEASURE(),USERELATIONSHIP({0},{1}))\\\",\\n                r.FromColumn.DaxObjectFullName,\\n                r.ToColumn.DaxObjectFullName\\n            );\\n        \\n        //add calculation item\\n        CalculationItem calcItem = null as CalculationItem; \\n        if(!CalculationGroupUtils.CreateCalculationItem(\\n            out calcItem,\\n            cg: cg,\\n            defaultCalculationItemName: calcItemName,\\n            promptUser: false, \\n            calcItemExpression:calcItemExpression,\\n            regenerateIfPresent: false)) return;\\n    }\\n}\\n \\n        public static class StringUtils\\n    {\\n        public enum CheckType\\n        {\\n            Table,\\n            Measure,\\n            Column,\\n            CalculationItem,\\n            None\\n        }\\n        public static bool InitString\\n            (\\n                out string stringToInit,\\n                string label = \\\"Name\\\",\\n                string defaultValue = \\\"Default Name\\\",\\n                string errorMessage = \\\"No name provided\\\",\\n                string alreadyUsedNameErrorMessage = \\\"There is already another {0} called {1}\\\", //collision with names alerady in the model\\n                string invalidNameErrorMessage = \\\"Name cannot be any of the following: {0}\\\", //arbitrary list of forbidden names\\n                string[] invalidNames = null,\\n                Model model = null,\\n                Table table = null,\\n                CalculationGroupTable cg = null,\\n                CheckType checkType = CheckType.None,\\n                string prompt = \\\"Default Prompt\\\",\\n                string valueOnError = \\\"\\\",\\n                bool promptUser = true //if false, validate only default name is not forbidden, ask for input if it is\\n            )\\n        {\\n\\n\\n            bool validName;\\n            string userValue;\\n            stringToInit = valueOnError;\\n\\n            do\\n            {\\n                if (promptUser)\\n                {\\n                    //get name from user\\n                    //userValue = Interaction.InputBox(prompt, label, defaultValue, 740, 400);\\n                    if (!StringUtils.Input(\\n                        userString: out userValue,\\n                        prompt: prompt,\\n                        label: label,\\n                        defaultValue: defaultValue)\\n                    )\\n                    {\\n                        stringToInit = valueOnError;\\n                        return false;\\n                    };\\n                }\\n                else\\n                {\\n                    //bypass interaction\\n                    userValue = defaultValue;\\n                }\\n\\n                switch (checkType)\\n                {\\n                    case CheckType.None:\\n                        //nothing to check all is good \\n                        validName = true;\\n                        break;\\n\\n                    case CheckType.Table:\\n                        if (model == null)\\n                        {\\n                            throw new ArgumentNullException();\\n                        }\\n                        //if it's going to be a table, there cannot be any table with the same name\\n                        validName = !model.Tables.Any(x => x.Name == userValue);\\n\\n                        if (!validName)\\n                        {\\n                            MessageUtils.ErrorMessage(\\n                                String.Format(\\n                                    alreadyUsedNameErrorMessage,\\n                                    \\\"table\\\",\\n                                    userValue\\n                                )\\n                            );\\n                        }\\n                        break;\\n\\n                    case CheckType.Column:\\n                        if (model == null)\\n                        {\\n                            throw new ArgumentNullException();\\n                        }\\n\\n                        //if its a column, there cannot be any other column on that table with the same name\\n                        validName = !table.Columns.Any(x => x.Name == userValue);\\n\\n                        if (!validName)\\n                        {\\n                            MessageUtils.ErrorMessage(\\n                                String.Format(\\n                                    alreadyUsedNameErrorMessage,\\n                                    \\\"column\\\", userValue\\n                                )\\n                            );\\n                        };\\n\\n                        break;\\n\\n                    case CheckType.Measure:\\n                        if (model == null)\\n                        {\\n                            throw new ArgumentNullException();\\n                        }\\n                        if (table == null)\\n                        {\\n                            throw new ArgumentNullException();\\n                        }\\n\\n\\n                        //if its a measure, there cannot be any measure with the same name, or any column on that table with the same name \\n                        validName = !table.Columns.Any(x => x.Name == userValue)\\n                                    && !model.AllMeasures.Any(x => x.Name == userValue);\\n\\n                        if (!validName)\\n                        {\\n                            MessageUtils.ErrorMessage(\\n                                String.Format(\\n                                    alreadyUsedNameErrorMessage,\\n                                    \\\"measure in the model or column in \\\" + table.Name,\\n                                    userValue\\n                                )\\n                            );\\n                        };\\n                        break;\\n\\n\\n                    case CheckType.CalculationItem:\\n                        if (cg == null)\\n                        {\\n                            throw new ArgumentNullException();\\n                        }\\n                        //if its a calculation item, there cannot be any other calculation item with the same name\\n                        validName = !cg.CalculationItems.Any(x => x.Name == userValue);\\n\\n                        if (!validName)\\n                        {\\n                            MessageUtils.ErrorMessage(\\n                                String.Format(\\n                                    alreadyUsedNameErrorMessage,\\n                                    \\\"calculation item\\\",\\n                                    userValue\\n                                )\\n                            );\\n                        };\\n                        break;\\n\\n\\n                    default:\\n                        validName = true;\\n                        break;\\n\\n\\n                }\\n\\n                //if we got a valid name so far check it's not in the invalid name list\\n                if (validName)\\n                {\\n                    //if no invalid names then.. \\n                    if (invalidNames == null || invalidNames.Length == 0)\\n                    {\\n                        //..all good\\n                        validName = true;\\n                    }\\n                    else\\n                    {\\n                        //otherwise check if the name is any of the invalid ones\\n                        validName = !invalidNames.Contains(userValue);\\n                        if (!validName)\\n                        {\\n                            //tell user this name cannot be used.\\n                            MessageUtils.ErrorMessage(\\n                                String.Format(invalidNameErrorMessage, String.Join(\\\", \\\", invalidNames))\\n                            );\\n                        }\\n                    }\\n                }\\n\\n                if (!validName)\\n                {\\n                    //enable user interaction to fix it\\n                    promptUser = true;\\n                }\\n\\n\\n            } while (!validName);\\n\\n            //emptystring will be counted as valid string, but is not a valid name ever and we take it as a key to abort\\n            if (string.IsNullOrWhiteSpace(userValue))\\n            {\\n                MessageUtils.ErrorMessage(errorMessage);\\n                stringToInit = valueOnError;\\n                return false;\\n            };\\n\\n            //if we reach this point then is all good\\n            stringToInit = userValue;\\n            return true;\\n        }\\n\\n        public static bool Input\\n            (\\n                out string userString,\\n                string prompt = \\\"Enter string\\\",\\n                string label = \\\"String\\\",\\n                string defaultValue = \\\"some text\\\",\\n                int xPosition = 740,\\n                int yPosition = 400,\\n                bool nullOrWhiteSpaceAccepted = false,\\n                string errorMessage = \\\"Null or Empty String provided\\\",\\n                string unexpectedErrorMessage = \\\"Unexpected Error in StringUtils.Input\\\",\\n                string valueOnError = \\\"\\\"\\n            )\\n        {\\n            try\\n            {\\n                string tempUserString = Microsoft.VisualBasic.Interaction.InputBox(prompt, label, defaultValue, XPos: xPosition, YPos: yPosition);\\n\\n                if (string.IsNullOrWhiteSpace(tempUserString) && !nullOrWhiteSpaceAccepted)\\n                {\\n                    MessageUtils.ErrorMessage(errorMessage);\\n                    userString = valueOnError;\\n                    return false;\\n                }\\n                else\\n                {\\n                    userString = tempUserString;\\n                    return true;\\n                };\\n            }\\n            catch\\n            {\\n                MessageUtils.ErrorMessage(unexpectedErrorMessage);\\n                userString = valueOnError;\\n                return false;\\n            }\\n\\n        }\\n    }\\n\\n    public static class MessageUtils\\n    {\\n        public static void ErrorMessage\\n            (\\n                string errorMessage,\\n                bool showMessage = true,\\n                string caption = \\\"Error\\\"\\n            )\\n        {\\n            try\\n            {\\n                if (showMessage)\\n                {\\n                    MessageBox.Show( errorMessage,  caption, MessageBoxButtons.OK, MessageBoxIcon.Error);\\n                };\\n\\n                return;\\n            }\\n            catch\\n            {\\n                //can't really call error message right? \\n                return;\\n            };\\n        }\\n\\n\\n\\n        public static bool IsAnswerOK\\n            (\\n                string question,\\n                string caption = \\\"Before we proceed\\\"\\n\\n            )\\n        {\\n            try\\n            {\\n                DialogResult dialogResult = MessageBox.Show(question,  caption, MessageBoxButtons.YesNo);\\n                if (dialogResult == DialogResult.Yes)\\n                {\\n                    return true;\\n                }\\n                else if (dialogResult == DialogResult.No)\\n                {\\n                    return false;\\n                }\\n                else\\n                {\\n                    return false; //??\\n                }\\n            }\\n            catch\\n            {\\n                return false;\\n            }\\n        }\\n\\n        public static bool SelectFromList\\n            (\\n                List<string> selectionList,\\n                out List<string> selectedItems,\\n                SelectionMode selectionMode = SelectionMode.One,\\n                string title = \\\"Select from this list\\\",\\n                string cancelMessage = \\\"You cancelled the process\\\",\\n                bool selectionRequired = true,\\n                string selectionRequiredMessage = \\\"Select item or cancel\\\",\\n                bool skipDialogIfSingleItem = false,\\n                bool preselectFirstItem = false,\\n                bool showEmptyListError = true,\\n                string emptyListErrorMessage = \\\"Empty selection list\\\"\\n\\n            )\\n        {\\n\\n            selectedItems = new List<string>(); //initialize return list \\n\\n            if (selectionList.Count == 0)\\n            {\\n                if (showEmptyListError)\\n                    MessageUtils.ErrorMessage(emptyListErrorMessage);\\n                return false;\\n            };\\n\\n            //general stuff\\n            var form = new Form();\\n            form.Text = title;\\n\\n            //it shows on top of the list box??\\n            //var titleLabel = new Label();\\n            //titleLabel.Text = title;\\n            //titleLabel.Dock = DockStyle.Top;\\n\\n            //button pannel at the bottom\\n            var buttonPanel = new Panel();\\n            buttonPanel.Dock = DockStyle.Bottom;\\n            buttonPanel.Height = 30;\\n\\n            //individual buttons\\n            var okButton = new Button() { DialogResult = DialogResult.OK, Text = \\\"OK\\\" };\\n            var cancelButton = new Button() { DialogResult = DialogResult.Cancel, Text = \\\"Cancel\\\", Left = 80 };\\n\\n            //listbox\\n            var listBox = new ListBox();\\n            listBox.Dock = DockStyle.Fill;\\n            listBox.SelectionMode = selectionMode;\\n\\n            //fills listbox with options from selectionList\\n            listBox.Items.AddRange(selectionList.ToArray());\\n\\n            //preselects first item by default\\n            if (preselectFirstItem)\\n                listBox.SelectedItem = selectionList[0];\\n\\n            //putting pieces together\\n            //form.Controls.Add(titleLabel);\\n            form.Controls.Add(listBox);\\n            form.Controls.Add(buttonPanel);\\n            buttonPanel.Controls.Add(okButton);\\n            buttonPanel.Controls.Add(cancelButton);\\n            //make sure it shows up in the middle of the screen\\n            form.StartPosition = FormStartPosition.CenterScreen;\\n\\n            bool oneOrMoreSelected; //flag to check listbox selection\\n\\n            bool askAgain; //flag to ask again if no selection done but selection is required\\n            DialogResult result; //variable to store the result of the dialog box\\n\\n            if (!skipDialogIfSingleItem || selectionList.Count > 1)\\n            {\\n                do\\n                {\\n                    //shows the form\\n                    result = form.ShowDialog();\\n\\n                    if (result != DialogResult.OK)\\n                    {\\n                        //user cancelled (or aborted),  return false, selectedItems is empty list\\n                        MessageUtils.ErrorMessage(cancelMessage);\\n                        return false;\\n                    }\\n\\n                    //true if one or more items are selected in the listbox\\n                    oneOrMoreSelected = ListBoxUtils.OneOrMoreSelected(listBox);\\n\\n                    //if selection required and non present, raise flag\\n                    askAgain = selectionRequired && !oneOrMoreSelected;\\n\\n                    //if flag is raised show message to select something or cancel\\n                    if (askAgain)\\n                        MessageUtils.ErrorMessage(selectionRequiredMessage);\\n\\n                } while (askAgain);\\n\\n                //if we reached this point user selected ok and selected something if so required\\n\\n                // Loop through all items the ListBox.\\n                for (int x = 0; x < listBox.Items.Count; x++)\\n                {\\n                    // Determine if the item is selected and add to the list.\\n                    if (listBox.GetSelected(x) == true)\\n                        selectedItems.Add(listBox.Items[x].ToString());\\n                }\\n\\n            }\\n            else\\n            {\\n                //if we reach this point is because\\n                //skipDialogIfSingleItem && selectionList.Count == 1\\n                selectedItems.Add(selectionList.First());\\n\\n            };\\n\\n\\n\\n            //return true that all went fine\\n            return true;\\n\\n\\n        }\\n\\n\\n    }\\n\\n    public static class ListBoxUtils\\n    {\\n        public static bool OneOrMoreSelected(ListBox listBox)\\n        {\\n            for (int x = 0; x < listBox.Items.Count; x++)\\n            {\\n                // Determine if the item is selected.\\n                if (listBox.GetSelected(x) == true)\\n                    return true;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    public static class MeasureUtils\\n    {\\n\\n        public enum CreateMode\\n        {\\n            EnforceNewName,\\n            DeleteAndCreate,\\n            UseExisting\\n        }\\n        public static Measure CreateMeasure\\n            (\\n                Table baseTable,\\n                string defaultMeasureName = \\\"New Measure\\\",\\n                string measureExpression = \\\"\\\",\\n                string formatString = \\\"\\\",\\n                string measureNameLabel = \\\"Measure Name\\\",\\n                string displayFolder = null,\\n                CreateMode createMode = CreateMode.EnforceNewName,\\n                bool allowCustomName = true\\n\\n            )\\n        {\\n            /*test*/\\n            if (baseTable == null)\\n            {\\n                throw new ArgumentNullException();\\n            }\\n\\n            Measure returnMeasure;\\n\\n            string userMeasureName;\\n\\n            StringUtils.CheckType check;\\n\\n            if (createMode.Equals(CreateMode.EnforceNewName))\\n            {\\n                check = StringUtils.CheckType.Measure;\\n            }\\n            else\\n            {\\n                check = StringUtils.CheckType.None;\\n            };\\n\\n\\n            if (allowCustomName)\\n            {\\n                //allow user to select name\\n                if (\\n                    !StringUtils.InitString(\\n                        stringToInit: out userMeasureName,\\n                        label: measureNameLabel,\\n                        defaultValue: defaultMeasureName,\\n                        checkType: check)) { return null; }\\n            }\\n            else\\n            {\\n                userMeasureName = defaultMeasureName;\\n            }\\n\\n            returnMeasure =\\n                GetMeasure(\\n                    measureName: userMeasureName,\\n                    model: baseTable.Model);\\n\\n            if (returnMeasure != null)\\n            {\\n                if (createMode.Equals(CreateMode.DeleteAndCreate))\\n                {\\n                    //delete the measure found, will be recreated in a sec below\\n                    returnMeasure.Delete();\\n                }\\n                else if (createMode.Equals(CreateMode.UseExisting))\\n                {\\n                    //do not recreate anything, just return the measure found (process does not continue)\\n                    return returnMeasure;\\n                }\\n                else\\n                {\\n                    new Exception(\\\"this should not happen\\\");\\n                };\\n            };\\n\\n            //we reach this point if it's a new measure, or we are deleting and recreating the measure\\n            returnMeasure = baseTable.AddMeasure(name: userMeasureName, expression: measureExpression, displayFolder: displayFolder);\\n            returnMeasure.FormatString = formatString;\\n\\n            return returnMeasure;\\n\\n        }\\n        public static Measure GetMeasure(string measureName, Model model)\\n        {\\n            var matchingMeasures = model.AllMeasures.Where(x => x.Name == measureName);\\n\\n            if (matchingMeasures.Count() == 0)\\n            {\\n                return null;\\n            }\\n            else\\n            {\\n                return matchingMeasures.First();\\n            }\\n        }\\n\\n    }\\n\\n\\n    public static class TableUtils\\n\\n    {\\n        public static int TableCount(Model model)\\n        {\\n            MessageBox.Show(model.Name);\\n            return model.Tables.Count;\\n        }\\n\\n        public static Table GetTable(string tableName, Model Model)\\n        {\\n            var tbls = Model.Tables.Where(x => x.Name == tableName);\\n\\n            if (tbls.Count() == 0)\\n            {\\n                return null;\\n            }\\n            else\\n            {\\n                return tbls.First();\\n            }\\n\\n        }\\n\\n        public static bool CreateMeasureTable\\n            (\\n                out Table createdTable,\\n                Model model,\\n                string defaultTableName = \\\"Some Measures\\\",\\n                string label = \\\"Measure Table Name\\\",\\n                string prompt = \\\"Provide a name for the measure Table\\\"\\n            )\\n        {\\n\\n            createdTable = null;\\n\\n            if (model == null)\\n            {\\n                throw new ArgumentNullException();\\n            };\\n\\n            string tableName;\\n            if (\\n                !StringUtils.InitString(\\n                    stringToInit: out tableName,\\n                    label: label, prompt: prompt,\\n                    checkType: StringUtils.CheckType.Table,\\n                    defaultValue: defaultTableName,\\n                    model: model\\n                )\\n               ) return false;\\n\\n\\n\\n            string tableExpression = \\\"{0}\\\";\\n\\n            createdTable = model.AddCalculatedTable(name: tableName, expression: tableExpression);\\n\\n            return true;\\n\\n        }\\n\\n        public static Table CreateMeasureTable2\\n            (\\n                Model model,\\n                string defaultTableName = \\\"Some Measures\\\",\\n                string label = \\\"Measure Table Name\\\",\\n                string prompt = \\\"Provide a name for the measure Table\\\"\\n            )\\n        {\\n            if (model == null)\\n            {\\n                throw new ArgumentNullException();\\n            }\\n\\n\\n\\n            return model.AddCalculatedTable(name: defaultTableName, expression: \\\"{0}\\\");\\n\\n        }\\n\\n\\n    }\\n\\n    public static class CalculationGroupUtils\\n    {\\n\\n        public enum CreateMode\\n        {\\n            EnforceNewName,\\n            DeleteAndCreate,\\n            UseExistingWithConfirmation,\\n            UseExistingWithoutConfirmation\\n        }\\n\\n\\n        // \\n        public static bool CreateCalculationGroup\\n            (\\n                out CalculationGroupTable myCalculationGroup,\\n                Model model,\\n                string defaultCalculationGroupName = \\\"myCalcGroup\\\",\\n                string defaultCalculationGroupColumnName = \\\"myCalcItems\\\",\\n                bool matchColumnAndCalculationGroupName = true,\\n                string annotationName = \\\"ExtendedTOMWrapper\\\",\\n                string annotationValue = \\\"Default Calculation Group\\\",\\n                string prompt = \\\"Provide name for the calculation group\\\",\\n                string columnPrompt = \\\"Provide a name for the column of the calculation group\\\",\\n                string inputFieldLabel = \\\"Name\\\",\\n                string calcGroupDescription = \\\"\\\"\\n\\n\\n            )\\n        {\\n\\n\\n            string calcGroupName;\\n            string calcGroupColumnName;\\n\\n            var ts = model.Tables.Where(x => x.GetAnnotation(annotationName) == annotationValue);\\n\\n            myCalculationGroup = null as CalculationGroupTable;\\n\\n            if (ts.Count() == 1)\\n            {\\n                myCalculationGroup = ts.First() as CalculationGroupTable;\\n            }\\n            else if (ts.Count() < 1)\\n            {\\n\\n                if (\\n                    !StringUtils.InitString(\\n                        stringToInit: out calcGroupName,\\n                        prompt: prompt,\\n                        label: inputFieldLabel,\\n                        defaultValue: defaultCalculationGroupName,\\n                        checkType: StringUtils.CheckType.Table,\\n                        model: model\\n                    )\\n                ) { return false; }\\n\\n                myCalculationGroup = model.AddCalculationGroup(calcGroupName);\\n                myCalculationGroup.Description = calcGroupDescription;\\n                myCalculationGroup.SetAnnotation(annotationName, annotationValue);\\n\\n\\n                if (matchColumnAndCalculationGroupName)\\n                {\\n                    defaultCalculationGroupColumnName = calcGroupName;\\n                }\\n                else\\n                {\\n                    if (\\n                        !StringUtils.InitString(\\n                           stringToInit: out calcGroupColumnName,\\n                           prompt: columnPrompt\\n                        )\\n                    ) { return false; };\\n                };\\n\\n                model.Tables[calcGroupName].Columns[\\\"Name\\\"].Name = defaultCalculationGroupColumnName;\\n\\n            }\\n            else\\n            {\\n                //this should never happen -- who needs two calc groups for time intelligence? \\n                //myCalculationGroup = SelectTable(ts, label: \\\"Select your 'Measure Group' Calculation Group\\\") as CalculationGroupTable;\\n                myCalculationGroup = ts.First() as CalculationGroupTable;\\n            };\\n\\n            if (myCalculationGroup == null)\\n            {\\n\\n                return false;\\n            } // doesn't work in TE3 as cancel button doesn't return null in TE3\\n\\n            return true;\\n\\n        }\\n\\n\\n        public enum GetByMode\\n        {\\n            ByName,\\n            ByAnnotation\\n        }\\n\\n        //2022-02-19 / B.Agullo / \\n        public static bool GetCalculationGroup\\n        //get reference to an existing calcualtion group (if found)\\n            (\\n                out CalculationGroupTable myCalculationGroup,\\n                Model model,\\n                string selectionPrompt = \\\"Select calculation group\\\",\\n                bool filterByAnnotation = false,\\n                string annotationName = null,\\n                string annotationValue = null,\\n                string calcGroupName = null,\\n                bool skipIfOnlyOneMatches = true\\n\\n            )\\n        {\\n            if (model == null)\\n            {\\n                throw new ArgumentNullException();\\n            }\\n\\n            myCalculationGroup = null;\\n\\n            if (model.CalculationGroups.Count() == 0) return false;\\n\\n            List<string> matchingCalcGroupNames = new List<string>();\\n\\n            List<string> selectedCalcGroupNames = new List<string>();\\n\\n            if (annotationName != null && annotationValue != null)\\n            {\\n                matchingCalcGroupNames =\\n                    (List<string>)model.CalculationGroups\\n                        .Where(x => x.GetAnnotation(annotationName) == annotationValue)\\n                        .Select(x => x.Name).ToList();\\n            }\\n            else if (calcGroupName != null)\\n            {\\n                matchingCalcGroupNames =\\n                    (List<string>)model.CalculationGroups\\n                    .Where(x => x.Name == calcGroupName)\\n                    .Select(x => x.Name).ToList();\\n            }\\n            else\\n            {\\n                matchingCalcGroupNames =\\n                    model.CalculationGroups\\n                        .Select(x => x.Name).ToList();\\n            }\\n\\n\\n\\n\\n            if (!MessageUtils.SelectFromList(selectionList: matchingCalcGroupNames,\\n\\n                selectedItems: out selectedCalcGroupNames\\n                )) return false;\\n\\n\\n            myCalculationGroup = model.CalculationGroups.Where(x => x.Name == matchingCalcGroupNames.First()).First();\\n\\n\\n            return true;\\n        }\\n\\n        public static bool CreateCalculationItem\\n             (\\n                out CalculationItem myCalcItem,\\n                CalculationGroupTable cg,\\n                string defaultCalculationItemName = \\\"New Calc Item\\\",\\n                bool promptUser = false,\\n                string prompt = \\\"Provide name for the calculation item\\\",\\n                string inputFieldLabel = \\\"Name\\\",\\n                string calcItemDescription = \\\"\\\",\\n                string calcItemExpression = \\\"\\\",\\n                bool regenerateIfPresent = true\\n\\n            )\\n        {\\n            myCalcItem = null as CalculationItem;\\n            \\n            if(calcItemExpression == String.Empty)\\n            {\\n                MessageUtils.ErrorMessage(\\\"No calc Item Expression provided.\\\");\\n                return false;\\n            };\\n\\n            string calcItemName;\\n\\n            if (promptUser)\\n            {\\n                if (\\n                        !StringUtils.InitString\\n                            (\\n                                out calcItemName, \\n                                label: \\\"Calculation Item Name\\\", \\n                                defaultValue: defaultCalculationItemName,\\n                                cg:cg,\\n                                checkType: StringUtils.CheckType.CalculationItem,\\n                                prompt: prompt,\\n                                promptUser: promptUser\\n                                \\n                            )\\n                ) return false; //the naming step didn't go well\\n            }\\n            else\\n            {\\n                calcItemName = defaultCalculationItemName;\\n            }\\n\\n            if(cg.CalculationItems.Any(x=> x.Name == calcItemName))\\n            {\\n                if(regenerateIfPresent)\\n                {\\n                    cg.CalculationItems.Where(x => x.Name == calcItemName).First().Delete();\\n                }\\n                else\\n                {\\n                    return true; //all is good, nothing to do\\n                }\\n                \\n            }\\n            \\n            CalculationItem calcItem = cg.AddCalculationItem(name: calcItemName, expression: calcItemExpression);\\n            calcItem.Description = calcItemExpression;\\n            calcItem.FormatDax();\\n\\n            return true;\\n\\n\\n\\n        }\\n    }\\n    \\n        ",
      "Tooltip": "",
      "ValidContexts": "Relationship"
    },
    {
      "Name": "8. Bernats Repo\\3. Calc Group\\Add Totals Calc Group",
      "Enabled": "true",
      "Execute": "string annotationLabel = \\\"Namasdata\\\";\\nstring annotationValue = \\\"Totales\\\";\\nstring sliceColumnLabel = \\\"sliceColumn\\\";\\nif (Selected.Columns.Count() != 1)\\n{\\n    Error(\\\"Selecciona una única columna y vuelve a intentarlo\\\");\\n    return;\\n}\\nColumn sliceColumn = Selected.Column;\\nstring sliceColumnValue = sliceColumn.DaxObjectFullName;\\nCalculationGroupTable totalsCG = null as CalculationGroupTable;\\nif (Model.Tables.Any(t => t.GetAnnotation(annotationLabel) == annotationValue))\\n{\\n    totalsCG = Model.Tables.Where(t => t.GetAnnotation(annotationLabel) == annotationValue).First() as CalculationGroupTable;\\n}\\nelse\\n{\\n    totalsCG = Model.AddCalculationGroup(\\\"Totals\\\");\\n    totalsCG.SetAnnotation(annotationLabel, annotationValue);\\n    totalsCG.SetAnnotation(sliceColumnLabel, sliceColumnValue);\\n}\\nstring valuesCalcItemName = \\\"Values\\\";\\nstring valuesCalcItemExpression =\\n    String.Format(\\n    @\\\"IF(\\n        ISINSCOPE({0}),\\n        SELECTEDMEASURE(),\\n        BLANK()\\n    )\\\", sliceColumn.DaxObjectFullName);\\nCalculationItem valuesCalcItem = totalsCG.AddCalculationItem(valuesCalcItemName, valuesCalcItemExpression);\\nstring totalCalcItemName = \\\"Total\\\";\\nstring totalCalcItemExpression =\\n    String.Format(\\n    @\\\"IF(\\n        ISINSCOPE({0}),\\n        BLANK(),\\n        SELECTEDMEASURE()\\n    )\\\", sliceColumn.DaxObjectFullName);\\nCalculationItem totalCalcItem = totalsCG.AddCalculationItem(totalCalcItemName, totalCalcItemExpression);\\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "8. Bernats Repo\\3. Calc Group\\Create comparison Calc Group",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing System.Windows.Forms;\\n\\nusing Microsoft.VisualBasic;\\nstring calcGroupName = Fx.GetNameFromUser(\\\"Input name\\\",DefaultResponse: \\\"Model\\\");\\nstring selectedCalcItemName = Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Selected\\\");\\nstring referenceCalcItemName =  Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Reference\\\");\\nstring comparisonCalcItemName =  Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Comparison\\\");\\nstring comparisonPctCalcItemName =  Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Comparison %\\\");\\nstring daysMeasureName =  Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Days Selected\\\");\\nstring referenceDaysRawMeasureName =  Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Days Reference Raw\\\");\\nstring referenceDaysMeasureName =  Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Days Reference\\\");\\nstring daysDifferenceMeasureName =  Fx.GetNameFromUser(\\\"Input name\\\", DefaultResponse: \\\"Days Difference\\\");\\nIEnumerable<Table> dateTables = Fx.GetDateTables(Model);\\nif (dateTables == null) return;\\nif (dateTables.Count() < 2)\\n{\\n    Error(\\\"Less than 2 date tables detected in your model. A minimum of 2 date tables (marked as date tables) are required to run this script\\\");\\n    return;\\n}\\nTable dateTable = SelectTable(tables: dateTables, preselect: dateTables.First(), label: \\\"Select main date table\\\");\\nif (dateTable == null)\\n{\\n    Error(\\\"No table selected.\\\");\\n    return;\\n}\\nFunc<Column, bool> weekColFunc = c => c.Name.Contains(\\\"Week\\\") || c.Name.Contains(\\\"Semana\\\");\\nIEnumerable<Column> dayOfWeekColumns = Fx.GetFilteredColumns(dateTable.Columns, weekColFunc);\\n//IEnumerable <Column> dayOfWeekColumns = null as IEnumerable<Column>;\\n//if (dateTable.Columns.Any(c => c.Name.Contains(\\\"Week\\\") || c.Name.Contains(\\\"Semana\\\")))\\n//{\\n//    dayOfWeekColumns = dateTable.Columns.Where(c => c.Name.Contains(\\\"Week\\\") || c.Name.Contains(\\\"Semana\\\"));\\n//}\\n//else\\n//{\\n//    dayOfWeekColumns = dateTable.Columns;\\n//}\\nColumn dayOfWeekColumn = SelectColumn(dayOfWeekColumns, dayOfWeekColumns.First(), label: \\\"Select Day of Week column\\\");\\nif (dayOfWeekColumn == null) { Error(\\\"No column selected\\\"); return; }\\nTable referenceDateTable = SelectTable(tables: dateTables, preselect: dateTables.Last(), label: \\\"Select reference date table\\\");\\nif (referenceDateTable == null)\\n{\\n    Error(\\\"No table selected.\\\");\\n    return;\\n}\\nIEnumerable<Column> referenceDayOfWeekColumns = Fx.GetFilteredColumns(referenceDateTable.Columns, weekColFunc);\\nColumn referenceDayOfWeekColumn = SelectColumn(referenceDayOfWeekColumns, referenceDayOfWeekColumns.First(), label: \\\"Select Day of Week column of reference Date Table\\\");\\nif (referenceDayOfWeekColumn == null) { Error(\\\"No column selected\\\"); return; }\\nCalculationGroupTable calcGroup = Model.AddCalculationGroup(calcGroupName);\\nColumn calcGroupColumn = calcGroup.Columns[0];\\ncalcGroupColumn.Name = calcGroup.Name;\\nstring selectedCalcItemExpression =\\n    String.Format(\\n        @\\\"CALCULATE(\\n            SELECTEDMEASURE( ),\\n            REMOVEFILTERS( {0} )\\n        )\\\",\\n        referenceDateTable.DaxObjectFullName);\\nCalculationItem selectedCalcItem = calcGroup.AddCalculationItem(selectedCalcItemName, selectedCalcItemExpression);\\nselectedCalcItem.FormatDax();\\nselectedCalcItem.Ordinal = 0;\\nstring referenceCalcItemExpression =\\n    String.Format(\\n        @\\\"CALCULATE(\\n            CALCULATE( SELECTEDMEASURE( ), REMOVEFILTERS( {0} ) ),\\n            TREATAS(\\n                VALUES( {1} ),\\n                {2}\\n            )\\n        )\\\",\\n        dateTable.DaxObjectFullName,\\n        dayOfWeekColumn.DaxObjectFullName,\\n        referenceDayOfWeekColumn.DaxObjectFullName\\n     );\\nCalculationItem referenceCalcItem = calcGroup.AddCalculationItem(referenceCalcItemName, referenceCalcItemExpression);\\nreferenceCalcItem.FormatDax();\\nreferenceCalcItem.Ordinal = 1;\\nstring comparisonCalcItemExpression =\\n    String.Format(\\n        @\\\"VAR _selection =\\n            CALCULATE(\\n                SELECTEDMEASURE( ),\\n                REMOVEFILTERS( {0} )\\n            )\\n        VAR _refrence =\\n            CALCULATE(\\n                CALCULATE( SELECTEDMEASURE( ),REMOVEFILTERS( {1} )),\\n                TREATAS(\\n                    VALUES( {2} ),\\n                    {3}\\n                )\\n            )\\n        VAR _result =\\n            IF(\\n                ISBLANK( _selection ) || ISBLANK( _refrence ),\\n                BLANK( ),\\n                _selection - _refrence\\n            )\\n        RETURN\\n            _result\\\",\\n        referenceDateTable.DaxObjectFullName,\\n        dateTable.DaxObjectFullName,\\n        dayOfWeekColumn.DaxObjectFullName,\\n        referenceDayOfWeekColumn.DaxObjectFullName);\\nstring comparisonCalcItemFormatStringExpression =\\n    @\\\"VAR _fs = SELECTEDMEASUREFORMATSTRING()\\n    RETURN \\\"\\\"+\\\"\\\" & _fs & \\\"\\\";-\\\"\\\" & _fs & \\\"\\\";-\\\"\\\" \\\";\\nCalculationItem comparisonCalcItem = calcGroup.AddCalculationItem(comparisonCalcItemName, comparisonCalcItemExpression);\\ncomparisonCalcItem.FormatStringExpression = comparisonCalcItemFormatStringExpression;\\ncomparisonCalcItem.FormatDax();\\ncomparisonCalcItem.Ordinal = 2;\\nstring comparisonPctCalcItemExpression =\\n    String.Format(\\n        @\\\"VAR _selection =\\n            CALCULATE(\\n                SELECTEDMEASURE( ),\\n                REMOVEFILTERS( {0} )\\n            )\\n        VAR _refrence =\\n            CALCULATE(\\n                CALCULATE( SELECTEDMEASURE( ),REMOVEFILTERS( {1} ) ),\\n                TREATAS(\\n                    VALUES( {2} ),\\n                    {3}\\n                )\\n            )\\n        VAR _result =\\n            IF(\\n                ISBLANK( _selection ) || ISBLANK( _refrence ),\\n                BLANK( ),\\n                DIVIDE( _selection - _refrence, _refrence )\\n            )\\n        RETURN\\n            _result\\\",\\n        referenceDateTable.DaxObjectFullName,\\n        dateTable.DaxObjectFullName,\\n        dayOfWeekColumn.DaxObjectFullName,\\n        referenceDayOfWeekColumn.DaxObjectFullName);\\nstring comparisonPctCalcItemFormatStringExpression = @\\\"\\\"\\\"+0 %;-0 %;-\\\"\\\"\\\";\\nCalculationItem comparisonPctCalcItem = calcGroup.AddCalculationItem(comparisonPctCalcItemName, comparisonPctCalcItemExpression);\\ncomparisonPctCalcItem.FormatStringExpression = comparisonPctCalcItemFormatStringExpression;\\ncomparisonPctCalcItem.FormatDax();\\ncomparisonPctCalcItem.Ordinal = 3;\\nstring daysMeasureExpression =\\n    String.Format(\\n        @\\\"COUNTROWS({0})\\\",\\n        dateTable.DaxObjectFullName);\\nMeasure daysMeasure = dateTable.AddMeasure(name: daysMeasureName, expression: daysMeasureExpression);\\ndaysMeasure.FormatString = @\\\"\\\"\\\"0\\\"\\\"\\\"; \\ndaysMeasure.FormatDax();\\nstring referenceDaysRawMeasureExpression =\\n    String.Format(\\n        @\\\"COUNTROWS({0})\\\",\\n        referenceDateTable.DaxObjectFullName);\\nMeasure referenceDaysRawMeasure = referenceDateTable.AddMeasure(name: referenceDaysRawMeasureName, expression: referenceDaysRawMeasureExpression);\\nreferenceDaysRawMeasure.FormatString = @\\\"\\\"\\\"0\\\"\\\"\\\";\\nreferenceDaysRawMeasure.FormatDax();\\nstring referenceDaysMeasureExpression =\\n    String.Format(\\n        @\\\"CALCULATE({0},{1}=\\\"\\\"{2}\\\"\\\")\\\",\\n        referenceDaysRawMeasure.DaxObjectFullName,\\n        calcGroupColumn.DaxObjectFullName,\\n        referenceCalcItem.Name);\\nMeasure referenceDaysMeasure = referenceDateTable.AddMeasure(name: referenceDaysMeasureName, expression: referenceDaysMeasureExpression);\\nreferenceDaysMeasure.FormatDax();\\nstring daysDifferenceMeasureExpression =\\n    String.Format(\\n        @\\\"{0} - {1}\\\",\\n        daysMeasure.DaxObjectFullName,\\n        referenceDaysMeasure.DaxObjectFullName);\\nMeasure differenceDaysMeasure = referenceDateTable.AddMeasure(name: daysDifferenceMeasureName, expression: daysDifferenceMeasureExpression);\\ndifferenceDaysMeasure.FormatDax();\\ndifferenceDaysMeasure.FormatString = @\\\"\\\"\\\"0\\\"\\\"\\\";\\n\\npublic static class Fx\\n{\\n    public static IEnumerable<Table> GetDateTables(Model model)\\n    {\\n        IEnumerable<Table> dateTables = null as IEnumerable<Table>;\\n        if (model.Tables.Any(t => t.DataCategory == \\\"Time\\\" && t.Columns.Any(c => c.IsKey == true)))\\n        {\\n            dateTables = model.Tables.Where(t => t.DataCategory == \\\"Time\\\" && t.Columns.Any(c => c.IsKey == true && c.DataType == DataType.DateTime));\\n        }\\n        else\\n        {\\n            Error(\\\"No date table detected in the model. Please mark your date table(s) as date table\\\");\\n        }\\n        return dateTables;\\n    }\\n    public static Table GetTablesWithAnnotation(IEnumerable<Table> tables, string annotationLabel, string annotationValue)\\n    {\\n        Func<Table, bool> lambda = t => t.GetAnnotation(annotationLabel) == annotationValue;\\n        IEnumerable<Table> matchTables = GetFilteredTables(tables, lambda);\\n        if(matchTables == null)\\n        {\\n            return null;\\n        }\\n        else\\n        {\\n            return matchTables.First();\\n        }\\n    }\\n    public static IEnumerable<Table> GetFilteredTables(IEnumerable<Table> tables, Func<Table,bool> lambda)\\n    {\\n        if (tables.Any(t => lambda(t)))\\n        {\\n            return tables.Where(t => lambda(t));\\n        }\\n        else\\n        {\\n            return null as IEnumerable<Table>; \\n        }\\n    }\\n    public static IEnumerable<Column> GetFilteredColumns(IEnumerable<Column> columns, Func<Column,bool> lambda, bool returnAllIfNoneFound = true) \\n    {\\n        if (columns.Any(c => lambda(c)))\\n        {\\n            return columns.Where(c => lambda(c));\\n        }\\n        else\\n        {\\n            if(returnAllIfNoneFound)\\n            {\\n                return columns;\\n            }\\n            else\\n            {\\n                return null as IEnumerable<Column>;\\n            }\\n        }\\n    }\\n    public static Table CreateCalcTable(Model model, string tableName, string tableExpression)\\n    {\\n        if(!model.Tables.Any(t => t.Name == tableName))\\n        {\\n            return model.AddCalculatedTable(tableName, tableExpression);\\n        }\\n        else\\n        {\\n            return model.Tables.Where(t => t.Name == tableName).First();\\n        }\\n    }\\n    public static string GetNameFromUser(string Prompt, string Title =\\\"\\\", string DefaultResponse = \\\"\\\")\\n    {    \\n        string response = Interaction.InputBox(Prompt, Title, DefaultResponse, 740, 400);\\n        return response;\\n    }\\n    public static string ChooseString(IList<string> OptionList)\\n    {\\n        Func<IList<string>, string, string> SelectString = (IList<string> options, string title) =>\\n        {\\n            var form = new Form();\\n            form.Text = title;\\n            var buttonPanel = new Panel();\\n            buttonPanel.Dock = DockStyle.Bottom;\\n            buttonPanel.Height = 30;\\n            var okButton = new Button() { DialogResult = DialogResult.OK, Text = \\\"OK\\\" };\\n            var cancelButton = new Button() { DialogResult = DialogResult.Cancel, Text = \\\"Cancel\\\", Left = 80 };\\n            var listbox = new ListBox();\\n            listbox.Dock = DockStyle.Fill;\\n            listbox.Items.AddRange(options.ToArray());\\n            listbox.SelectedItem = options[0];\\n            form.Controls.Add(listbox);\\n            form.Controls.Add(buttonPanel);\\n            buttonPanel.Controls.Add(okButton);\\n            buttonPanel.Controls.Add(cancelButton);\\n            var result = form.ShowDialog();\\n            if (result == DialogResult.Cancel) return null;\\n            return listbox.SelectedItem.ToString();\\n        };\\n        //let the user select the name of the macro to copy\\n        String select = SelectString(OptionList, \\\"Choose a macro\\\");\\n        //check that indeed one macro was selected\\n        if (select == null)\\n        {\\n            Info(\\\"You cancelled!\\\");\\n        }\\n        return select;\\n    }\\n}\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "8. Bernats Repo\\3. Calc Group\\Mask Calc Group Test",
      "Enabled": "true",
      "Execute": "if(Selected.Measures.Count() != 1)\\n{\\n    Error(\\\"No measures seleted\\\");\\n    return;\\n}\\nMeasure targetMeasure = Selected.Measure;\\nTable table = SelectTable(label: \\\"Pick the table of the slicing column\\\");\\nif(table == null) { return; };\\nColumn column = SelectColumn(table, label: \\\"Pick the slicing column\\\");\\nif(column == null) { return; };\\nMeasure sliderMeasure = SelectMeasure(label:\\\"Pick Slider Measure\\\");\\nCalculationGroupTable cg = Model.AddCalculationGroup(\\\"Mask\\\");\\nstring calcItemName = \\\"Mask\\\";\\nstring calcItemExpression = \\\"SELECTEDMEASURE()\\\";\\nstring calcItemFormatString =\\n    String.Format(@\\\"VAR threshold = {2}\\n    VAR tbl =\\n        CALCULATETABLE(\\n            ADDCOLUMNS(\\n                VALUES( {1} ),\\n                \\\"\\\"@{3}\\\"\\\", {0}\\n            ),\\n            ALLSELECTED( {1} )\\n        )\\n    VAR tbl2 =\\n        ADDCOLUMNS(\\n            tbl,\\n            \\\"\\\"@RANK\\\"\\\", RANKX( tbl, [@{3}], , ASC, SKIP )\\n        )\\n    VAR valuesUnderThreshold =\\n        COUNTROWS( FILTER( tbl2, [@{3}] < threshold ) )\\n    VAR valuesToMask =\\n        switch( \\n            TRUE(),\\n            valuesUnderThreshold = 0, 0,\\n            valuesUnderThreshold < 2, 2, \\n            valuesUnderThreshold\\n        )\\n    VAR currentRank = \\n        VAR tbl = \\n        CALCULATETABLE(\\n            VALUES({1}),\\n            ALLSELECTED({1})\\n        )\\n        RETURN \\n            RANKX(tbl,{0}, ,ASC)\\n    VAR result =\\n        IF( currentRank <= valuesToMask, \\\"\\\"'*'\\\"\\\", SELECTEDMEASUREFORMATSTRING( ) )\\n    RETURN\\n        result\\\", \\n    targetMeasure.DaxObjectFullName,\\n    column.DaxObjectFullName,\\n    sliderMeasure.DaxObjectFullName,\\n    targetMeasure.Name);\\nCalculationItem calcItem = cg.AddCalculationItem(calcItemName,calcItemExpression);\\ncalcItem.FormatStringExpression = calcItemFormatString;\\ncalcItem.FormatDax();\\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\3. Calc Group\\Multi-Total Calc Group",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n\\nif (Selected.Columns.Count() != 1)\\n{\\n    Error(\\\"Select only 1 column and try again\\\");\\n    return;\\n}\\nColumn column = Selected.Column;\\nstring suggestedCalcGroupName = column.Name + \\\" Multi-Totals\\\";\\nstring calcGroupName = Interaction.InputBox(\\n    Prompt:\\\"Please provide the name of the multi-total calc group.\\\",\\n    DefaultResponse:suggestedCalcGroupName);\\nif (calcGroupName == \\\"\\\")\\n{\\n    Error(\\\"No name provided\\\");\\n    return;\\n};\\nCalculationGroupTable calcGroup = \\n    Model.AddCalculationGroup(\\n        calcGroupName);\\nstring valuesCalcItemName = \\\"Values\\\";\\nstring valuesCalcItemExpression =\\n    String.Format(\\n        @\\\"IF(\\n            ISINSCOPE( {0} ),\\n            SELECTEDMEASURE()\\n        )\\\", column.DaxObjectFullName);\\nCalculationItem valuesCalcItem =\\n    calcGroup.AddCalculationItem(\\n        name: valuesCalcItemName,\\n        expression: valuesCalcItemExpression);\\nvaluesCalcItem.FormatDax();\\nvaluesCalcItem.Description = \\\"This calculation item is to show the breakdown by \\\" + column.Name;\\nvaluesCalcItem.Ordinal = 0;\\nstring totalCalcItemName = \\\"Total\\\";\\nstring totalCalcItemExpression =\\n    String.Format(\\n        @\\\"IF(\\n            NOT ISINSCOPE( {0} ),\\n            SELECTEDMEASURE()\\n        )\\\", column.DaxObjectFullName);\\nCalculationItem totalCalcItem =\\n    calcGroup.AddCalculationItem(\\n        name: totalCalcItemName,\\n        expression: totalCalcItemExpression);\\ntotalCalcItem.FormatDax();\\ntotalCalcItem.Description = \\\"This calculation item is to show the regular total as a calculation item along with different totals that will be added to this calculation group\\\";\\ntotalCalcItem.Ordinal = 1; \\nstring calcGroupTypeLabel = \\\"CalcGroupType\\\";\\nstring calcGroupTypeValue = \\\"MultiTotal\\\";\\ncalcGroup.SetAnnotation(\\n    calcGroupTypeLabel,\\n    calcGroupTypeValue);\\nstring calcGroupValuesFieldLabel = \\\"ValuesField\\\";\\nstring calcGroupValuesFieldValue = column.DaxObjectFullName;\\ncalcGroup.SetAnnotation(\\n    calcGroupValuesFieldLabel,\\n    calcGroupValuesFieldValue);\\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "8. Bernats Repo\\3. Calc Group\\Time Intelligence Cambra",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n                //\\n// CHANGELOG:\\n// '2021-05-01 / B.Agullo / \\n// '2021-05-17 / B.Agullo / added affected measure table\\n// '2021-06-19 / B.Agullo / data label measures\\n// '2021-07-10 / B.Agullo / added flag expression to avoid breaking already special format strings\\n// '2021-09-23 / B.Agullo / added code to prompt for parameters (code credit to Daniel Otykier) \\n// '2021-09-27 / B.Agullo / added code for general name \\n// '2022-10-11 / B.Agullo / added MMT and MWT calc item groups\\n// '2023-01-24 / B.Agullo / added Date Range Measure and completed dynamic label for existing items\\n//\\n// by Bernat Agulló\\n// twitter: @AgulloBernat\\n// www.esbrina-ba.com/blog\\n//\\n// REFERENCE: \\n// Check out https://www.esbrina-ba.com/time-intelligence-the-smart-way/ where this script is introduced\\n// \\n// FEATURED: \\n// this script featured in GuyInACube https://youtu.be/_j0iTUo2HT0\\n//\\n// THANKS:\\n// shout out to Johnny Winter for the base script and SQLBI for daxpatterns.com\\n\\n//select the measures that you want to be affected by the calculation group\\n//before running the script. \\n//measure names can also be included in the following array (no need to select them) \\nstring[] preSelectedMeasures = { }; //include measure names in double quotes, like: {\\\"Profit\\\",\\\"Total Cost\\\"};\\n\\n//AT LEAST ONE MEASURE HAS TO BE AFFECTED!, \\n//either by selecting it or typing its name in the preSelectedMeasures Variable\\n\\n\\n\\n//\\n// ----- do not modify script below this line -----\\n//\\n\\n\\nstring affectedMeasures = \\\"{\\\";\\n\\nint i = 0;\\n\\nfor (i = 0; i < preSelectedMeasures.GetLength(0); i++)\\n{\\n\\n    if (affectedMeasures == \\\"{\\\")\\n    {\\n        affectedMeasures = affectedMeasures + \\\"\\\"\\\" + preSelectedMeasures[i] + \\\"\\\"\\\";\\n    }\\n    else\\n    {\\n        affectedMeasures = affectedMeasures + \\\",\\\"\\\" + preSelectedMeasures[i] + \\\"\\\"\\\";\\n    };\\n\\n};\\n\\n\\nif (Selected.Measures.Count != 0)\\n{\\n\\n    foreach (var m in Selected.Measures)\\n    {\\n        if (affectedMeasures == \\\"{\\\")\\n        {\\n            affectedMeasures = affectedMeasures + \\\"\\\"\\\" + m.Name + \\\"\\\"\\\";\\n        }\\n        else\\n        {\\n            affectedMeasures = affectedMeasures + \\\",\\\"\\\" + m.Name + \\\"\\\"\\\";\\n        };\\n    };\\n};\\n\\n//check that by either method at least one measure is affected\\nif (affectedMeasures == \\\"{\\\")\\n{\\n    Error(\\\"No measures affected by calc group\\\");\\n    return;\\n};\\n\\nstring calcGroupName = String.Empty;\\nstring columnName = String.Empty;\\n\\nif (Model.CalculationGroups.Any(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\"))\\n{\\n    calcGroupName = Model.CalculationGroups.Where(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\").First().Name;\\n\\n}\\nelse\\n{\\n    calcGroupName = Interaction.InputBox(\\\"Provide a name for your Calc Group\\\", \\\"Calc Group Name\\\", \\\"Time Intelligence\\\", 740, 400);\\n};\\n\\nif (calcGroupName == String.Empty) return;\\n\\n\\nif (Model.CalculationGroups.Any(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\"))\\n{\\n    columnName = Model.Tables.Where(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\").First().Columns.First().Name;\\n\\n}\\nelse\\n{\\n    columnName = Interaction.InputBox(\\\"Provide a name for your Calc Group Column\\\", \\\"Calc Group Column Name\\\", calcGroupName, 740, 400);\\n};\\n\\nif (columnName == String.Empty) return;\\n\\nstring affectedMeasuresTableName = String.Empty;\\n\\nif (Model.Tables.Any(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\"))\\n{\\n    affectedMeasuresTableName = Model.Tables.Where(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\").First().Name;\\n\\n}\\nelse\\n{\\n    affectedMeasuresTableName = Interaction.InputBox(\\\"Provide a name for affected measures table\\\", \\\"Affected Measures Table Name\\\", calcGroupName + \\\" Affected Measures\\\", 740, 400);\\n\\n};\\n\\nif (affectedMeasuresTableName ==String.Empty) return;\\n\\n\\nstring affectedMeasuresColumnName = String.Empty;\\n\\nif (Model.Tables.Any(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\"))\\n{\\n    affectedMeasuresColumnName = Model.Tables.Where(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\").First().Columns.First().Name;\\n\\n}\\nelse\\n{\\n    affectedMeasuresColumnName = Interaction.InputBox(\\\"Provide a name for affected measures column\\\", \\\"Affected Measures Table Column Name\\\", \\\"Measure\\\", 740, 400);\\n\\n};\\n\\nif (affectedMeasuresColumnName == String.Empty) return;\\n//string affectedMeasuresColumnName = \\\"Measure\\\"; \\n\\nstring labelAsValueMeasureName = \\\"Label as Value Measure\\\";\\nstring labelAsFormatStringMeasureName = \\\"Label as format string\\\";\\n\\n\\n// '2021-09-24 / B.Agullo / model object selection prompts! \\nvar factTable = SelectTable(label: \\\"Select your fact table\\\");\\nif (factTable == null) return;\\n\\nvar factTableDateColumn = SelectColumn(factTable.Columns, label: \\\"Select the main date column\\\");\\nif (factTableDateColumn == null) return;\\n\\nTable dateTableCandidate = null;\\n\\nif (Model.Tables.Any\\n    (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table\\\"\\n        || x.Name == \\\"Date\\\"\\n        || x.Name == \\\"Calendar\\\"))\\n{\\n    dateTableCandidate = Model.Tables.Where\\n        (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table\\\"\\n            || x.Name == \\\"Date\\\"\\n            || x.Name == \\\"Calendar\\\").First();\\n\\n};\\n\\nvar dateTable =\\n    SelectTable(\\n        label: \\\"Select your date table\\\",\\n        preselect: dateTableCandidate);\\n\\nif (dateTable == null)\\n{\\n    Error(\\\"You just aborted the script\\\");\\n    return;\\n}\\nelse\\n{\\n    dateTable.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Date Table\\\");\\n};\\n\\n\\nColumn dateTableDateColumnCandidate = null;\\n\\nif (dateTable.Columns.Any\\n            (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Date Column\\\" || x.Name == \\\"Date\\\"))\\n{\\n    dateTableDateColumnCandidate = dateTable.Columns.Where\\n        (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Date Column\\\" || x.Name == \\\"Date\\\").First();\\n};\\n\\nvar dateTableDateColumn =\\n    SelectColumn(\\n        dateTable.Columns,\\n        label: \\\"Select the date column\\\",\\n        preselect: dateTableDateColumnCandidate);\\n\\nif (dateTableDateColumn == null)\\n{\\n    Error(\\\"You just aborted the script\\\");\\n    return;\\n}\\nelse\\n{\\n    dateTableDateColumn.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Date Table Date Column\\\");\\n};\\n\\nColumn dateTableYearColumnCandidate = null;\\nif (dateTable.Columns.Any(x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Year Column\\\" || x.Name == \\\"Year\\\"))\\n{\\n    dateTable.Columns.Where\\n        (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Year Column\\\" || x.Name == \\\"Year\\\").First();\\n};\\n\\nvar dateTableYearColumn =\\n    SelectColumn(\\n        dateTable.Columns,\\n        label: \\\"Select the year column\\\",\\n        preselect: dateTableYearColumnCandidate);\\n\\nif (dateTableYearColumn == null)\\n{\\n    Error(\\\"You just abourted the script\\\");\\n    return;\\n}\\nelse\\n{\\n    dateTableYearColumn.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Date Table Year Column\\\");\\n};\\n\\n\\n//these names are for internal use only, so no need to be super-fancy, better stick to datpatterns.com model\\nstring ShowValueForDatesMeasureName = \\\"ShowValueForDates\\\";\\nstring dateWithSalesColumnName = \\\"DateWith\\\" + factTable.Name;\\n\\n// '2021-09-24 / B.Agullo / I put the names back to variables so I don't have to tough the script\\nstring factTableName = factTable.Name;\\nstring factTableDateColumnName = factTableDateColumn.Name;\\nstring dateTableName = dateTable.Name;\\nstring dateTableDateColumnName = dateTableDateColumn.Name;\\nstring dateTableYearColumnName = dateTableYearColumn.Name;\\n\\n// '2021-09-24 / B.Agullo / this is for internal use only so better leave it as is \\nstring flagExpression = \\\"UNICHAR( 8204 )\\\";\\n\\nstring calcItemProtection = \\\"<CODE>\\\"; //default value if user has selected no measures\\nstring calcItemFormatProtection = \\\"<CODE>\\\"; //default value if user has selected no measures\\n\\n// check if there's already an affected measure table\\nif (Model.Tables.Any(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\"))\\n{\\n    //modifying an existing calculated table is not risk-free\\n    Info(\\\"Make sure to include measure names to the table \\\" + affectedMeasuresTableName);\\n}\\nelse\\n{\\n    // create calculated table containing all names of affected measures\\n    // this is why you need to enable \\n    if (affectedMeasures != \\\"{\\\")\\n    {\\n\\n        affectedMeasures = affectedMeasures + \\\"}\\\";\\n\\n        string affectedMeasureTableExpression =\\n            \\\"SELECTCOLUMNS(\\\" + affectedMeasures + \\\",\\\"\\\" + affectedMeasuresColumnName + \\\"\\\",[Value])\\\";\\n\\n        var affectedMeasureTable =\\n            Model.AddCalculatedTable(affectedMeasuresTableName, affectedMeasureTableExpression);\\n\\n        affectedMeasureTable.FormatDax();\\n        affectedMeasureTable.Description =\\n            \\\"Measures affected by \\\" + calcGroupName + \\\" calculation group.\\\";\\n\\n        affectedMeasureTable.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Affected Measures Table\\\");\\n\\n        // this causes error\\n        // affectedMeasureTable.Columns[affectedMeasuresColumnName].SetAnnotation(\\\"@AgulloBernat\\\",\\\"Time Intel Affected Measures Table Column\\\");\\n\\n        affectedMeasureTable.IsHidden = true;\\n\\n    };\\n};\\n\\n//if there where selected or preselected measures, prepare protection code for expresion and formatstring\\nstring affectedMeasuresValues = \\\"VALUES('\\\" + affectedMeasuresTableName + \\\"'[\\\" + affectedMeasuresColumnName + \\\"])\\\";\\n\\ncalcItemProtection =\\n    \\\"SWITCH(\\\" +\\n    \\\"   TRUE(),\\\" +\\n    \\\"   SELECTEDMEASURENAME() IN \\\" + affectedMeasuresValues + \\\",\\\" +\\n    \\\"   <CODE> ,\\\" +\\n    \\\"   ISSELECTEDMEASURE([\\\" + labelAsValueMeasureName + \\\"]),\\\" +\\n    \\\"   <LABELCODE> ,\\\" +\\n    \\\"   SELECTEDMEASURE() \\\" +\\n    \\\")\\\";\\n\\n\\ncalcItemFormatProtection =\\n    \\\"SWITCH(\\\" +\\n    \\\"   TRUE() ,\\\" +\\n    \\\"   SELECTEDMEASURENAME() IN \\\" + affectedMeasuresValues + \\\",\\\" +\\n    \\\"   <CODE> ,\\\" +\\n    \\\"   ISSELECTEDMEASURE([\\\" + labelAsFormatStringMeasureName + \\\"]),\\\" +\\n    \\\"   <LABELCODEFORMATSTRING> ,\\\" +\\n    \\\"   SELECTEDMEASUREFORMATSTRING() \\\" +\\n    \\\")\\\";\\n\\n\\nstring dateColumnWithTable = \\\"'\\\" + dateTableName + \\\"'[\\\" + dateTableDateColumnName + \\\"]\\\";\\nstring yearColumnWithTable = \\\"'\\\" + dateTableName + \\\"'[\\\" + dateTableYearColumnName + \\\"]\\\";\\nstring factDateColumnWithTable = \\\"'\\\" + factTableName + \\\"'[\\\" + factTableDateColumnName + \\\"]\\\";\\nstring dateWithSalesWithTable = \\\"'\\\" + dateTableName + \\\"'[\\\" + dateWithSalesColumnName + \\\"]\\\";\\nstring calcGroupColumnWithTable = \\\"'\\\" + calcGroupName + \\\"'[\\\" + columnName + \\\"]\\\";\\n\\n//check to see if a table with this name already exists\\n//if it doesnt exist, create a calculation group with this name\\nif (!Model.Tables.Contains(calcGroupName))\\n{\\n    var cg = Model.AddCalculationGroup(calcGroupName);\\n    cg.Description = \\\"Calculation group for time intelligence. Availability of data is taken from \\\" + factTableName + \\\".\\\";\\n    cg.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Calc Group\\\");\\n};\\n\\n//set variable for the calc group\\nTable calcGroup = Model.Tables[calcGroupName];\\n\\n//if table already exists, make sure it is a Calculation Group type\\nif (calcGroup.SourceType.ToString() != \\\"CalculationGroup\\\")\\n{\\n    Error(\\\"Table exists in Model but is not a Calculation Group. Rename the existing table or choose an alternative name for your Calculation Group.\\\");\\n    return;\\n};\\n\\n//adds the two measures that will be used for label as value, label as format string \\nvar labelAsValueMeasure = calcGroup.AddMeasure(labelAsValueMeasureName, \\\"\\\");\\nlabelAsValueMeasure.Description = \\\"Use this measure to show the year evaluated in tables\\\";\\n\\nvar labelAsFormatStringMeasure = calcGroup.AddMeasure(labelAsFormatStringMeasureName, \\\"0\\\");\\nlabelAsFormatStringMeasure.Description = \\\"Use this measure to show the year evaluated in charts\\\";\\n\\nMeasure dateRangeMeasure = calcGroup.AddMeasure(\\\"Date Range\\\", expression: @\\\"FORMAT( MIN( 'Date'[Date] ), \\\"\\\"d-MMM-yy\\\"\\\", \\\"\\\"en-US\\\"\\\" ) & \\\"\\\" to \\\"\\\"\\n        & FORMAT( MAX( 'Date'[Date] ), \\\"\\\"d-MMM-yy\\\"\\\", \\\"\\\"en-US\\\"\\\" )\\\");\\n\\ndateRangeMeasure.Description = \\\"This measure is used to display the dynamic label of Moving total calc items. Do not delete.\\\";\\n\\n\\n//by default the calc group has a column called Name. If this column is still called Name change this in line with specfied variable\\nif (calcGroup.Columns.Contains(\\\"Name\\\"))\\n{\\n    calcGroup.Columns[\\\"Name\\\"].Name = columnName;\\n\\n};\\n\\ncalcGroup.Columns[columnName].Description = \\\"Select value(s) from this column to apply time intelligence calculations.\\\";\\ncalcGroup.Columns[columnName].SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Calc Group Column\\\");\\n\\n\\n//Only create them if not in place yet (reruns)\\nif (!Model.Tables[dateTableName].Columns.Any(C => C.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Date with Data Column\\\"))\\n{\\n    string DateWithSalesCalculatedColumnExpression =\\n        dateColumnWithTable + \\\" <= MAX ( \\\" + factDateColumnWithTable + \\\")\\\";\\n\\n    Column dateWithDataColumn = dateTable.AddCalculatedColumn(dateWithSalesColumnName, DateWithSalesCalculatedColumnExpression);\\n    dateWithDataColumn.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Date with Data Column\\\");\\n};\\n\\nif (!Model.Tables[dateTableName].Measures.Any(M => M.Name == ShowValueForDatesMeasureName))\\n{\\n    string ShowValueForDatesMeasureExpression =\\n        \\\"VAR LastDateWithData = \\\" +\\n        \\\"    CALCULATE ( \\\" +\\n        \\\"        MAX (  \\\" + factDateColumnWithTable + \\\" ), \\\" +\\n        \\\"        REMOVEFILTERS () \\\" +\\n        \\\"    )\\\" +\\n        \\\"VAR FirstDateVisible = \\\" +\\n        \\\"    MIN ( \\\" + dateColumnWithTable + \\\" ) \\\" +\\n        \\\"VAR Result = \\\" +\\n        \\\"    FirstDateVisible <= LastDateWithData \\\" +\\n        \\\"RETURN \\\" +\\n        \\\"    Result \\\";\\n\\n    var ShowValueForDatesMeasure = dateTable.AddMeasure(ShowValueForDatesMeasureName, ShowValueForDatesMeasureExpression);\\n\\n    ShowValueForDatesMeasure.FormatDax();\\n};\\n\\n\\n\\n//defining expressions and formatstring for each calc item\\nstring CY =\\n    \\\"/*CY*/ \\\" +\\n    \\\"SELECTEDMEASURE()\\\";\\n\\nstring CYlabel =\\n    \\\"SELECTEDVALUE(\\\" + yearColumnWithTable + \\\")\\\";\\n\\n\\nstring PY =\\n    \\\"/*PY*/ \\\" +\\n    \\\"IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n    \\\"    CALCULATE ( \\\" +\\n    \\\"        \\\" + CY + \\\", \\\" +\\n    \\\"        CALCULATETABLE ( \\\" +\\n    \\\"            DATEADD ( \\\" + dateColumnWithTable + \\\" , -1, YEAR ), \\\" +\\n    \\\"            \\\" + dateWithSalesWithTable + \\\" = TRUE \\\" +\\n    \\\"        ) \\\" +\\n    \\\"    ) \\\" +\\n    \\\") \\\";\\n\\n\\nstring PYlabel =\\n    \\\"/*PY*/ \\\" +\\n    \\\"IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n    \\\"    CALCULATE ( \\\" +\\n    \\\"        \\\" + CYlabel + \\\", \\\" +\\n    \\\"        CALCULATETABLE ( \\\" +\\n    \\\"            DATEADD ( \\\" + dateColumnWithTable + \\\" , -1, YEAR ), \\\" +\\n    \\\"            \\\" + dateWithSalesWithTable + \\\" = TRUE \\\" +\\n    \\\"        ) \\\" +\\n    \\\"    ) \\\" +\\n    \\\") \\\";\\n\\n\\nstring YOY =\\n    \\\"/*YOY*/ \\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + CY + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PY + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\nstring YOYlabel =\\n    \\\"/*YOY*/ \\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + CYlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\nstring YOYpct =\\n    \\\"/*YOY%*/ \\\" +\\n   \\\"VAR ValueCurrentPeriod = \\\" + CY + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PY + \\\" \\\" +\\n    \\\"VAR CurrentMinusPreviousPeriod = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"DIVIDE ( \\\" +\\n    \\\"    CurrentMinusPreviousPeriod,\\\" +\\n    \\\"    ValuePreviousPeriod\\\" +\\n    \\\") \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\nstring YOYpctLabel =\\n    \\\"/*YOY%*/ \\\" +\\n   \\\"VAR ValueCurrentPeriod = \\\" + CYlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod & \\\" (%)\\\"\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\nstring YTD =\\n    \\\"/*YTD*/\\\" +\\n    \\\"IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"],\\\" +\\n    \\\"    CALCULATE (\\\" +\\n    \\\"        \\\" + CY + \\\",\\\" +\\n    \\\"        DATESYTD (\\\" + dateColumnWithTable + \\\" )\\\" +\\n    \\\"   )\\\" +\\n    \\\") \\\";\\n\\n\\nstring YTDlabel = CYlabel + \\\"& \\\" YTD\\\"\\\";\\n\\n\\nstring PYTD =\\n    \\\"/*PYTD*/\\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n    \\\"   CALCULATE ( \\\" +\\n    \\\"       \\\" + YTD + \\\",\\\" +\\n    \\\"    CALCULATETABLE ( \\\" +\\n    \\\"        DATEADD ( \\\" + dateColumnWithTable + \\\", -1, YEAR ), \\\" +\\n    \\\"       \\\" + dateWithSalesWithTable + \\\" = TRUE \\\" +\\n    \\\"       )\\\" +\\n    \\\"   )\\\" +\\n    \\\") \\\";\\n\\nstring PYTDlabel = PYlabel + \\\"& \\\" YTD\\\"\\\";\\n\\n\\nstring YOYTD =\\n    \\\"/*YOYTD*/\\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + YTD + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTD + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\n\\nstring YOYTDlabel =\\n    \\\"/*YOYTD*/\\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + YTDlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTDlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\n\\n\\nstring YOYTDpct =\\n    \\\"/*YOYTD%*/\\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + YTD + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTD + \\\" \\\" +\\n    \\\"VAR CurrentMinusPreviousPeriod = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"DIVIDE ( \\\" +\\n    \\\"    CurrentMinusPreviousPeriod,\\\" +\\n    \\\"    ValuePreviousPeriod\\\" +\\n    \\\") \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\n\\nstring YOYTDpctLabel =\\n    \\\"/*YOY%*/ \\\" +\\n   \\\"VAR ValueCurrentPeriod = \\\" + YTDlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTDlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod & \\\" (%)\\\"\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\n\\nstring MAT =\\n \\\"        /*TAM*/\\\" +\\n \\\"        IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                SELECTEDMEASURE(),\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\" ,\\\" +\\n \\\"                    MAX ( \\\" + dateColumnWithTable + \\\"  ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"                \\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n\\n\\nstring MATlabel =\\n    \\\"        /*TAM*/\\\" +\\n \\\"        IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                \\\" + dateRangeMeasure.DaxObjectFullName + \\\",\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\" ,\\\" +\\n \\\"                    MAX ( \\\" + dateColumnWithTable + \\\"  ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"                \\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n\\nstring MATminus1 =\\n \\\"        /*TAM*/\\\" +\\n \\\"        IF (\\\" +\\n \\\"            [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                SELECTEDMEASURE(),\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\",\\\" +\\n \\\"                    LASTDATE( DATEADD( \\\" + dateColumnWithTable + \\\", - 1, YEAR ) ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n\\nstring MATminus1label = \\n    \\\"/*MAT-1*/\\\" +\\n \\\"        IF (\\\" +\\n \\\"            [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                \\\" + dateRangeMeasure.DaxObjectFullName + \\\",\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\",\\\" +\\n \\\"                    LASTDATE( DATEADD( \\\" + dateColumnWithTable + \\\", - 1, YEAR ) ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n;\\n\\nstring MATvsMATminus1 =\\n \\\"        /*MAT vs MAT-1*/\\n\\\" +\\n \\\"        VAR MAT = \\\" + MAT + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1 + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MAT ) || ISBLANK( MAT_1 ), BLANK(), MAT - MAT_1 )\\\";\\n\\nstring MATvsMATminus1label = \\\"/*MAT vs MAT-1*/\\\" +\\n    \\n \\\"        VAR MAT = \\\" + MATlabel + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MAT ) || ISBLANK( MAT_1 ), BLANK(), MAT & \\\" vs \\\" & MAT_1 )\\\";\\n\\nstring MATvsMATminus1pct =\\n \\\"        /*MAT vs MAT-1(%)*/\\\" +\\n \\\"        VAR MAT = \\\" + MAT + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1 + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF(\\\" +\\n \\\"                ISBLANK( MAT ) || ISBLANK( MAT_1 ),\\\" +\\n \\\"                BLANK(),\\\" +\\n \\\"                DIVIDE( MAT - MAT_1, MAT_1 )\\\" +\\n \\\"            )\\\";\\n\\nstring MATvsMATminus1pctlabel = \\\"/*MAT vs MAT-1 (%)*/\\\" +\\n                 \\\"        VAR MAT = \\\" + MATlabel + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MAT ) || ISBLANK( MAT_1 ), BLANK(), MAT & \\\" vs \\\" & MAT_1 & \\\" (%)\\\" )\\\"; \\n\\nstring MMT = String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, MAX( {1} ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MMTlabel = String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, MAX( {1} ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable, dateRangeMeasure.DaxObjectFullName);\\n\\nstring MMTminus1 = String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -1, MONTH ) ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MMTminus1label = \\\"/*MMT-1*/\\\" +\\n    String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -1, MONTH ) ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable, dateRangeMeasure.DaxObjectFullName);\\n\\nstring MMTvsMMTminus1 =\\n \\\"        /*MMT vs MMT-1*/\\n\\\" +\\n \\\"        VAR MMT = \\\" + MMT + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MMT ) || ISBLANK( MMT_1 ), BLANK(), MMT - MMT_1 )\\\";\\n\\nstring MMTvsMMTminus1label =\\n    \\\"        /*MMT vs MMT-1*/\\n\\\" +\\n \\\"        VAR MMT = \\\" + MMTlabel + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MMT ) || ISBLANK( MMT_1 ), BLANK(), MMT & \\\" vs \\\" & MMT_1 )\\\"; \\n\\nstring MMTvsMMTminus1pct =\\n \\\"        /*MMT vs MMT-1(%)*/\\\" +\\n \\\"        VAR MMT = \\\" + MMT + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF(\\\" +\\n \\\"                ISBLANK( MMT ) || ISBLANK( MMT_1 ),\\\" +\\n \\\"                BLANK(),\\\" +\\n \\\"                DIVIDE( MMT - MMT_1, MMT_1 )\\\" +\\n \\\"            )\\\";\\n\\nstring MMTvsMMTminus1pctlabel =\\n    \\\"        /*MMT vs MMT-1(%)*/\\\" +\\n \\\"        VAR MMT = \\\" + MMTlabel + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF( ISBLANK( MMT ) || ISBLANK( MMT_1 ), BLANK(), MMT & \\\" vs \\\" & MMT_1  & \\\" (%)\\\")\\\";\\n\\n\\n\\nstring MWT = String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, MAX( {1} ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MWTlabel = \\\"/*MWT*/\\\" +\\n    \\n    String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, MAX( {1} ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable,dateRangeMeasure.DaxObjectFullName); ;\\n\\nstring MWTminus1 = String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -7, DAY ) ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MWTminus1label = \\\"/*MWT-1*/\\\" +\\n    String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -7, DAY ) ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable, dateRangeMeasure.DaxObjectFullName);\\n\\nstring MWTvsMWTminus1 =\\n \\\"        /*MWT vs MWT-1*/\\n\\\" +\\n \\\"        VAR MWT = \\\" + MWT + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MWT ) || ISBLANK( MWT_1 ), BLANK(), MWT - MWT_1 )\\\";\\n\\nstring MWTvsMWTminus1label = \\n    \\\"        /*MWT vs MWT-1*/\\n\\\" +\\n \\\"        VAR MWT = \\\" + MWTlabel + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MWT ) || ISBLANK( MWT_1 ), BLANK(), MWT & \\\" vs \\\" & MWT_1 )\\\"; \\n\\nstring MWTvsMWTminus1pct =\\n \\\"        /*MWT vs MWT-1(%)*/\\\" +\\n \\\"        VAR MWT = \\\" + MWT + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF(\\\" +\\n \\\"                ISBLANK( MWT ) || ISBLANK( MWT_1 ),\\\" +\\n \\\"                BLANK(),\\\" +\\n \\\"                DIVIDE( MWT - MWT_1, MWT_1 )\\\" +\\n \\\"            )\\\";\\n\\nstring MWTvsMWTminus1pctlabel = \\n    \\\"/*MWT vs MWT-1 (%)*/\\\" +\\n \\\"        VAR MWT = \\\" + MWTlabel + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MWT ) || ISBLANK( MWT_1 ), BLANK(), MWT & \\\" vs \\\" & MWT_1 & \\\" (%)\\\")\\\";\\n\\n\\n\\nstring defFormatString = \\\"SELECTEDMEASUREFORMATSTRING()\\\";\\n\\n//if the flag expression is already present in the format string, do not change it, otherwise apply % format. \\nstring pctFormatString =\\n\\\"IF(\\\" +\\n\\\"\\n FIND( \\\" + flagExpression + \\\", SELECTEDMEASUREFORMATSTRING(), 1, - 1 ) <> -1,\\\" +\\n\\\"\\n SELECTEDMEASUREFORMATSTRING(),\\\" +\\n\\\"\\n \\\"#,##0.# %\\\"\\\" +\\n\\\"\\n)\\\";\\n\\n\\n//the order in the array also determines the ordinal position of the item    \\nstring[,] calcItems =\\n    {\\n{\\\"CY\\\",      CY,         defFormatString,    \\\"Current year\\\",             CYlabel},\\n{\\\"PY\\\",      PY,         defFormatString,    \\\"Previous year\\\",            PYlabel},\\n{\\\"YOY\\\",     YOY,        defFormatString,    \\\"Year-over-year\\\",           YOYlabel},\\n{\\\"YOY%\\\",    YOYpct,     pctFormatString,    \\\"Year-over-year%\\\",          YOYpctLabel},\\n{\\\"YTD\\\",     YTD,        defFormatString,    \\\"Year-to-date\\\",             YTDlabel},\\n{\\\"PYTD\\\",    PYTD,       defFormatString,    \\\"Previous year-to-date\\\",    PYTDlabel},\\n{\\\"YOYTD\\\",   YOYTD,      defFormatString,    \\\"Year-over-year-to-date\\\",   YOYTDlabel},\\n{\\\"YOYTD%\\\",  YOYTDpct,   pctFormatString,    \\\"Year-over-year-to-date%\\\",  YOYTDpctLabel},\\n{\\\"MAT\\\",     MAT,        defFormatString,    \\\"Moving Anual Total\\\",       MATlabel},\\n{\\\"MAT-1\\\",   MATminus1,  defFormatString,    \\\"Moving Anual Total -1 year\\\", MATminus1label},\\n{\\\"MAT vs MAT-1\\\", MATvsMATminus1, defFormatString, \\\"Moving Anual Total vs Moving Anual Total -1 year\\\", MATvsMATminus1label},\\n{\\\"MAT vs MAT-1(%)\\\", MATvsMATminus1pct, pctFormatString, \\\"Moving Anual Total vs Moving Anual Total -1 year (%)\\\", MATvsMATminus1pctlabel},\\n{\\\"MMT\\\",     MMT,        defFormatString,    \\\"Moving Monthly Total\\\",       MMTlabel},\\n{\\\"MMT-1\\\",   MMTminus1,  defFormatString,    \\\"Moving Monthly Total -1 month\\\", MMTminus1label},\\n{\\\"MMT vs MMT-1\\\", MMTvsMMTminus1, defFormatString, \\\"Moving Monthly Total vs Moving Monthly Total -1 month\\\", MMTvsMMTminus1label},\\n{\\\"MMT vs MMT-1(%)\\\", MMTvsMMTminus1pct, pctFormatString, \\\"Moving Monthly Total vs Moving Monthly Total -1 month (%)\\\", MMTvsMMTminus1pctlabel},\\n{\\\"MWT\\\",     MWT,        defFormatString,    \\\"Moving Weekly Total\\\",       MWTlabel},\\n{\\\"MWT-1\\\",   MWTminus1,  defFormatString,    \\\"Moving Weekly Total -1 week\\\", MWTminus1label},\\n{\\\"MWT vs MWT-1\\\", MWTvsMWTminus1, defFormatString, \\\"Moving Weekly Total vs Moving Weekly Total -1 week\\\", MWTvsMWTminus1label},\\n{\\\"MWT vs MWT-1(%)\\\", MWTvsMWTminus1pct, pctFormatString, \\\"Moving Weekly Total vs Moving Weekly Total -1 week (%)\\\", MWTvsMWTminus1pctlabel}\\n};\\n\\n\\nint j = 0;\\n\\n\\n//create calculation items for each calculation with formatstring and description\\nforeach (var cg in Model.CalculationGroups)\\n{\\n    if (cg.Name == calcGroupName)\\n    {\\n        for (j = 0; j < calcItems.GetLength(0); j++)\\n        {\\n\\n            string itemName = calcItems[j, 0];\\n\\n            string itemExpression = calcItemProtection.Replace(\\\"<CODE>\\\", calcItems[j, 1]);\\n            itemExpression = itemExpression.Replace(\\\"<LABELCODE>\\\", calcItems[j, 4]);\\n\\n            string itemFormatExpression = calcItemFormatProtection.Replace(\\\"<CODE>\\\", calcItems[j, 2]);\\n            itemFormatExpression = itemFormatExpression.Replace(\\\"<LABELCODEFORMATSTRING>\\\", \\\"\\\"\\\"\\\"\\\" & \\\" + calcItems[j, 4] + \\\" & \\\"\\\"\\\"\\\"\\\");\\n\\n            //if(calcItems[j,2] != defFormatString) {\\n            //    itemFormatExpression = calcItemFormatProtection.Replace(\\\"<CODE>\\\",calcItems[j,2]);\\n            //};\\n\\n            string itemDescription = calcItems[j, 3];\\n\\n            if (!cg.CalculationItems.Contains(itemName))\\n            {\\n                var nCalcItem = cg.AddCalculationItem(itemName, itemExpression);\\n                nCalcItem.FormatStringExpression = itemFormatExpression;\\n                nCalcItem.FormatDax();\\n                nCalcItem.Ordinal = j;\\n                nCalcItem.Description = itemDescription;\\n\\n            };\\n\\n\\n\\n\\n        };\\n\\n\\n    };\\n};",
      "Tooltip": "creates sum measures for selected columns",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\3. Calc Group\\Time Intelligence",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n                //\\n// CHANGELOG:\\n// '2021-05-01 / B.Agullo / \\n// '2021-05-17 / B.Agullo / added affected measure table\\n// '2021-06-19 / B.Agullo / data label measures\\n// '2021-07-10 / B.Agullo / added flag expression to avoid breaking already special format strings\\n// '2021-09-23 / B.Agullo / added code to prompt for parameters (code credit to Daniel Otykier) \\n// '2021-09-27 / B.Agullo / added code for general name \\n// '2022-10-11 / B.Agullo / added MMT and MWT calc item groups\\n// '2023-01-24 / B.Agullo / added Date Range Measure and completed dynamic label for existing items\\n//\\n// by Bernat Agulló\\n// twitter: @AgulloBernat\\n// www.esbrina-ba.com/blog\\n//\\n// REFERENCE: \\n// Check out https://www.esbrina-ba.com/time-intelligence-the-smart-way/ where this script is introduced\\n// \\n// FEATURED: \\n// this script featured in GuyInACube https://youtu.be/_j0iTUo2HT0\\n//\\n// THANKS:\\n// shout out to Johnny Winter for the base script and SQLBI for daxpatterns.com\\n\\n//select the measures that you want to be affected by the calculation group\\n//before running the script. \\n//measure names can also be included in the following array (no need to select them) \\nstring[] preSelectedMeasures = { }; //include measure names in double quotes, like: {\\\"Profit\\\",\\\"Total Cost\\\"};\\n\\n//AT LEAST ONE MEASURE HAS TO BE AFFECTED!, \\n//either by selecting it or typing its name in the preSelectedMeasures Variable\\n\\n\\n\\n//\\n// ----- do not modify script below this line -----\\n//\\n\\n\\nstring affectedMeasures = \\\"{\\\";\\n\\nint i = 0;\\n\\nfor (i = 0; i < preSelectedMeasures.GetLength(0); i++)\\n{\\n\\n    if (affectedMeasures == \\\"{\\\")\\n    {\\n        affectedMeasures = affectedMeasures + \\\"\\\"\\\" + preSelectedMeasures[i] + \\\"\\\"\\\";\\n    }\\n    else\\n    {\\n        affectedMeasures = affectedMeasures + \\\",\\\"\\\" + preSelectedMeasures[i] + \\\"\\\"\\\";\\n    };\\n\\n};\\n\\n\\nif (Selected.Measures.Count != 0)\\n{\\n\\n    foreach (var m in Selected.Measures)\\n    {\\n        if (affectedMeasures == \\\"{\\\")\\n        {\\n            affectedMeasures = affectedMeasures + \\\"\\\"\\\" + m.Name + \\\"\\\"\\\";\\n        }\\n        else\\n        {\\n            affectedMeasures = affectedMeasures + \\\",\\\"\\\" + m.Name + \\\"\\\"\\\";\\n        };\\n    };\\n};\\n\\n//check that by either method at least one measure is affected\\nif (affectedMeasures == \\\"{\\\")\\n{\\n    Error(\\\"No measures affected by calc group\\\");\\n    return;\\n};\\n\\nstring calcGroupName = String.Empty;\\nstring columnName = String.Empty;\\n\\nif (Model.CalculationGroups.Any(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\"))\\n{\\n    calcGroupName = Model.CalculationGroups.Where(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\").First().Name;\\n\\n}\\nelse\\n{\\n    calcGroupName = Interaction.InputBox(\\\"Provide a name for your Calc Group\\\", \\\"Calc Group Name\\\", \\\"Time Intelligence\\\", 740, 400);\\n};\\n\\nif (calcGroupName == String.Empty) return;\\n\\n\\nif (Model.CalculationGroups.Any(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\"))\\n{\\n    columnName = Model.Tables.Where(cg => cg.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Calc Group\\\").First().Columns.First().Name;\\n\\n}\\nelse\\n{\\n    columnName = Interaction.InputBox(\\\"Provide a name for your Calc Group Column\\\", \\\"Calc Group Column Name\\\", calcGroupName, 740, 400);\\n};\\n\\nif (columnName == String.Empty) return;\\n\\nstring affectedMeasuresTableName = String.Empty;\\n\\nif (Model.Tables.Any(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\"))\\n{\\n    affectedMeasuresTableName = Model.Tables.Where(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\").First().Name;\\n\\n}\\nelse\\n{\\n    affectedMeasuresTableName = Interaction.InputBox(\\\"Provide a name for affected measures table\\\", \\\"Affected Measures Table Name\\\", calcGroupName + \\\" Affected Measures\\\", 740, 400);\\n\\n};\\n\\nif (affectedMeasuresTableName ==String.Empty) return;\\n\\n\\nstring affectedMeasuresColumnName = String.Empty;\\n\\nif (Model.Tables.Any(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\"))\\n{\\n    affectedMeasuresColumnName = Model.Tables.Where(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\").First().Columns.First().Name;\\n\\n}\\nelse\\n{\\n    affectedMeasuresColumnName = Interaction.InputBox(\\\"Provide a name for affected measures column\\\", \\\"Affected Measures Table Column Name\\\", \\\"Measure\\\", 740, 400);\\n\\n};\\n\\nif (affectedMeasuresColumnName == String.Empty) return;\\n//string affectedMeasuresColumnName = \\\"Measure\\\"; \\n\\nstring labelAsValueMeasureName = \\\"Label as Value Measure\\\";\\nstring labelAsFormatStringMeasureName = \\\"Label as format string\\\";\\n\\n\\n// '2021-09-24 / B.Agullo / model object selection prompts! \\nvar factTable = SelectTable(label: \\\"Select your fact table\\\");\\nif (factTable == null) return;\\n\\nvar factTableDateColumn = SelectColumn(factTable.Columns, label: \\\"Select the main date column\\\");\\nif (factTableDateColumn == null) return;\\n\\nTable dateTableCandidate = null;\\n\\nif (Model.Tables.Any\\n    (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table\\\"\\n        || x.Name == \\\"Date\\\"\\n        || x.Name == \\\"Calendar\\\"))\\n{\\n    dateTableCandidate = Model.Tables.Where\\n        (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table\\\"\\n            || x.Name == \\\"Date\\\"\\n            || x.Name == \\\"Calendar\\\").First();\\n\\n};\\n\\nvar dateTable =\\n    SelectTable(\\n        label: \\\"Select your date table\\\",\\n        preselect: dateTableCandidate);\\n\\nif (dateTable == null)\\n{\\n    Error(\\\"You just aborted the script\\\");\\n    return;\\n}\\nelse\\n{\\n    dateTable.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Date Table\\\");\\n};\\n\\n\\nColumn dateTableDateColumnCandidate = null;\\n\\nif (dateTable.Columns.Any\\n            (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Date Column\\\" || x.Name == \\\"Date\\\"))\\n{\\n    dateTableDateColumnCandidate = dateTable.Columns.Where\\n        (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Date Column\\\" || x.Name == \\\"Date\\\").First();\\n};\\n\\nvar dateTableDateColumn =\\n    SelectColumn(\\n        dateTable.Columns,\\n        label: \\\"Select the date column\\\",\\n        preselect: dateTableDateColumnCandidate);\\n\\nif (dateTableDateColumn == null)\\n{\\n    Error(\\\"You just aborted the script\\\");\\n    return;\\n}\\nelse\\n{\\n    dateTableDateColumn.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Date Table Date Column\\\");\\n};\\n\\nColumn dateTableYearColumnCandidate = null;\\nif (dateTable.Columns.Any(x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Year Column\\\" || x.Name == \\\"Year\\\"))\\n{\\n    dateTable.Columns.Where\\n        (x => x.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Date Table Year Column\\\" || x.Name == \\\"Year\\\").First();\\n};\\n\\nvar dateTableYearColumn =\\n    SelectColumn(\\n        dateTable.Columns,\\n        label: \\\"Select the year column\\\",\\n        preselect: dateTableYearColumnCandidate);\\n\\nif (dateTableYearColumn == null)\\n{\\n    Error(\\\"You just abourted the script\\\");\\n    return;\\n}\\nelse\\n{\\n    dateTableYearColumn.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Date Table Year Column\\\");\\n};\\n\\n\\n//these names are for internal use only, so no need to be super-fancy, better stick to datpatterns.com model\\nstring ShowValueForDatesMeasureName = \\\"ShowValueForDates\\\";\\nstring dateWithSalesColumnName = \\\"DateWith\\\" + factTable.Name;\\n\\n// '2021-09-24 / B.Agullo / I put the names back to variables so I don't have to tough the script\\nstring factTableName = factTable.Name;\\nstring factTableDateColumnName = factTableDateColumn.Name;\\nstring dateTableName = dateTable.Name;\\nstring dateTableDateColumnName = dateTableDateColumn.Name;\\nstring dateTableYearColumnName = dateTableYearColumn.Name;\\n\\n// '2021-09-24 / B.Agullo / this is for internal use only so better leave it as is \\nstring flagExpression = \\\"UNICHAR( 8204 )\\\";\\n\\nstring calcItemProtection = \\\"<CODE>\\\"; //default value if user has selected no measures\\nstring calcItemFormatProtection = \\\"<CODE>\\\"; //default value if user has selected no measures\\n\\n// check if there's already an affected measure table\\nif (Model.Tables.Any(t => t.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Time Intel Affected Measures Table\\\"))\\n{\\n    //modifying an existing calculated table is not risk-free\\n    Info(\\\"Make sure to include measure names to the table \\\" + affectedMeasuresTableName);\\n}\\nelse\\n{\\n    // create calculated table containing all names of affected measures\\n    // this is why you need to enable \\n    if (affectedMeasures != \\\"{\\\")\\n    {\\n\\n        affectedMeasures = affectedMeasures + \\\"}\\\";\\n\\n        string affectedMeasureTableExpression =\\n            \\\"SELECTCOLUMNS(\\\" + affectedMeasures + \\\",\\\"\\\" + affectedMeasuresColumnName + \\\"\\\",[Value])\\\";\\n\\n        var affectedMeasureTable =\\n            Model.AddCalculatedTable(affectedMeasuresTableName, affectedMeasureTableExpression);\\n\\n        affectedMeasureTable.FormatDax();\\n        affectedMeasureTable.Description =\\n            \\\"Measures affected by \\\" + calcGroupName + \\\" calculation group.\\\";\\n\\n        affectedMeasureTable.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Affected Measures Table\\\");\\n\\n        // this causes error\\n        // affectedMeasureTable.Columns[affectedMeasuresColumnName].SetAnnotation(\\\"@AgulloBernat\\\",\\\"Time Intel Affected Measures Table Column\\\");\\n\\n        affectedMeasureTable.IsHidden = true;\\n\\n    };\\n};\\n\\n//if there where selected or preselected measures, prepare protection code for expresion and formatstring\\nstring affectedMeasuresValues = \\\"VALUES('\\\" + affectedMeasuresTableName + \\\"'[\\\" + affectedMeasuresColumnName + \\\"])\\\";\\n\\ncalcItemProtection =\\n    \\\"SWITCH(\\\" +\\n    \\\"   TRUE(),\\\" +\\n    \\\"   SELECTEDMEASURENAME() IN \\\" + affectedMeasuresValues + \\\",\\\" +\\n    \\\"   <CODE> ,\\\" +\\n    \\\"   ISSELECTEDMEASURE([\\\" + labelAsValueMeasureName + \\\"]),\\\" +\\n    \\\"   <LABELCODE> ,\\\" +\\n    \\\"   SELECTEDMEASURE() \\\" +\\n    \\\")\\\";\\n\\n\\ncalcItemFormatProtection =\\n    \\\"SWITCH(\\\" +\\n    \\\"   TRUE() ,\\\" +\\n    \\\"   SELECTEDMEASURENAME() IN \\\" + affectedMeasuresValues + \\\",\\\" +\\n    \\\"   <CODE> ,\\\" +\\n    \\\"   ISSELECTEDMEASURE([\\\" + labelAsFormatStringMeasureName + \\\"]),\\\" +\\n    \\\"   <LABELCODEFORMATSTRING> ,\\\" +\\n    \\\"   SELECTEDMEASUREFORMATSTRING() \\\" +\\n    \\\")\\\";\\n\\n\\nstring dateColumnWithTable = \\\"'\\\" + dateTableName + \\\"'[\\\" + dateTableDateColumnName + \\\"]\\\";\\nstring yearColumnWithTable = \\\"'\\\" + dateTableName + \\\"'[\\\" + dateTableYearColumnName + \\\"]\\\";\\nstring factDateColumnWithTable = \\\"'\\\" + factTableName + \\\"'[\\\" + factTableDateColumnName + \\\"]\\\";\\nstring dateWithSalesWithTable = \\\"'\\\" + dateTableName + \\\"'[\\\" + dateWithSalesColumnName + \\\"]\\\";\\nstring calcGroupColumnWithTable = \\\"'\\\" + calcGroupName + \\\"'[\\\" + columnName + \\\"]\\\";\\n\\n//check to see if a table with this name already exists\\n//if it doesnt exist, create a calculation group with this name\\nif (!Model.Tables.Contains(calcGroupName))\\n{\\n    var cg = Model.AddCalculationGroup(calcGroupName);\\n    cg.Description = \\\"Calculation group for time intelligence. Availability of data is taken from \\\" + factTableName + \\\".\\\";\\n    cg.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Calc Group\\\");\\n};\\n\\n//set variable for the calc group\\nTable calcGroup = Model.Tables[calcGroupName];\\n\\n//if table already exists, make sure it is a Calculation Group type\\nif (calcGroup.SourceType.ToString() != \\\"CalculationGroup\\\")\\n{\\n    Error(\\\"Table exists in Model but is not a Calculation Group. Rename the existing table or choose an alternative name for your Calculation Group.\\\");\\n    return;\\n};\\n\\n//adds the two measures that will be used for label as value, label as format string \\nvar labelAsValueMeasure = calcGroup.AddMeasure(labelAsValueMeasureName, \\\"\\\");\\nlabelAsValueMeasure.Description = \\\"Use this measure to show the year evaluated in tables\\\";\\n\\nvar labelAsFormatStringMeasure = calcGroup.AddMeasure(labelAsFormatStringMeasureName, \\\"0\\\");\\nlabelAsFormatStringMeasure.Description = \\\"Use this measure to show the year evaluated in charts\\\";\\n\\nMeasure dateRangeMeasure = calcGroup.AddMeasure(\\\"Date Range\\\", expression: @\\\"FORMAT( MIN( 'Date'[Date] ), \\\"\\\"d-MMM-yy\\\"\\\", \\\"\\\"en-US\\\"\\\" ) & \\\"\\\" to \\\"\\\"\\n        & FORMAT( MAX( 'Date'[Date] ), \\\"\\\"d-MMM-yy\\\"\\\", \\\"\\\"en-US\\\"\\\" )\\\");\\n\\ndateRangeMeasure.Description = \\\"This measure is used to display the dynamic label of Moving total calc items. Do not delete.\\\";\\n\\n\\n//by default the calc group has a column called Name. If this column is still called Name change this in line with specfied variable\\nif (calcGroup.Columns.Contains(\\\"Name\\\"))\\n{\\n    calcGroup.Columns[\\\"Name\\\"].Name = columnName;\\n\\n};\\n\\ncalcGroup.Columns[columnName].Description = \\\"Select value(s) from this column to apply time intelligence calculations.\\\";\\ncalcGroup.Columns[columnName].SetAnnotation(\\\"@AgulloBernat\\\", \\\"Time Intel Calc Group Column\\\");\\n\\n\\n//Only create them if not in place yet (reruns)\\nif (!Model.Tables[dateTableName].Columns.Any(C => C.GetAnnotation(\\\"@AgulloBernat\\\") == \\\"Date with Data Column\\\"))\\n{\\n    string DateWithSalesCalculatedColumnExpression =\\n        dateColumnWithTable + \\\" <= MAX ( \\\" + factDateColumnWithTable + \\\")\\\";\\n\\n    Column dateWithDataColumn = dateTable.AddCalculatedColumn(dateWithSalesColumnName, DateWithSalesCalculatedColumnExpression);\\n    dateWithDataColumn.SetAnnotation(\\\"@AgulloBernat\\\", \\\"Date with Data Column\\\");\\n};\\n\\nif (!Model.Tables[dateTableName].Measures.Any(M => M.Name == ShowValueForDatesMeasureName))\\n{\\n    string ShowValueForDatesMeasureExpression =\\n        \\\"VAR LastDateWithData = \\\" +\\n        \\\"    CALCULATE ( \\\" +\\n        \\\"        MAX (  \\\" + factDateColumnWithTable + \\\" ), \\\" +\\n        \\\"        REMOVEFILTERS () \\\" +\\n        \\\"    )\\\" +\\n        \\\"VAR FirstDateVisible = \\\" +\\n        \\\"    MIN ( \\\" + dateColumnWithTable + \\\" ) \\\" +\\n        \\\"VAR Result = \\\" +\\n        \\\"    FirstDateVisible <= LastDateWithData \\\" +\\n        \\\"RETURN \\\" +\\n        \\\"    Result \\\";\\n\\n    var ShowValueForDatesMeasure = dateTable.AddMeasure(ShowValueForDatesMeasureName, ShowValueForDatesMeasureExpression);\\n\\n    ShowValueForDatesMeasure.FormatDax();\\n};\\n\\n\\n\\n//defining expressions and formatstring for each calc item\\nstring CY =\\n    \\\"/*CY*/ \\\" +\\n    \\\"SELECTEDMEASURE()\\\";\\n\\nstring CYlabel =\\n    \\\"SELECTEDVALUE(\\\" + yearColumnWithTable + \\\")\\\";\\n\\n\\nstring PY =\\n    \\\"/*PY*/ \\\" +\\n    \\\"IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n    \\\"    CALCULATE ( \\\" +\\n    \\\"        \\\" + CY + \\\", \\\" +\\n    \\\"        CALCULATETABLE ( \\\" +\\n    \\\"            DATEADD ( \\\" + dateColumnWithTable + \\\" , -1, YEAR ), \\\" +\\n    \\\"            \\\" + dateWithSalesWithTable + \\\" = TRUE \\\" +\\n    \\\"        ) \\\" +\\n    \\\"    ) \\\" +\\n    \\\") \\\";\\n\\n\\nstring PYlabel =\\n    \\\"/*PY*/ \\\" +\\n    \\\"IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n    \\\"    CALCULATE ( \\\" +\\n    \\\"        \\\" + CYlabel + \\\", \\\" +\\n    \\\"        CALCULATETABLE ( \\\" +\\n    \\\"            DATEADD ( \\\" + dateColumnWithTable + \\\" , -1, YEAR ), \\\" +\\n    \\\"            \\\" + dateWithSalesWithTable + \\\" = TRUE \\\" +\\n    \\\"        ) \\\" +\\n    \\\"    ) \\\" +\\n    \\\") \\\";\\n\\n\\nstring YOY =\\n    \\\"/*YOY*/ \\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + CY + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PY + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\nstring YOYlabel =\\n    \\\"/*YOY*/ \\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + CYlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\nstring YOYpct =\\n    \\\"/*YOY%*/ \\\" +\\n   \\\"VAR ValueCurrentPeriod = \\\" + CY + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PY + \\\" \\\" +\\n    \\\"VAR CurrentMinusPreviousPeriod = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"DIVIDE ( \\\" +\\n    \\\"    CurrentMinusPreviousPeriod,\\\" +\\n    \\\"    ValuePreviousPeriod\\\" +\\n    \\\") \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\nstring YOYpctLabel =\\n    \\\"/*YOY%*/ \\\" +\\n   \\\"VAR ValueCurrentPeriod = \\\" + CYlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod & \\\" (%)\\\"\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\nstring YTD =\\n    \\\"/*YTD*/\\\" +\\n    \\\"IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"],\\\" +\\n    \\\"    CALCULATE (\\\" +\\n    \\\"        \\\" + CY + \\\",\\\" +\\n    \\\"        DATESYTD (\\\" + dateColumnWithTable + \\\" )\\\" +\\n    \\\"   )\\\" +\\n    \\\") \\\";\\n\\n\\nstring YTDlabel = CYlabel + \\\"& \\\" YTD\\\"\\\";\\n\\n\\nstring PYTD =\\n    \\\"/*PYTD*/\\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n    \\\"   CALCULATE ( \\\" +\\n    \\\"       \\\" + YTD + \\\",\\\" +\\n    \\\"    CALCULATETABLE ( \\\" +\\n    \\\"        DATEADD ( \\\" + dateColumnWithTable + \\\", -1, YEAR ), \\\" +\\n    \\\"       \\\" + dateWithSalesWithTable + \\\" = TRUE \\\" +\\n    \\\"       )\\\" +\\n    \\\"   )\\\" +\\n    \\\") \\\";\\n\\nstring PYTDlabel = PYlabel + \\\"& \\\" YTD\\\"\\\";\\n\\n\\nstring YOYTD =\\n    \\\"/*YOYTD*/\\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + YTD + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTD + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\n\\nstring YOYTDlabel =\\n    \\\"/*YOYTD*/\\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + YTDlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTDlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"   Result \\\";\\n\\n\\n\\nstring YOYTDpct =\\n    \\\"/*YOYTD%*/\\\" +\\n    \\\"VAR ValueCurrentPeriod = \\\" + YTD + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTD + \\\" \\\" +\\n    \\\"VAR CurrentMinusPreviousPeriod = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod - ValuePreviousPeriod\\\" +\\n    \\\" ) \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"DIVIDE ( \\\" +\\n    \\\"    CurrentMinusPreviousPeriod,\\\" +\\n    \\\"    ValuePreviousPeriod\\\" +\\n    \\\") \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\n\\nstring YOYTDpctLabel =\\n    \\\"/*YOY%*/ \\\" +\\n   \\\"VAR ValueCurrentPeriod = \\\" + YTDlabel + \\\" \\\" +\\n    \\\"VAR ValuePreviousPeriod = \\\" + PYTDlabel + \\\" \\\" +\\n    \\\"VAR Result = \\\" +\\n    \\\"IF ( \\\" +\\n    \\\"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \\\" +\\n    \\\"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod & \\\" (%)\\\"\\\" +\\n    \\\" ) \\\" +\\n    \\\"RETURN \\\" +\\n    \\\"  Result\\\";\\n\\n\\nstring MAT =\\n \\\"        /*TAM*/\\\" +\\n \\\"        IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                SELECTEDMEASURE(),\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\" ,\\\" +\\n \\\"                    MAX ( \\\" + dateColumnWithTable + \\\"  ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"                \\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n\\n\\nstring MATlabel =\\n    \\\"        /*TAM*/\\\" +\\n \\\"        IF (\\\" +\\n    \\\"    [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                \\\" + dateRangeMeasure.DaxObjectFullName + \\\",\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\" ,\\\" +\\n \\\"                    MAX ( \\\" + dateColumnWithTable + \\\"  ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"                \\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n\\nstring MATminus1 =\\n \\\"        /*TAM*/\\\" +\\n \\\"        IF (\\\" +\\n \\\"            [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                SELECTEDMEASURE(),\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\",\\\" +\\n \\\"                    LASTDATE( DATEADD( \\\" + dateColumnWithTable + \\\", - 1, YEAR ) ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n\\nstring MATminus1label = \\n    \\\"/*MAT-1*/\\\" +\\n \\\"        IF (\\\" +\\n \\\"            [\\\" + ShowValueForDatesMeasureName + \\\"], \\\" +\\n \\\"            CALCULATE (\\\" +\\n \\\"                \\\" + dateRangeMeasure.DaxObjectFullName + \\\",\\\" +\\n \\\"                DATESINPERIOD (\\\" +\\n \\\"                    \\\" + dateColumnWithTable + \\\",\\\" +\\n \\\"                    LASTDATE( DATEADD( \\\" + dateColumnWithTable + \\\", - 1, YEAR ) ),\\\" +\\n \\\"                    -1,\\\" +\\n \\\"                    YEAR\\\" +\\n \\\"                )\\\" +\\n \\\"            )\\\" +\\n \\\"        )\\\";\\n;\\n\\nstring MATvsMATminus1 =\\n \\\"        /*MAT vs MAT-1*/\\n\\\" +\\n \\\"        VAR MAT = \\\" + MAT + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1 + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MAT ) || ISBLANK( MAT_1 ), BLANK(), MAT - MAT_1 )\\\";\\n\\nstring MATvsMATminus1label = \\\"/*MAT vs MAT-1*/\\\" +\\n    \\n \\\"        VAR MAT = \\\" + MATlabel + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MAT ) || ISBLANK( MAT_1 ), BLANK(), MAT & \\\" vs \\\" & MAT_1 )\\\";\\n\\nstring MATvsMATminus1pct =\\n \\\"        /*MAT vs MAT-1(%)*/\\\" +\\n \\\"        VAR MAT = \\\" + MAT + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1 + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF(\\\" +\\n \\\"                ISBLANK( MAT ) || ISBLANK( MAT_1 ),\\\" +\\n \\\"                BLANK(),\\\" +\\n \\\"                DIVIDE( MAT - MAT_1, MAT_1 )\\\" +\\n \\\"            )\\\";\\n\\nstring MATvsMATminus1pctlabel = \\\"/*MAT vs MAT-1 (%)*/\\\" +\\n                 \\\"        VAR MAT = \\\" + MATlabel + \\\"\\n\\\" +\\n \\\"        VAR MAT_1 =\\\" + MATminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MAT ) || ISBLANK( MAT_1 ), BLANK(), MAT & \\\" vs \\\" & MAT_1 & \\\" (%)\\\" )\\\"; \\n\\nstring MMT = String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, MAX( {1} ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MMTlabel = String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, MAX( {1} ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable, dateRangeMeasure.DaxObjectFullName);\\n\\nstring MMTminus1 = String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -1, MONTH ) ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MMTminus1label = \\\"/*MMT-1*/\\\" +\\n    String.Format(\\n        @\\\"/*MMT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -1, MONTH ) ), -1, MONTH ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable, dateRangeMeasure.DaxObjectFullName);\\n\\nstring MMTvsMMTminus1 =\\n \\\"        /*MMT vs MMT-1*/\\n\\\" +\\n \\\"        VAR MMT = \\\" + MMT + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MMT ) || ISBLANK( MMT_1 ), BLANK(), MMT - MMT_1 )\\\";\\n\\nstring MMTvsMMTminus1label =\\n    \\\"        /*MMT vs MMT-1*/\\n\\\" +\\n \\\"        VAR MMT = \\\" + MMTlabel + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MMT ) || ISBLANK( MMT_1 ), BLANK(), MMT & \\\" vs \\\" & MMT_1 )\\\"; \\n\\nstring MMTvsMMTminus1pct =\\n \\\"        /*MMT vs MMT-1(%)*/\\\" +\\n \\\"        VAR MMT = \\\" + MMT + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF(\\\" +\\n \\\"                ISBLANK( MMT ) || ISBLANK( MMT_1 ),\\\" +\\n \\\"                BLANK(),\\\" +\\n \\\"                DIVIDE( MMT - MMT_1, MMT_1 )\\\" +\\n \\\"            )\\\";\\n\\nstring MMTvsMMTminus1pctlabel =\\n    \\\"        /*MMT vs MMT-1(%)*/\\\" +\\n \\\"        VAR MMT = \\\" + MMTlabel + \\\"\\n\\\" +\\n \\\"        VAR MMT_1 =\\\" + MMTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF( ISBLANK( MMT ) || ISBLANK( MMT_1 ), BLANK(), MMT & \\\" vs \\\" & MMT_1  & \\\" (%)\\\")\\\";\\n\\n\\n\\nstring MWT = String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, MAX( {1} ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MWTlabel = \\\"/*MWT*/\\\" +\\n    \\n    String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, MAX( {1} ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable,dateRangeMeasure.DaxObjectFullName); ;\\n\\nstring MWTminus1 = String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( SELECTEDMEASURE( ), DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -7, DAY ) ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable);\\n\\nstring MWTminus1label = \\\"/*MWT-1*/\\\" +\\n    String.Format(\\n        @\\\"/*MWT*/\\nIF(\\n[{0}],\\nCALCULATE( {2}, DATESINPERIOD( {1}, LASTDATE( DATEADD( {1}, -7, DAY ) ), -7, DAY ) )\\n)\\\", ShowValueForDatesMeasureName, dateColumnWithTable, dateRangeMeasure.DaxObjectFullName);\\n\\nstring MWTvsMWTminus1 =\\n \\\"        /*MWT vs MWT-1*/\\n\\\" +\\n \\\"        VAR MWT = \\\" + MWT + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MWT ) || ISBLANK( MWT_1 ), BLANK(), MWT - MWT_1 )\\\";\\n\\nstring MWTvsMWTminus1label = \\n    \\\"        /*MWT vs MWT-1*/\\n\\\" +\\n \\\"        VAR MWT = \\\" + MWTlabel + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MWT ) || ISBLANK( MWT_1 ), BLANK(), MWT & \\\" vs \\\" & MWT_1 )\\\"; \\n\\nstring MWTvsMWTminus1pct =\\n \\\"        /*MWT vs MWT-1(%)*/\\\" +\\n \\\"        VAR MWT = \\\" + MWT + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1 + \\\"\\n\\\" +\\n \\\"        RETURN\\\" +\\n \\\"            IF(\\\" +\\n \\\"                ISBLANK( MWT ) || ISBLANK( MWT_1 ),\\\" +\\n \\\"                BLANK(),\\\" +\\n \\\"                DIVIDE( MWT - MWT_1, MWT_1 )\\\" +\\n \\\"            )\\\";\\n\\nstring MWTvsMWTminus1pctlabel = \\n    \\\"/*MWT vs MWT-1 (%)*/\\\" +\\n \\\"        VAR MWT = \\\" + MWTlabel + \\\"\\n\\\" +\\n \\\"        VAR MWT_1 =\\\" + MWTminus1label + \\\"\\n\\\" +\\n \\\"        RETURN \\n\\\" +\\n \\\"            IF( ISBLANK( MWT ) || ISBLANK( MWT_1 ), BLANK(), MWT & \\\" vs \\\" & MWT_1 & \\\" (%)\\\")\\\";\\n\\n\\n\\nstring defFormatString = \\\"SELECTEDMEASUREFORMATSTRING()\\\";\\n\\n//if the flag expression is already present in the format string, do not change it, otherwise apply % format. \\nstring pctFormatString =\\n\\\"IF(\\\" +\\n\\\"\\n FIND( \\\" + flagExpression + \\\", SELECTEDMEASUREFORMATSTRING(), 1, - 1 ) <> -1,\\\" +\\n\\\"\\n SELECTEDMEASUREFORMATSTRING(),\\\" +\\n\\\"\\n \\\"#,##0.# %\\\"\\\" +\\n\\\"\\n)\\\";\\n\\n\\n//the order in the array also determines the ordinal position of the item    \\nstring[,] calcItems =\\n    {\\n{\\\"CY\\\",      CY,         defFormatString,    \\\"Current year\\\",             CYlabel},\\n{\\\"PY\\\",      PY,         defFormatString,    \\\"Previous year\\\",            PYlabel},\\n{\\\"YOY\\\",     YOY,        defFormatString,    \\\"Year-over-year\\\",           YOYlabel},\\n{\\\"YOY%\\\",    YOYpct,     pctFormatString,    \\\"Year-over-year%\\\",          YOYpctLabel},\\n{\\\"YTD\\\",     YTD,        defFormatString,    \\\"Year-to-date\\\",             YTDlabel},\\n{\\\"PYTD\\\",    PYTD,       defFormatString,    \\\"Previous year-to-date\\\",    PYTDlabel},\\n{\\\"YOYTD\\\",   YOYTD,      defFormatString,    \\\"Year-over-year-to-date\\\",   YOYTDlabel},\\n{\\\"YOYTD%\\\",  YOYTDpct,   pctFormatString,    \\\"Year-over-year-to-date%\\\",  YOYTDpctLabel},\\n{\\\"MAT\\\",     MAT,        defFormatString,    \\\"Moving Anual Total\\\",       MATlabel},\\n{\\\"MAT-1\\\",   MATminus1,  defFormatString,    \\\"Moving Anual Total -1 year\\\", MATminus1label},\\n{\\\"MAT vs MAT-1\\\", MATvsMATminus1, defFormatString, \\\"Moving Anual Total vs Moving Anual Total -1 year\\\", MATvsMATminus1label},\\n{\\\"MAT vs MAT-1(%)\\\", MATvsMATminus1pct, pctFormatString, \\\"Moving Anual Total vs Moving Anual Total -1 year (%)\\\", MATvsMATminus1pctlabel},\\n{\\\"MMT\\\",     MMT,        defFormatString,    \\\"Moving Monthly Total\\\",       MMTlabel},\\n{\\\"MMT-1\\\",   MMTminus1,  defFormatString,    \\\"Moving Monthly Total -1 month\\\", MMTminus1label},\\n{\\\"MMT vs MMT-1\\\", MMTvsMMTminus1, defFormatString, \\\"Moving Monthly Total vs Moving Monthly Total -1 month\\\", MMTvsMMTminus1label},\\n{\\\"MMT vs MMT-1(%)\\\", MMTvsMMTminus1pct, pctFormatString, \\\"Moving Monthly Total vs Moving Monthly Total -1 month (%)\\\", MMTvsMMTminus1pctlabel},\\n{\\\"MWT\\\",     MWT,        defFormatString,    \\\"Moving Weekly Total\\\",       MWTlabel},\\n{\\\"MWT-1\\\",   MWTminus1,  defFormatString,    \\\"Moving Weekly Total -1 week\\\", MWTminus1label},\\n{\\\"MWT vs MWT-1\\\", MWTvsMWTminus1, defFormatString, \\\"Moving Weekly Total vs Moving Weekly Total -1 week\\\", MWTvsMWTminus1label},\\n{\\\"MWT vs MWT-1(%)\\\", MWTvsMWTminus1pct, pctFormatString, \\\"Moving Weekly Total vs Moving Weekly Total -1 week (%)\\\", MWTvsMWTminus1pctlabel}\\n};\\n\\n\\nint j = 0;\\n\\n\\n//create calculation items for each calculation with formatstring and description\\nforeach (var cg in Model.CalculationGroups)\\n{\\n    if (cg.Name == calcGroupName)\\n    {\\n        for (j = 0; j < calcItems.GetLength(0); j++)\\n        {\\n\\n            string itemName = calcItems[j, 0];\\n\\n            string itemExpression = calcItemProtection.Replace(\\\"<CODE>\\\", calcItems[j, 1]);\\n            itemExpression = itemExpression.Replace(\\\"<LABELCODE>\\\", calcItems[j, 4]);\\n\\n            string itemFormatExpression = calcItemFormatProtection.Replace(\\\"<CODE>\\\", calcItems[j, 2]);\\n            itemFormatExpression = itemFormatExpression.Replace(\\\"<LABELCODEFORMATSTRING>\\\", \\\"\\\"\\\"\\\"\\\" & \\\" + calcItems[j, 4] + \\\" & \\\"\\\"\\\"\\\"\\\");\\n\\n            //if(calcItems[j,2] != defFormatString) {\\n            //    itemFormatExpression = calcItemFormatProtection.Replace(\\\"<CODE>\\\",calcItems[j,2]);\\n            //};\\n\\n            string itemDescription = calcItems[j, 3];\\n\\n            if (!cg.CalculationItems.Contains(itemName))\\n            {\\n                var nCalcItem = cg.AddCalculationItem(itemName, itemExpression);\\n                nCalcItem.FormatStringExpression = itemFormatExpression;\\n                nCalcItem.FormatDax();\\n                nCalcItem.Ordinal = j;\\n                nCalcItem.Description = itemDescription;\\n\\n            };\\n\\n\\n\\n\\n        };\\n\\n\\n    };\\n};",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\4. Check\\Alert Summary Measures",
      "Enabled": "true",
      "Execute": "/* \\n//2022-06-29 B.Agullo \\n//\\n// BLOG POST on the actual use case and how to use it\\n// https://www.esbrina-ba.com/data-validation-with-power-bi/\\n//\\n//Selecting a table will select the table for the overall summary measures.\\n//The script will go through all the tables of the model and \\n//for each table if will scan the measures contained in the display folder that starts with \\\"Checks \\\" \\n// and will generate a new display folder in the same table\\n//called \\\"Titles \\\" followed by the original display folder name\\n//where all measures original measures will have an equivalent measure\\n//with the expression [original measure] & Original measure name\\n//also another displayfolder called \\\"summary measures\\\" \\n//will contain 2 measures. One is the sum of all selected measures \\n//the other one is the concatenation of all the titles measures\\n//Useful when setting alarms when one measure is greater than 0\\n//on the original selected table it will store the sum of all the summary measures of the model\\n//read the blog post for a more clear idea of how to use it.\\n*/\\n\\n/*customize if needed*/\\nstring dynamicMeasureCustomActionName = \\\"Dynamic Measure\\\"; \\n\\nstring alertDisplayFolderPrefix = \\\"Checks \\\";\\nstring allMeasuresPrefix = \\\"Alerts Value \\\";\\nstring allTitleMeasuresPrefix = \\\"Alerts Descriptions \\\";\\nstring allMeasureCountPrefix = \\\"Alert Count \\\"; \\n\\nstring summaryMeasuresDisplayFolder = \\\"Summary Measures\\\";\\nstring titleMeasuresPrefix = \\\"Title \\\";\\nstring titleMeasuresDisplayFolderPrefix = \\\"Titles of \\\";\\n\\n\\n\\nstring overallAlertValueMeasureName = \\\"Total Alerts Value\\\";\\nstring overallAlertDescMeasureName = \\\"Total Alerts Description\\\";\\nstring overallAlertCountMeasureName = \\\"Total Alert Count\\\"; \\n\\n\\n/*do not modify below this line*/\\n\\n\\n\\nstring annotationKey = \\\"@AgulloBernat\\\";\\nstring annotationValue = \\\"Alert Summary Sum Measure\\\";\\nstring annotationValueDesc = \\\"Alert Description Concat Measure\\\";\\nstring annotationValueCount = \\\"Alert Count Measure\\\";\\n\\n\\nif(Selected.Tables.Count() != 1)\\n{\\n    Error(\\\"Select a table for overall alert measures and try again.\\\");\\n    return;\\n}\\n\\n//create calculation group without any calc items\\nModel.CustomAction(dynamicMeasureCustomActionName); \\n\\n/* go through each table ... */\\nforeach (Table t in Model.Tables)\\n{\\n\\n    string displayFolderName = \\\"\\\";\\n    string titleMeasuresDisplayFolderName = \\\"\\\";\\n    string allMeasureExpression = \\\"\\\";\\n    string allMeasureName = \\\"\\\";\\n    string allTitleMeasureExpression = \\\"\\\"\\\"\\\";\\n    string allTitleMeasureName = \\\"\\\";\\n    string allMeasureCountExpression = \\\"\\\";\\n    string allMeasureCountName = \\\"\\\"; \\n\\n\\n    /*check if there's any measure to process*/\\n    List<Measure> alertMeasures = new List<Measure>();\\n    foreach (Measure m in t.Measures)\\n    {\\n        if (m.DisplayFolder.Length >= alertDisplayFolderPrefix.Length)\\n        {\\n            if( m.DisplayFolder.Substring(0, alertDisplayFolderPrefix.Length) == alertDisplayFolderPrefix)\\n            {\\n\\n                alertMeasures.Add(m);\\n            }\\n        }\\n    }\\n\\n    /* if any was found */\\n    if (alertMeasures.Count() > 0) { \\n\\n        /*for each measure found, process it */\\n        foreach (Measure m in alertMeasures) { \\n\\n            if (displayFolderName == \\\"\\\")\\n            {\\n                displayFolderName = m.DisplayFolder;\\n                titleMeasuresDisplayFolderName = titleMeasuresDisplayFolderPrefix + displayFolderName;\\n            };\\n\\n            string titleMeasureName = titleMeasuresPrefix + m.Name;\\n            string titleMeasureExpression = m.DaxObjectName + \\\" & \\\" \\\" + m.Name + \\\"\\\"\\\";\\n\\n            foreach (Measure delM in Model.AllMeasures.Where(x => x.Name == titleMeasureName).ToList())\\n            {\\n                delM.Delete();\\n            };\\n\\n            Measure titleM = m.Table.AddMeasure(\\n                name: titleMeasureName,\\n                expression: titleMeasureExpression,\\n                displayFolder: titleMeasuresDisplayFolderName\\n            );\\n            \\n            titleM.FormatDax();\\n\\n            allMeasureExpression = allMeasureExpression + Environment.NewLine + \\\" + \\\" + m.DaxObjectName;\\n\\n            allTitleMeasureExpression =\\n                allTitleMeasureExpression\\n                    + \\\" & IF(\\\" + m.DaxObjectFullName + \\\"> 0,\\\"\\n                    + titleM.DaxObjectFullName + \\\" & UNICHAR(10))\\\";\\n                    \\n            //m.CustomAction(\\\"Dynamic Measure\\\");\\n            \\n            allMeasureCountExpression = \\n                allMeasureCountExpression \\n                + Environment.NewLine + \\\" + IF(\\\" + m.DaxObjectFullName + \\\"> 0, 1)\\\";\\n                \\n        };\\n\\n        /*now create the summary measures for that table*/\\n        allMeasureName = allMeasuresPrefix + t.Name;\\n        allTitleMeasureName = allTitleMeasuresPrefix + t.Name;\\n        allMeasureCountName = allMeasureCountPrefix + t.Name;\\n\\n        foreach (Measure delM in Model.AllMeasures.Where(x => x.Name == allMeasureName).ToList())\\n        {\\n            delM.Delete();\\n        };\\n\\n        foreach (Measure delM in Model.AllMeasures.Where(x => x.Name == allTitleMeasureName).ToList())\\n        {\\n            delM.Delete();\\n        };\\n        \\n        foreach (Measure delM in Model.AllMeasures.Where(x => x.Name == allMeasureCountName).ToList())\\n        {\\n            delM.Delete();\\n        };\\n\\n        Measure measure =\\n            t.AddMeasure(\\n                name: allMeasureName,\\n                expression: allMeasureExpression,\\n                displayFolder: summaryMeasuresDisplayFolder);\\n\\n        measure.SetAnnotation(annotationKey, annotationValue);\\n        measure.FormatString = \\\"#,##0\\\";\\n        measure.FormatDax();\\n        measure.CustomAction(dynamicMeasureCustomActionName);\\n        \\n        Measure titleMeasure =\\n            t.AddMeasure(\\n                name: allTitleMeasureName,\\n                expression: allTitleMeasureExpression,\\n                displayFolder: summaryMeasuresDisplayFolder);\\n\\n        titleMeasure.SetAnnotation(annotationKey, annotationValueDesc);\\n        titleMeasure.FormatDax(); \\n        titleMeasure.CustomAction(dynamicMeasureCustomActionName); \\n        \\n        Measure countMeasure =\\n            t.AddMeasure(\\n                name: allMeasureCountName,\\n                expression: allMeasureCountExpression,\\n                displayFolder: summaryMeasuresDisplayFolder);\\n\\n        countMeasure.SetAnnotation(annotationKey, annotationValueCount);\\n        countMeasure.FormatDax(); \\n        countMeasure.CustomAction(dynamicMeasureCustomActionName); \\n        \\n    }\\n}\\n\\n\\n/*once we processed all tables, time to create overall summary measures*/\\n/*clean up*/\\nif (Model.AllMeasures.Any(x => x.Name == overallAlertValueMeasureName))\\n{\\n    Model.AllMeasures.Where(\\n        x => x.Name == overallAlertValueMeasureName\\n        ).First().Delete();\\n\\n}\\n\\nif (Model.AllMeasures.Any(\\n    x => x.Name == overallAlertDescMeasureName))\\n{\\n    Model.AllMeasures.Where(\\n        x => x.Name == overallAlertDescMeasureName\\n        ).First().Delete();\\n\\n}\\n\\nif (Model.AllMeasures.Any(\\n    x => x.Name == overallAlertCountMeasureName))\\n{\\n    Model.AllMeasures.Where(\\n        x => x.Name == overallAlertCountMeasureName\\n        ).First().Delete();\\n\\n}\\n\\n\\n/*regenerate if necessary*/\\nif (Model.AllMeasures.Any(\\n    x => x.DisplayFolder.IndexOf(summaryMeasuresDisplayFolder) == 0\\n           & x.Name.IndexOf(allMeasuresPrefix) == 0))\\n{\\n\\n    string overallAlertValueMeasureExpression = \\\"\\\";\\n    string overallAlertDescMeasureExpression = \\\"\\\"\\\"\\\";\\n    string overallAlertCountMeasureExpression = \\\"\\\";\\n\\n    foreach (Measure m in\\n        Model.AllMeasures.Where(\\n            x => x.DisplayFolder.IndexOf(summaryMeasuresDisplayFolder) == 0\\n                & x.Name.IndexOf(allMeasuresPrefix) == 0))\\n    {\\n\\n\\n        overallAlertValueMeasureExpression =\\n            overallAlertValueMeasureExpression\\n                + \\\" + \\\" + m.DaxObjectFullName;\\n\\n    }\\n\\n    foreach (Measure m in\\n         Model.AllMeasures.Where(\\n             x => x.DisplayFolder.IndexOf(summaryMeasuresDisplayFolder) == 0\\n                 & x.Name.IndexOf(allTitleMeasuresPrefix) == 0))\\n    {\\n        overallAlertDescMeasureExpression =\\n            overallAlertDescMeasureExpression\\n                + \\\" & IF(LEN(\\\" +m.DaxObjectFullName +\\\")>0, UNICHAR(10) & UNICHAR(10) & \\\"********** \\\" \\n                    + m.Table.Name + \\\"*********\\\" & UNICHAR(10) & \\\" +  m.DaxObjectFullName + \\\")\\\";\\n\\n    }\\n\\n\\n\\n    foreach (Measure m in\\n         Model.AllMeasures.Where(\\n             x => x.DisplayFolder.IndexOf(summaryMeasuresDisplayFolder) == 0\\n                 & x.Name.IndexOf(allMeasureCountPrefix) == 0))\\n    {\\n        overallAlertCountMeasureExpression =\\n            overallAlertCountMeasureExpression\\n                + \\\" + \\\" + m.DaxObjectFullName;\\n\\n    }\\n\\n\\n    Measure alertValueMeasure = Selected.Table.AddMeasure(overallAlertValueMeasureName, overallAlertValueMeasureExpression);\\n    alertValueMeasure.FormatDax();\\n    alertValueMeasure.FormatString =\\\"#,##0\\\";\\n\\n    Measure alertDescMeasure = Selected.Table.AddMeasure(overallAlertDescMeasureName, overallAlertDescMeasureExpression);\\n    alertDescMeasure.FormatDax();\\n\\n    Measure alertCountMeasure =  Selected.Table.AddMeasure(overallAlertCountMeasureName, overallAlertCountMeasureExpression);\\n    alertCountMeasure.FormatDax();\\n    alertCountMeasure.FormatString =\\\"#,##0\\\";\\n\\n\\n};",
      "Tooltip": "",
      "ValidContexts": "Table"
    },
    {
      "Name": "8. Bernats Repo\\4. Check\\Data problems button",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n\\n\\n// '2021-05-26 / B.Agullo / \\n// '2021-10-13 / B.Agullo / dynamic parameters for one-click operation\\n// by Bernat Agulló\\n// www.esbrina-ba.com\\n\\n// Instructions: \\n// select the measures that counts the number of \\\"data problems\\\" the model has and then run the script or as macro\\n// when adding macro select measure context for execution \\n\\n//\\n// ----- do not modify script below this line -----\\n//\\n\\n\\nif (Selected.Measures.Count != 1) {\\n    Error(\\\"Select one and only one measure\\\");\\n    return;\\n};\\n\\nstring navigationTableName = Interaction.InputBox(\\\"Provide a name for navigation measures table name\\\", \\\"Navigation Table Name\\\", \\\"Navigation\\\", 740, 400);\\nif(navigationTableName == \\\"\\\") return;\\n\\nif(Model.Tables.Any(Table => Table.Name == navigationTableName)) {\\n    Error(navigationTableName + \\\" already exists!\\\");\\n    return; \\n};\\n\\nstring buttonTextMeasureName = Interaction.InputBox(\\\"Name for your button text measure\\\", \\\"Button text measure name\\\", \\\"Button Text\\\", 740, 400);\\nif(buttonTextMeasureName == \\\"\\\") return;\\n\\nstring buttonTextPattern = Interaction.InputBox(\\\"Provide a pattern for your button text\\\", \\\"Button text pattern (# = no. of problems)\\\", \\\"There are # data problems\\\", 740, 400);\\nif(buttonTextPattern == \\\"\\\") return;\\n\\nstring buttonBackgroundMeasureName = Interaction.InputBox(\\\"Name your button background measure\\\", \\\"Button Background Measure\\\", \\\"Button Background\\\", 740, 400);\\nif(buttonBackgroundMeasureName == \\\"\\\") return;\\n\\nstring buttonNavigationMeasureName = Interaction.InputBox(\\\"Name your button navigation measure\\\", \\\"Button Navigation Measure\\\", \\\"Button Navigation\\\", 740, 400);\\nif(buttonNavigationMeasureName == \\\"\\\") return;\\n\\nstring thereAreDataProblemsMeasureName = Interaction.InputBox(\\\"Name your data problems flag measure\\\", \\\"Data problems Flag Measure\\\", \\\"There are Data Problems\\\", 740, 400);\\nif(thereAreDataProblemsMeasureName == \\\"\\\") return;\\n\\nstring dataProblemsSheetName = Interaction.InputBox(\\\"Where are the data problems detail?\\\", \\\"Data problems Sheet\\\", \\\"Data Problems\\\", 740, 400);\\nif(dataProblemsSheetName == \\\"\\\") return;\\n\\n\\n// colors will be created if not present\\nstring buttonColorMeasureNameWhenVisible = Interaction.InputBox(\\\"What's the color measure name when the button is visible?\\\", \\\"Visible color measure name\\\", \\\"Warning Color\\\", 740, 400);\\nif(buttonColorMeasureNameWhenVisible == \\\"\\\") return;\\n\\nstring buttonColorMeasureValueWhenVisible = Interaction.InputBox(\\\"What's the color code of \\\" + buttonColorMeasureNameWhenVisible + \\\"?\\\", \\\"Visible color code\\\", \\\"#D64554\\\", 740, 400);\\nif(buttonColorMeasureValueWhenVisible == \\\"\\\") return;\\nbuttonColorMeasureValueWhenVisible = \\\"\\\"\\\" + buttonColorMeasureValueWhenVisible + \\\"\\\"\\\";\\n\\nstring buttonColorMeasureNameWhenInvisible = Interaction.InputBox(\\\"What's the color measure name when button is invisible?\\\", \\\"Invisible color measure name\\\", \\\"Report Background Color\\\", 740, 400);\\nif(buttonColorMeasureNameWhenInvisible == \\\"\\\") return;\\n\\nstring buttonColorMeasureValueWhenInvisible = Interaction.InputBox(\\\"What's the color code of \\\" + buttonColorMeasureNameWhenInvisible + \\\"?\\\", \\\"Invisible color measure name\\\", \\\"#FFFFFF\\\", 740, 400);\\nif(buttonColorMeasureValueWhenInvisible == \\\"\\\") return;\\nbuttonColorMeasureValueWhenInvisible = \\\"\\\"\\\" + buttonColorMeasureValueWhenInvisible + \\\"\\\"\\\";\\n\\n\\n// prepare array to iterate on new measure names \\nstring[] newMeasureNames = \\n    {\\n        buttonTextMeasureName,\\n        buttonBackgroundMeasureName,\\n        buttonNavigationMeasureName,\\n        thereAreDataProblemsMeasureName\\n    };\\n\\n\\n// check none of the new measure names already exist as such \\nforeach(string measureName in newMeasureNames) {\\n    if(Model.AllMeasures.Any(Measure => Measure.Name == measureName)) {\\n        Error(measureName + \\\" already exists!\\\"); \\n        return;\\n    };\\n};\\n    \\nvar dataProblemsMeasure = Selected.Measure; \\n\\nstring navigationTableExpression = \\n    \\\"FILTER({1},[Value] = 0)\\\";\\n\\nvar navigationTable = \\n    Model.AddCalculatedTable(navigationTableName,navigationTableExpression);\\n    \\nnavigationTable.FormatDax(); \\nnavigationTable.Description = \\n    \\\"Table to store the measures for the dynamic button that leads to the data problems sheet\\\";\\n\\nnavigationTable.IsHidden = true;     \\n\\nif(!Model.AllMeasures.Any(Measure => Measure.Name == buttonColorMeasureNameWhenVisible)) {\\n    navigationTable.AddMeasure(buttonColorMeasureNameWhenVisible,buttonColorMeasureValueWhenVisible);\\n};\\n\\nif(!Model.AllMeasures.Any(Measure => Measure.Name == buttonColorMeasureNameWhenInvisible)) {\\n    navigationTable.AddMeasure(buttonColorMeasureNameWhenInvisible,\\\"\\\"#FFFFFF00\\\"\\\");\\n};\\n\\nstring thereAreDataProblemsMeasureExpression = \\n    \\\"[\\\" + dataProblemsMeasure.Name + \\\"]>0\\\";\\n\\nvar thereAreDataProblemsMeasure = \\n    navigationTable.AddMeasure(\\n        thereAreDataProblemsMeasureName,\\n        thereAreDataProblemsMeasureExpression\\n    );\\n\\nthereAreDataProblemsMeasure.FormatDax(); \\nthereAreDataProblemsMeasure.Description = \\\"Boolean measure, if true, the button leading to data problems sheet should show (internal use only)\\\" ;\\n \\nstring buttonBackgroundMeasureExpression = \\n    \\\"VAR colorCode = \\\" + \\n    \\\"    IF(\\\" + \\n    \\\"        [\\\" + thereAreDataProblemsMeasureName + \\\"],\\\" + \\n    \\\"        [\\\" + buttonColorMeasureNameWhenVisible + \\\"],\\\" + \\n    \\\"        [\\\" + buttonColorMeasureNameWhenInvisible + \\\"]\\\" + \\n    \\\"    )\\\" + \\n    \\\"RETURN \\\" + \\n    \\\"    FORMAT(colorCode,\\\"@\\\")\\\";\\n    \\nvar buttonBackgroundMeasure = \\n    navigationTable.AddMeasure(\\n        buttonBackgroundMeasureName,\\n        buttonBackgroundMeasureExpression\\n    );\\n    \\nbuttonBackgroundMeasure.FormatDax(); \\nbuttonBackgroundMeasure.Description = \\\"Use this measure for conditional formatting of button background\\\";  \\n\\nstring buttonNavigationMeasureExpression = \\n    \\\"IF(\\\" + \\n    \\\"    [\\\" + thereAreDataProblemsMeasureName + \\\"],\\\" + \\n    \\\"    \\\"\\\" + dataProblemsSheetName + \\\"\\\",\\\" + \\n    \\\"    \\\"\\\"\\\" + \\n    \\\")\\\";\\n\\nvar buttonNavigationMeasure = \\n    navigationTable.AddMeasure(\\n        buttonNavigationMeasureName,\\n        buttonNavigationMeasureExpression\\n    );\\n    \\nbuttonNavigationMeasure.FormatDax(); \\nbuttonNavigationMeasure.Description = \\\"Use this measure for conditional page navigation\\\";  \\n\\nstring buttonTextMeasureExpression = \\n    \\\"IF(\\\" + \\n    \\\"    [\\\" + thereAreDataProblemsMeasureName + \\\"],\\\" + \\n    \\\"    SUBSTITUTE(\\\"\\\" + buttonTextPattern + \\\"\\\",\\\"#\\\",FORMAT([\\\" + dataProblemsMeasure.Name + \\\"],0)),\\\" + \\n    \\\"    \\\"\\\"\\\" + \\n    \\\")\\\";    \\n    \\nvar buttonTextMeasure = \\n    navigationTable.AddMeasure(\\n        buttonTextMeasureName,\\n        buttonTextMeasureExpression\\n    );\\n    \\nbuttonTextMeasure.FormatDax(); \\nbuttonTextMeasure.Description = \\\"Use this measure for dynamic button text\\\";  \\n\\n//dataProblemsMeasure.MoveTo(navigationTable);\\n    ",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\4. Check\\DATA PROBLEMS",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\n\\n\\n// '2021-05-26 / B.Agullo / \\n// '2021-10-13 / B.Agullo / dynamic parameters for one-click operation\\n// '2022-10-18 / B.Agullo / Bug fixes\\n// by Bernat Agulló\\n// www.esbrina-ba.com\\n\\n// Instructions: \\n// select the measures that counts the number of \\\"data problems\\\" the model has and then run the script or as macro\\n// when adding macro select measure context for execution \\n\\n//\\n// ----- do not modify script below this line -----\\n//\\n\\n\\nif (Selected.Measures.Count != 1) {\\n    Error(\\\"Select one and only one measure\\\");\\n    return;\\n};\\n\\nstring navigationTableName = Interaction.InputBox(\\\"Provide a name for navigation measures table name\\\", \\\"Navigation Table Name\\\", \\\"Navigation\\\", 740, 400);\\nif(navigationTableName == \\\"\\\") return;\\n\\nif(Model.Tables.Any(Table => Table.Name == navigationTableName)) {\\n    Error(navigationTableName + \\\" already exists!\\\");\\n    return; \\n};\\n\\nstring buttonTextMeasureName = Interaction.InputBox(\\\"Name for your button text measure\\\", \\\"Button text measure name\\\", \\\"Button Text\\\", 740, 400);\\nif(buttonTextMeasureName == \\\"\\\") return;\\n\\nstring buttonTextPattern = Interaction.InputBox(\\\"Provide a pattern for your button text\\\", \\\"Button text pattern (# = no. of problems)\\\", \\\"There are # data problems\\\", 740, 400);\\nif(buttonTextPattern == \\\"\\\") return;\\n\\nstring buttonBackgroundMeasureName = Interaction.InputBox(\\\"Name your button background measure\\\", \\\"Button Background Measure\\\", \\\"Button Background\\\", 740, 400);\\nif(buttonBackgroundMeasureName == \\\"\\\") return;\\n\\nstring buttonNavigationMeasureName = Interaction.InputBox(\\\"Name your button navigation measure\\\", \\\"Button Navigation Measure\\\", \\\"Button Navigation\\\", 740, 400);\\nif(buttonNavigationMeasureName == \\\"\\\") return;\\n\\nstring thereAreDataProblemsMeasureName = Interaction.InputBox(\\\"Name your data problems flag measure\\\", \\\"Data problems Flag Measure\\\", \\\"There are Data Problems\\\", 740, 400);\\nif(thereAreDataProblemsMeasureName == \\\"\\\") return;\\n\\nstring dataProblemsSheetName = Interaction.InputBox(\\\"Where are the data problems detail?\\\", \\\"Data problems Sheet\\\", \\\"Data Problems\\\", 740, 400);\\nif(dataProblemsSheetName == \\\"\\\") return;\\n\\n\\n// colors will be created if not present\\nstring buttonColorMeasureNameWhenVisible = Interaction.InputBox(\\\"What's the color measure name when the button is visible?\\\", \\\"Visible color measure name\\\", \\\"Warning Color\\\", 740, 400);\\nif(buttonColorMeasureNameWhenVisible == \\\"\\\") return;\\n\\nstring buttonColorMeasureValueWhenVisible = Interaction.InputBox(\\\"What's the color code of \\\" + buttonColorMeasureNameWhenVisible + \\\"?\\\", \\\"Visible color code\\\", \\\"#D64554\\\", 740, 400);\\nif(buttonColorMeasureValueWhenVisible == \\\"\\\") return;\\nbuttonColorMeasureValueWhenVisible = \\\"\\\"\\\" + buttonColorMeasureValueWhenVisible + \\\"\\\"\\\";\\n\\nstring buttonColorMeasureNameWhenInvisible = Interaction.InputBox(\\\"What's the color measure name when button is invisible?\\\", \\\"Invisible color measure name\\\", \\\"Report Background Color\\\", 740, 400);\\nif(buttonColorMeasureNameWhenInvisible == \\\"\\\") return;\\n\\nstring buttonColorMeasureValueWhenInvisible = Interaction.InputBox(\\\"What's the color code of \\\" + buttonColorMeasureNameWhenInvisible + \\\"?\\\", \\\"Invisible color measure name\\\", \\\"#FFFFFF\\\", 740, 400);\\nif(buttonColorMeasureValueWhenInvisible == \\\"\\\") return;\\nbuttonColorMeasureValueWhenInvisible = \\\"\\\"\\\" + buttonColorMeasureValueWhenInvisible + \\\"\\\"\\\";\\n\\n\\n// prepare array to iterate on new measure names \\nstring[] newMeasureNames = \\n    {\\n        buttonTextMeasureName,\\n        buttonBackgroundMeasureName,\\n        buttonNavigationMeasureName,\\n        thereAreDataProblemsMeasureName\\n    };\\n\\n\\n// check none of the new measure names already exist as such \\nforeach(string measureName in newMeasureNames) {\\n    if(Model.AllMeasures.Any(Measure => Measure.Name == measureName)) {\\n        Error(measureName + \\\" already exists!\\\"); \\n        return;\\n    };\\n};\\n    \\nvar dataProblemsMeasure = Selected.Measure; \\n\\nstring navigationTableExpression = \\n    \\\"FILTER({1},[Value] = 0)\\\";\\n\\nvar navigationTable = \\n    Model.AddCalculatedTable(navigationTableName,navigationTableExpression);\\n    \\nnavigationTable.FormatDax(); \\nnavigationTable.Description = \\n    \\\"Table to store the measures for the dynamic button that leads to the data problems sheet\\\";\\n\\nnavigationTable.IsHidden = true;     \\n\\nif(!Model.AllMeasures.Any(Measure => Measure.Name == buttonColorMeasureNameWhenVisible)) {\\n    navigationTable.AddMeasure(buttonColorMeasureNameWhenVisible,buttonColorMeasureValueWhenVisible);\\n};\\n\\nif(!Model.AllMeasures.Any(Measure => Measure.Name == buttonColorMeasureNameWhenInvisible)) {\\n    navigationTable.AddMeasure(buttonColorMeasureNameWhenInvisible,\\\"\\\"#FFFFFF00\\\"\\\");\\n};\\n\\nstring thereAreDataProblemsMeasureExpression = \\n    \\\"[\\\" + dataProblemsMeasure.Name + \\\"]>0\\\";\\n\\nvar thereAreDataProblemsMeasure = \\n    navigationTable.AddMeasure(\\n        thereAreDataProblemsMeasureName,\\n        thereAreDataProblemsMeasureExpression\\n    );\\n\\nthereAreDataProblemsMeasure.FormatDax(); \\nthereAreDataProblemsMeasure.Description = \\\"Boolean measure, if true, the button leading to data problems sheet should show (internal use only)\\\" ;\\n \\nstring buttonBackgroundMeasureExpression = \\n    \\\"VAR colorCode = \\\" + \\n    \\\"    IF(\\\" + \\n    \\\"        [\\\" + thereAreDataProblemsMeasureName + \\\"],\\\" + \\n    \\\"        [\\\" + buttonColorMeasureNameWhenVisible + \\\"],\\\" + \\n    \\\"        [\\\" + buttonColorMeasureNameWhenInvisible + \\\"]\\\" + \\n    \\\"    )\\\" + \\n    \\\"RETURN \\\" + \\n    \\\"    FORMAT(colorCode,\\\"@\\\")\\\";\\n    \\nvar buttonBackgroundMeasure = \\n    navigationTable.AddMeasure(\\n        buttonBackgroundMeasureName,\\n        buttonBackgroundMeasureExpression\\n    );\\n    \\nbuttonBackgroundMeasure.FormatDax(); \\nbuttonBackgroundMeasure.Description = \\\"Use this measure for conditional formatting of button background\\\";  \\n\\nstring buttonNavigationMeasureExpression = \\n    \\\"IF(\\\" + \\n    \\\"    [\\\" + thereAreDataProblemsMeasureName + \\\"],\\\" + \\n    \\\"    \\\"\\\" + dataProblemsSheetName + \\\"\\\",\\\" + \\n    \\\"    \\\"\\\"\\\" + \\n    \\\")\\\";\\n\\nvar buttonNavigationMeasure = \\n    navigationTable.AddMeasure(\\n        buttonNavigationMeasureName,\\n        buttonNavigationMeasureExpression\\n    );\\n    \\nbuttonNavigationMeasure.FormatDax(); \\nbuttonNavigationMeasure.Description = \\\"Use this measure for conditional page navigation\\\";  \\n\\nstring buttonTextMeasureExpression = \\n    \\\"IF(\\\" + \\n    \\\"    [\\\" + thereAreDataProblemsMeasureName + \\\"],\\\" + \\n    \\\"    SUBSTITUTE(\\\"\\\" + buttonTextPattern + \\\"\\\",\\\"#\\\",FORMAT([\\\" + dataProblemsMeasure.Name + \\\"],0)),\\\" + \\n    \\\"    \\\"\\\"\\\" + \\n    \\\")\\\";    \\n    \\nvar buttonTextMeasure = \\n    navigationTable.AddMeasure(\\n        buttonTextMeasureName,\\n        buttonTextMeasureExpression\\n    );\\n    \\nbuttonTextMeasure.FormatDax(); \\nbuttonTextMeasure.Description = \\\"Use this measure for dynamic button text\\\";  \\n\\n//dataProblemsMeasure.MoveTo(navigationTable);\\n    ",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\4. Check\\HAS DATA",
      "Enabled": "true",
      "Execute": "// '2023-06-08 / B.Agullo / Creates a measure to show only relevant items in slicers for a fact table.\\n\\n\\nif(Selected.Tables.Count() == 0)\\n{\\n    Error(\\\"Select at least one table and try again\\\");\\n    return;\\n}\\nforeach(Table table in Selected.Tables)\\n{\\n    string measureExpression = String.Format(@\\\"INT(NOT ISEMPTY({0}))\\\",table.DaxObjectFullName);\\n    string measureName = table.Name + \\\" has data\\\";\\n    string measureDescription = String.Format(@\\\"Returns 1 if {0} has visible rows in filter context, 0 otherwise. Can be used to show only relevant slicer items.\\\", table.DaxObjectFullName);\\n    Measure measure = table.AddMeasure(measureName, measureExpression);\\n    measure.Description = measureDescription;\\n}",
      "Tooltip": "creates sum measures for selected columns",
      "ValidContexts": "Table"
    },
    {
      "Name": "8. Bernats Repo\\4. Check\\Referential Integrity Cambra",
      "Enabled": "true",
      "Execute": "//Select the desired table to store all data quality measures\\n//See https://www.esbrina-ba.com/easy-management-of-referential-integrity/\\n// 2023-02-15 / B.Agulló / Added useRelationship in the expression to check also inactive relationships\\n// 2023-12-22 / B.Agulló / Added suggestions by Ed Hansberry \\nstring overallCounterExpression = \\\"\\\";\\nstring overallCounterName = \\\"Total Unmapped Items\\\";\\nstring overallDetailExpression = \\\"\\\"\\\"\\\";\\nstring overallDetailName = \\\"Data Problems\\\";\\nTable tableToStoreMeasures = Selected.Tables.First();\\nforeach (var r in Model.Relationships)\\n{\\n    bool isOneToMany =\\n        r.FromCardinality == RelationshipEndCardinality.One\\n        && r.ToCardinality == RelationshipEndCardinality.Many;\\n    bool isManyToOne =\\n        r.FromCardinality == RelationshipEndCardinality.Many\\n        && r.ToCardinality == RelationshipEndCardinality.One;\\n    Column manyColumn = null as Column;\\n    Column oneColumn = null as Column;\\n    bool isOneToManyOrManyToOne = true;\\n    if (isOneToMany)\\n    {\\n        manyColumn = r.ToColumn;\\n        oneColumn = r.FromColumn;\\n    }\\n    else if (isManyToOne)\\n    {\\n        manyColumn = r.FromColumn;\\n        oneColumn = r.ToColumn;\\n    }\\n    else\\n    {\\n        isOneToManyOrManyToOne = false;\\n    }\\n    if (isOneToManyOrManyToOne)\\n    {\\n        string orphanCountExpression =\\n            \\\"CALCULATE(\\\"\\n                + \\\"SUMX(VALUES(\\\" + manyColumn.DaxObjectFullName + \\\"),1),\\\"\\n                + \\\"ISBLANK(\\\" + oneColumn.DaxObjectFullName + \\\"),\\\"\\n                + \\\"USERELATIONSHIP(\\\" + manyColumn.DaxObjectFullName + \\\",\\\" + oneColumn.DaxObjectFullName + \\\"),\\\"\\n                + \\\"ALLEXCEPT(\\\" + manyColumn.Table.DaxObjectFullName + \\\",\\\" + manyColumn.DaxObjectFullName + \\\")\\\"\\n            + \\\")\\\";\\n        string orphanMeasureName =\\n            manyColumn.Name + \\\" not mapped in \\\" + manyColumn.Table.Name;\\n        Measure newCounter = tableToStoreMeasures.AddMeasure(name: orphanMeasureName, expression: orphanCountExpression, displayFolder: \\\"_Data quality Measures\\\");\\n        newCounter.FormatString = \\\"#,##0\\\";\\n        newCounter.FormatDax();\\n        string orphanTableTitleMeasureExpression = \\\"FORMAT(\\\" + newCounter.DaxObjectFullName +\\\",\\\"\\\" + newCounter.FormatString + \\\"\\\") & \\\" \\\" + newCounter.Name + \\\"\\\"\\\";\\n        string orphanTableTitleMeasureName = newCounter.Name + \\\" Title\\\";\\n        Measure newTitle = tableToStoreMeasures.AddMeasure(name: orphanTableTitleMeasureName, expression: orphanTableTitleMeasureExpression, displayFolder: \\\"_Data quality Titles\\\");\\n        newTitle.FormatDax();\\n        overallCounterExpression = overallCounterExpression + \\\"+\\\" + newCounter.DaxObjectFullName;\\n        overallDetailExpression = overallDetailExpression\\n                + \\\" & IF(\\\" + newCounter.DaxObjectFullName + \\\"> 0,\\\"\\n                            + newTitle.DaxObjectFullName + \\\" & UNICHAR(10))\\\";\\n    };\\n};\\nMeasure counter = tableToStoreMeasures.AddMeasure(name: overallCounterName, expression: overallCounterExpression);\\ncounter.FormatString = \\\"#,##0\\\";\\ncounter.FormatDax();\\nMeasure descr = tableToStoreMeasures.AddMeasure(name: overallDetailName, expression: overallDetailExpression);\\ndescr.FormatDax();",
      "Tooltip": "",
      "ValidContexts": "Table"
    },
    {
      "Name": "8. Bernats Repo\\4. Check\\Referential integrity",
      "Enabled": "true",
      "Execute": "//Select the desired table to store all data quality measures\\n\\n\\nstring overallCounterExpression = \\\"\\\";\\nstring overallCounterName = \\\"Total Unmapped Items\\\";\\n\\nstring overallDetailExpression = \\\"\\\"\\\"\\\";\\nstring overallDetailName = \\\"Data Problems\\\";\\n\\nTable tableToStoreMeasures = Selected.Tables.First();\\n\\nforeach (var r in Model.Relationships)\\n{\\n\\n\\n    bool isOneToMany =\\n        r.FromCardinality == RelationshipEndCardinality.One\\n        & r.ToCardinality == RelationshipEndCardinality.Many;\\n\\n    bool isManyToOne =\\n        r.FromCardinality == RelationshipEndCardinality.Many\\n        & r.ToCardinality == RelationshipEndCardinality.One;\\n\\n    Column manyColumn = null as Column;\\n    Column oneColumn = null as Column;\\n    bool isOneToManyOrManyToOne = true;\\n    if (isOneToMany)\\n    {\\n        manyColumn = r.ToColumn;\\n        oneColumn = r.FromColumn;\\n\\n    }\\n    else if (isManyToOne)\\n    {\\n        manyColumn = r.FromColumn;\\n        oneColumn = r.ToColumn;\\n    }\\n    else\\n    {\\n        isOneToManyOrManyToOne = false;\\n    }\\n\\n    if (isOneToManyOrManyToOne)\\n    {\\n\\n        string orphanCountExpression =\\n            \\\"CALCULATE(\\\"\\n                + \\\"SUMX(VALUES(\\\" + manyColumn.DaxObjectFullName + \\\"),1),\\\"\\n                + oneColumn.DaxObjectFullName + \\\" = BLANK()\\\"\\n            + \\\")\\\";\\n        string orphanMeasureName =\\n            manyColumn.Name + \\\" not mapped in \\\" + manyColumn.Table.Name;\\n\\n        Measure newCounter = tableToStoreMeasures.AddMeasure(name: orphanMeasureName, expression: orphanCountExpression,displayFolder:\\\"_Data quality Measures\\\");\\n        newCounter.FormatDax(); \\n\\n        string orphanTableTitleMeasureExpression = newCounter.DaxObjectFullName + \\\" & \\\" \\\" + newCounter.Name + \\\"\\\"\\\";\\n        string orphanTableTitleMeasureName = newCounter.Name + \\\" Title\\\";\\n\\n        Measure newTitle = tableToStoreMeasures.AddMeasure(name: orphanTableTitleMeasureName, expression: orphanTableTitleMeasureExpression, displayFolder: \\\"_Data quality Titles\\\");\\n        newTitle.FormatDax();\\n\\n        overallCounterExpression = overallCounterExpression + \\\"+\\\" + newCounter.DaxObjectFullName;\\n        overallDetailExpression = overallDetailExpression\\n                + \\\" & IF(\\\" + newCounter.DaxObjectFullName + \\\"> 0,\\\"\\n                            + newTitle.DaxObjectFullName + \\\" & UNICHAR(10))\\\";\\n\\n    };\\n\\n};\\n\\nMeasure counter = tableToStoreMeasures.AddMeasure(name: overallCounterName, expression: overallCounterExpression);\\ncounter.FormatDax();\\n\\n\\nMeasure descr = tableToStoreMeasures.AddMeasure(name: overallDetailName, expression: overallDetailExpression);\\ndescr.FormatDax();",
      "Tooltip": "",
      "ValidContexts": "Table"
    },
    {
      "Name": "8. Bernats Repo\\5. Excel\\Export to Excel",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"Microsoft.Office.Interop.Excel\\\"\\n\\nusing System.IO;\\nusing Excel = Microsoft.Office.Interop.Excel;\\n\\nstring filePath = @\\\"G:\\Mi unidad\\CONFERENCIES POWER BI\\2022-09-30 Power BI Day Barcelona - Automatizando con Tabular Editor\\Descriptions.txt\\\"; // Update this to be the desired location of the Descriptions file\\nstring excelFilePath = filePath + \\\".xlsx\\\"; \\nstring textFilePath = filePath + \\\".txt\\\";\\nstring excelTabName = \\\"ModelDescriptions\\\";\\nvar sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"HiddenFlag\\\" + '\\t' + \\\"Description\\\" + newline);\\n\\nforeach (var t in Model.Tables.Where(a => a.ObjectType.ToString() != \\\"CalculationGroupTable\\\").OrderBy(a => a.Name).ToList())\\n{\\n    string tableName = t.Name;\\n    string tableDesc = t.Description;\\n    string tblhid;\\n    \\n    if (t.IsHidden)\\n    {\\n        tblhid = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        tblhid = \\\"No\\\";\\n    }\\n    \\n    sb.Append(tableName + '\\t' + \\\"Table\\\" + '\\t' + tableName + '\\t' + tblhid + '\\t' + tableDesc + newline);\\n    \\n    foreach (var o in t.Columns.OrderBy(a => a.Name).ToList())\\n    {\\n        string objName = o.Name;\\n        string objDesc = o.Description;\\n        string objhid;\\n    \\n        if (o.IsHidden)\\n        {\\n            objhid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            objhid = \\\"No\\\";\\n        }\\n        \\n        sb.Append(tableName + '\\t' + \\\"Column\\\" + '\\t' + objName + '\\t' + objhid + '\\t' + objDesc + newline);        \\n    }\\n    \\n    foreach (var o in t.Measures.OrderBy(a => a.Name).ToList())\\n    {\\n        string objName = o.Name;\\n        string objDesc = o.Description;\\n        string objhid;\\n    \\n        if (o.IsHidden)\\n        {\\n            objhid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            objhid = \\\"No\\\";\\n        }\\n        \\n        sb.Append(tableName + '\\t' + \\\"Measure\\\" + '\\t' + objName + '\\t' + objhid + '\\t' + objDesc + newline);        \\n    }\\n    \\n    foreach (var o in t.Hierarchies.OrderBy(a => a.Name).ToList())\\n    {\\n        string objName = o.Name;\\n        string objDesc = o.Description;\\n        string objhid;\\n    \\n        if (o.IsHidden)\\n        {\\n            objhid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            objhid = \\\"No\\\";\\n        }\\n        \\n        sb.Append(tableName + '\\t' + \\\"Hierarchy\\\" + '\\t' + objName + '\\t' + objhid + '\\t' + objDesc + newline);        \\n    }    \\n}\\n\\nforeach (var o in Model.CalculationGroups.OrderBy(a => a.Name).ToList())\\n{\\n    string tableName = o.Name;\\n    string tableDesc = o.Description;\\n    string tblhid;\\n    \\n    if (o.IsHidden)\\n    {\\n        tblhid = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        tblhid = \\\"No\\\";\\n    }\\n    \\n    sb.Append(tableName + '\\t' + \\\"Calculation Group\\\" + '\\t' + tableName + '\\t' + tblhid + '\\t' + tableDesc + newline);  \\n    \\n    foreach (var i in o.CalculationItems.ToList())\\n    {        \\n        string objName = i.Name;\\n        string objDesc = i.Description;\\n        \\n        sb.Append(tableName + '\\t' + \\\"Calculation Item\\\" + '\\t' + objName + '\\t' + \\\"No\\\" + '\\t' + objDesc + newline);        \\n    }\\n}\\n\\n// Delete existing text/Excel files\\ntry\\n{\\n    File.Delete(textFilePath);\\n    File.Delete(excelFilePath);\\n}\\ncatch\\n{\\n}\\n\\n// Save to text file\\nSaveFile(textFilePath, sb.ToString());\\n\\n// Save to Excel file\\nvar excelApp = new Excel.Application();\\nexcelApp.Visible = false;\\nexcelApp.DisplayAlerts = false;\\nexcelApp.Workbooks.OpenText(textFilePath, 65001, 1, Excel.XlTextParsingType.xlDelimited, Excel.XlTextQualifier.xlTextQualifierNone, false, true, false, false, false, false, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, true, Type.Missing);\\n\\nvar wb = excelApp.ActiveWorkbook;\\nvar ws = wb.ActiveSheet as Excel.Worksheet;\\nws.Name = excelTabName;\\nwb.SaveAs(excelFilePath, Excel.XlFileFormat.xlWorkbookDefault, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Excel.XlSaveAsAccessMode.xlNoChange);\\n\\n// Close workbook and quit Excel program\\nwb.Close();\\nexcelApp.Quit();\\nSystem.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);\\n\\n// Delete text file as it is no longer necessary\\ntry\\n{\\n    File.Delete(textFilePath);\\n}\\ncatch\\n{\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "8. Bernats Repo\\5. Excel\\Import From Excel",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"Microsoft.Office.Interop.Excel\\\"\\n\\nusing System.IO;\\nusing Excel = Microsoft.Office.Interop.Excel;\\n\\nstring filePath = @\\\"G:\\Mi unidad\\CONFERENCIES POWER BI\\2022-09-30 Power BI Day Barcelona - Automatizando con Tabular Editor\\Descriptions.txt\\\"; // Update this to be the location of the Descriptions file\\nstring excelFilePath = filePath + \\\".xlsx\\\"; \\nstring excelTabName = \\\"ModelDescriptions\\\";\\n\\n// Open Excel\\nvar excelApp = new Excel.Application();\\nexcelApp.Visible = false;\\nexcelApp.DisplayAlerts = false;\\n\\n// Open Workbook, Worksheet\\nvar wb = excelApp.Workbooks.Open(excelFilePath); \\nvar ws = wb.Worksheets[excelTabName] as Excel.Worksheet;\\n\\n// Count rows and columns\\nExcel.Range xlRange = ws.UsedRange;\\n\\nint rowCount = xlRange.Rows.Count;\\n\\nfor (int r = 2; r <= rowCount; r++)\\n{\\n    string tableName = (string)(ws.Cells[r,1] as Excel.Range).Text.ToString();\\n    string objType = (string)(ws.Cells[r,2] as Excel.Range).Text.ToString();\\n    string objName = (string)(ws.Cells[r,3] as Excel.Range).Text.ToString();\\n    string desc = (string)(ws.Cells[r,5] as Excel.Range).Text.ToString();\\n    \\n    if (objType == \\\"Table\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Column\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Columns[objName].Description = desc;\\n        }\\n        catch\\n        {            \\n        }\\n    }\\n    else if (objType == \\\"Measure\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Measures[objName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Hierarchy\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Hierarchies[objName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Calculation Group\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Calculation Item\\\")\\n    {\\n        try\\n        {\\n            (Model.Tables[tableName] as CalculationGroupTable).CalculationItems[objName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n}\\n\\n// Close workbook and quit Excel program\\nwb.Close();\\nexcelApp.Quit();\\nSystem.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "8. Bernats Repo\\6. Format\\NUMBER FORMAT",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing System.Windows.Forms;\\n\\nusing Microsoft.VisualBasic;\\nstring cgAnnotationLabel = \\\"MadeWith\\\";\\nstring cgAnnotationValue = \\\"NumberFormatCalcGroup\\\";\\nif (Selected.Measures.Count == 0)\\n{\\n    Error(\\\"Select one or more measures and try again\\\");\\n    return;\\n};\\nstring measureList = string.Join(\\\",\\\", Selected.Measures.Select(x => x.DaxObjectFullName));\\nstring measureListName = string.Join(\\\",\\\", Selected.Measures.Select(x => x.Name));\\nCalculationGroupTable cg = null as CalculationGroupTable;\\nif (Model.Tables.Any(t => t.GetAnnotation(cgAnnotationLabel) == cgAnnotationValue)) \\n{ \\n    cg = (CalculationGroupTable) Model.Tables.Where(t => t.GetAnnotation(cgAnnotationLabel) == cgAnnotationValue).First();\\n} \\nelse\\n{\\n    string calcGroupName = Fx.GetNameFromUser(\\\"Choose name for the number format Calculation Group\\\", \\\"Atention\\\", \\\"Number Format\\\");\\n    if (calcGroupName == \\\"\\\") return; // in case user cancelled\\n    cg = Model.AddCalculationGroup(name: calcGroupName);\\n    cg.Columns[0].Name = cg.Name;\\n    cg.SetAnnotation(cgAnnotationLabel, cgAnnotationValue);\\n}\\nList<string> formatList = new List<string>();\\nformatList.Add(\\\"in milions\\\");\\nformatList.Add(\\\"in thousands\\\");\\nstring selectedFormat = Fx.ChooseString(formatList);\\nif (selectedFormat == null) return;\\nstring formatString = \\\"\\\";\\nswitch (selectedFormat)\\n{\\n    case \\\"in milions\\\":\\n        // code block\\n        formatString = @\\\"\\\"\\\"#,##0,,.0\\\"\\\"\\\";\\n        break;\\n    case \\\"in thousands\\\":\\n        // code block\\n        formatString = @\\\"\\\"\\\"#,##0,.0\\\"\\\"\\\";\\n        break;\\n    default:\\n        // code block\\n        break;\\n}\\nstring ciValueExpression = \\\"SELECTEDMEASURE()\\\";\\nstring ciFormatStringExpression =\\n    string.Format(\\n        @\\\"IF(\\n            ISSELECTEDMEASURE({0}),\\n            {1},\\n            SELECTEDMEASUREFORMATSTRING()\\n        )\\\",\\n        measureList,\\n        formatString\\n    );\\nstring ciName = string.Format(\\\"{1} ({0})\\\", measureListName, selectedFormat);\\nCalculationItem ci = cg.AddCalculationItem(name:ciName ,expression:ciValueExpression);\\nci.FormatStringExpression = ciFormatStringExpression;\\nci.FormatDax();\\n\\npublic static class Fx\\n{\\n    public static Table CreateCalcTable(Model model, string tableName, string tableExpression)\\n    {\\n        if(!model.Tables.Any(t => t.Name == tableName))\\n        {\\n            return model.AddCalculatedTable(tableName, tableExpression);\\n        }\\n        else\\n        {\\n            return model.Tables.Where(t => t.Name == tableName).First();\\n        }\\n    }\\n    public static string GetNameFromUser(string Prompt, string Title, string DefaultResponse)\\n    {    \\n        string response = Interaction.InputBox(Prompt, Title, DefaultResponse, 740, 400);\\n        return response;\\n    }\\n    public static string ChooseString(IList<string> OptionList)\\n    {\\n        Func<IList<string>, string, string> SelectString = (IList<string> options, string title) =>\\n        {\\n            var form = new Form();\\n            form.Text = title;\\n            var buttonPanel = new Panel();\\n            buttonPanel.Dock = DockStyle.Bottom;\\n            buttonPanel.Height = 30;\\n            var okButton = new Button() { DialogResult = DialogResult.OK, Text = \\\"OK\\\" };\\n            var cancelButton = new Button() { DialogResult = DialogResult.Cancel, Text = \\\"Cancel\\\", Left = 80 };\\n            var listbox = new ListBox();\\n            listbox.Dock = DockStyle.Fill;\\n            listbox.Items.AddRange(options.ToArray());\\n            listbox.SelectedItem = options[0];\\n            form.Controls.Add(listbox);\\n            form.Controls.Add(buttonPanel);\\n            buttonPanel.Controls.Add(okButton);\\n            buttonPanel.Controls.Add(cancelButton);\\n            var result = form.ShowDialog();\\n            if (result == DialogResult.Cancel) return null;\\n            return listbox.SelectedItem.ToString();\\n        };\\n        //let the user select the name of the macro to copy\\n        String select = SelectString(OptionList, \\\"Choose a macro\\\");\\n        //check that indeed one macro was selected\\n        if (select == null)\\n        {\\n            Info(\\\"You cancelled!\\\");\\n        }\\n        return select;\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "8. Bernats Repo\\7. Other\\Refresh BPA Rules",
      "Enabled": "true",
      "Execute": "System.Net.WebClient w = new System.Net.WebClient(); \\n\\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\\nstring downloadLoc = path+@\\\"\\TabularEditor\\BPARules.json\\\";\\nstring url = \\\"https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/Spanish/BPARules.json\\\";\\nstring dlMessage = \\\"Downloaded BPARules.json. Please restart Tabular Editor.\\\";\\n\\nif (System.IO.File.Exists(downloadLoc))\\n{\\n    if (System.Windows.Forms.MessageBox.Show(\\\"Would you like to overwrite the existing BPARules.json file?\\\",\\\"Overwrite Existing BPA Rules\\\",System.Windows.Forms.MessageBoxButtons.YesNo,System.Windows.Forms.MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)\\n    {\\n        w.DownloadFile(url, downloadLoc);\\n        System.Windows.Forms.MessageBox.Show(dlMessage,\\\"Overwrite Existing BPA Rules\\\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\\n    }\\n    else\\n    {\\n        System.Windows.Forms.MessageBox.Show(\\\"Did not download BPARules.json.\\\",\\\"Overwrite Existing BPA Rules\\\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\\n    }\\n}\\nelse\\n{\\n    System.Windows.Forms.MessageBox.Show(dlMessage,\\\"Download BPA Rules\\\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\\n    w.DownloadFile(url, downloadLoc);\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "9. Nordgaards Repo\\Setting one shared expresssion with description",
      "Enabled": "true",
      "Execute": "/*\\nForfatter: Andreas Nordgaard aols0228 og ChatGPT\\nLink to source: \\nBeskrivelse: Makro, der opdaterer eksisterende parametre to sandbox-miljøet\\n 1. It creates a dictionary with key/value pairs of typestring/string with the M parameters you wish to update\\n 2. If the M parameters do not preexist the script fails\\n 3. If they exist it fetches the M parameters with the same name as in the dictionary\\n 3. It then insert the new parameters value for sandbox environment\\n\\nChange Log: (udShift denne med dine noter)\\n---------------------------------------------------------------\\nVer. | Dato DD-MM-YYYY | Forfatter | Beskrivelse\\n1.0 19-06-2024 aols0228 Frigivelse af makro\\n1.1 19-09-2024 aols0228 Brug af custom class, ExpressionInfo, for at toføje beskrivelse\\n*/\\n\\npublic class ExpressionInfo\\n{\\n public string Key { get; set; }\\n public string Value { get; set; }\\n public string Description { get; set; }\\n}\\n\\nvar Expression = new ExpressionInfo // Add the strings directly below\\n{ \\n Key = \\\"Cluster\\\", \\n Value = \\\"/sql/\\\", \\n Description = \\\"Development (standard)\\\" \\n};\\n\\nModel.Expressions[Expression.Key].Expression = \\n $@\\\"// {Expression.Description} {Expression.Key.ToLower()}\\n\\\"\\\"\\\" + Expression.Value + @\\\"\\\"\\\"\\nmeta [\\n IsParameterQuery = true,\\n IsParameterQueryRequired = true,\\n Type = type text\\n]\\\";",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Archive\\1.1 Measure: Selected SUM Simple in Current Table",
      "Enabled": "true",
      "Execute": "// Creates a SUM measure for every currently selected column and hide the column.\\nforeach(var c in Selected.Columns)\\n{\\n    var newMeasure = c.Table.AddMeasure(\\n        \\\"NameToReplace\\\" + c.Name,                    // Name\\n        \\\"SUM(\\\" + c.DaxObjectFullName + \\\")\\\",    // DAX expression\\n        \\\"ENTERHERE_DisplayFolderName\\\"                        // Display Folder\\n    );\\n    \\n    // Set the format string on the new measure:\\n    newMeasure.FormatString = \\\"0.0\\\";\\n\\n    // Provide some documentation:\\n    newMeasure.Description = \\\"This measure is the sum of column \\\" + c.DaxObjectFullName;\\n\\n    // Hide the base column:\\n    c.IsHidden = true;\\n}",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Name": "Archive\\1.1 Measure: Selected SUM Simple in Measure Table",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.VisualBasic\\\"\\nusing Microsoft.VisualBasic;\\nusing System.Windows.Forms;\\n\\n// Ask the user if they want to add the new measure to the current table\\nDialogResult dialogResult = MessageBox.Show(\\\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\\\", \\\"Select Target Table\\\", MessageBoxButtons.YesNo);\\n\\nstring measuresTableName = Selected.Columns.First().Table.Name;\\nif (dialogResult == DialogResult.No)\\n{\\n    // Ask for the name of the measure table if the user selects \\\"No\\\"\\n    measuresTableName = Interaction.InputBox(\\\"Provide the name of the measure table\\\", \\\"Name of Measure Table\\\", \\\"Measure\\\");\\n\\n    // Check if the provided table exists\\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\\n    {\\n        MessageBox.Show(\\\"The table you provided does not exist in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Create a SUM measure for every currently selected column and hide the column\\nforeach(var c in Selected.Columns)\\n{\\n    // Use the target table determined by user selection or default \\\"Measure\\\" table\\n    var measuresTable = Model.Tables[measuresTableName];\\n    var newMeasure = measuresTable.AddMeasure(\\n        /*\\\"Sum_\\\" +*/ c.Name,                            // Name\\n        \\\"SUM(\\\" + c.DaxObjectFullName + \\\")\\\",         // DAX expression\\n        c.Table.Name                                // Display Folder\\n    );\\n    \\n    // Set the format string on the new measure:\\n    newMeasure.FormatString = \\\"0.0\\\";\\n\\n    // Provide some documentation:\\n    newMeasure.Description = \\\"This measure is the sum of column \\\" + c.DaxObjectFullName;\\n\\n    // Hide the base column:\\n    c.IsHidden = true;\\n}\\n",
      "Tooltip": "This adds for selected Tables all explicit sum measures",
      "ValidContexts": "Measure"
    },
    {
      "Name": "Archive\\1.2 Measure: All Y-1 Simple with fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\\n    \\nforeach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var Kalendartable = \\\"Datum\\\";\\n    var DateColumn = \\\"Datum\\\";\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" PY\\\";\\n    string newMeasureName2 = selectedMeasure.Name + \\\" Δ PY\\\";\\n    string newMeasureName3 = selectedMeasure.Name + \\\" Δ PY %\\\";\\n    \\n    string newExpression1 = \\n        \\\"CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" \\n        +\\\"SAMEPERIODLASTYEAR(\\\"+Kalendartable+\\\"[\\\"+DateColumn+\\\"]))\\\";\\n    string newExpression2 = \\n        \\\"[\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY]\\\";\\n    string newExpression3 = \\n        \\\"DIVIDE([\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY], [\\\"+selectedMeasure.Name+\\\"])\\\";\\n\\n\\n    // Create the new measure in the same table as the selected measure\\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n    var newMeasure2 = measuresTable.AddMeasure(newMeasureName2, newExpression2);\\n    var newMeasure3 = measuresTable.AddMeasure(newMeasureName3, newExpression3);\\n    \\n    // Set the display folder for the new measure\\n    //newMeasure1.DisplayFolder = \\\"Just Created \\\" + selectedMeasure.Name;\\n    \\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasures.Add(newMeasure1);\\n    newMeasures.Add(newMeasure2);\\n    newMeasures.Add(newMeasure3);\\n}\\n\\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "Archive\\1.2 Measure: Y-1 Simple With fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\\n    \\nforeach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var Kalendartable = \\\"Datum\\\";\\n    var DateColumn = \\\"Datum\\\";\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" PY\\\";\\n    \\n    string newExpression1 = \\n        \\\"CALCULATE(\\\" +\\n        \\\"[\\\"+selectedMeasure.Name+\\\"]\\\" + \\\", \\\" \\n        +\\\"SAMEPERIODLASTYEAR(\\\"+Kalendartable+\\\"[\\\"+DateColumn+\\\"]))\\\";\\n\\n    // Create the new measure in the same table as the selected measure\\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n\\n    // Set the display folder for the new measure\\n    //newMeasure1.DisplayFolder = \\\"Just Created \\\" + selectedMeasure.Name;\\n    \\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasures.Add(newMeasure1);\\n    \\n}\\n\\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "Archive\\1.2 Measure: Δ Y-1 Simple  With fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\\n    \\nforeach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var Kalendartable = \\\"Datum\\\";\\n    var DateColumn = \\\"Datum\\\";\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" Δ PY\\\";\\n    \\n    string newExpression1 = \\n        \\\"[\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY]\\\";\\n\\n    // Create the new measure in the same table as the selected measure\\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n\\n    // Set the display folder for the new measure\\n    //newMeasure1.DisplayFolder = \\\"Just Created \\\" + selectedMeasure.Name;\\n    \\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasures.Add(newMeasure1);\\n    \\n}\\n\\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Name": "Archive\\1.2 Measure: Δ Y-1% Simple  With fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\\n    \\nforeach (var selectedMeasure in Selected.Measures)\\n    {\\n    // Get the selected measure\\n    var measuresTable = Model.Tables[\\\"Measure\\\"];\\n    var Kalendartable = \\\"Datum\\\";\\n    var DateColumn = \\\"Datum\\\";\\n\\n    // Define the new measure name and expression\\n    string newMeasureName1 = selectedMeasure.Name + \\\" Δ PY %\\\";\\n    \\n    string newExpression1 = \\n        \\\"DIVIDE([\\\"+selectedMeasure.Name+\\\"] - \\\" + \\\"[\\\"+selectedMeasure.Name+\\\" PY], [\\\"+selectedMeasure.Name+\\\"])\\\";\\n\\n    // Create the new measure in the same table as the selected measure\\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\\n\\n    // Set the display folder for the new measure\\n    //newMeasure1.DisplayFolder = \\\"Just Created \\\" + selectedMeasure.Name;\\n    \\n    newMeasure1.FormatString = selectedMeasure.FormatString;\\n    newMeasures.Add(newMeasure1);\\n    \\n}\\n\\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    }
  ]
}