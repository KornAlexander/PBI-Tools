{
  "Actions": [
    {
      "Name": "Tabular-master\\AutoAggs\\AutoAggs",
      "Enabled": "true",
      "Execute": "// Select the columns from your detail fact table that you would like in the agg table. \\n// Only specify foreign keys or columns used for measures.\\n\\nvar tableName = Selected.Table.Name;\\nstring aggSuffix = \\\"_Agg\\\";\\nstring aggTableName = tableName + aggSuffix;\\n\\n// Ensure no duplication of agg table\\nif (!Model.Tables.Any(y => y.Name == aggTableName))\\n{\\n    // Create agg table\\n    var aggTable = Model.AddTable(aggTableName);\\n    aggTable.IsHidden = true;\\n\\n    int pCount = Model.Tables[tableName].Partitions.Count();\\n    var dataSource = Model.Tables[tableName].Source;\\n\\n    // For multi-partitioned tables\\n    if (pCount > 1)\\n    {\\n        // Add partitions\\n        foreach(var p in Model.Tables[tableName].Partitions.ToList())\\n        {\\n            var aggPartitionName = p.Name.Replace(tableName,aggTableName);\\n            var aggQuery = p.Query.Replace(tableName,aggTableName);\\n            \\n            if (p.SourceType.ToString() == \\\"M\\\")\\n            {\\n                var pName = Model.Tables[aggTableName].AddMPartition(aggPartitionName);\\n                pName.Query = aggQuery;\\n            }\\n            else\\n            {\\n                var pName = Model.Tables[aggTableName].AddPartition(aggPartitionName);\\n                pName.DataSource = Model.DataSources[dataSource];\\n                pName.Query = aggQuery;\\n            }\\n        }\\n        \\n        // Remove default partition\\n        Model.Tables[aggTableName].Partitions[aggTableName].Delete();\\n    }\\n\\n    // For single-partition tables\\n    else\\n    {\\n        var par = Model.Tables[tableName].Partitions[tableName];\\n        var aggPar = Model.Tables[aggTableName].Partitions[aggTableName];\\n        \\n        if (aggPar.SourceType.ToString() == \\\"M\\\")\\n        {\\n            aggPar.Query = par.Query;\\n        }        \\n        else\\n        {\\n            // Update Data Source\\n            aggPar.DataSource = Model.DataSources[dataSource];\\n            \\n            // Update Query\\n            aggPar.Query = par.Query.Replace(tableName,aggTableName);\\n        }\\n    }\\n\\n    foreach (var c in Selected.Columns)\\n    {\\n        // Add Columns\\n        string columnName = c.Name;\\n        bool hide = c.IsHidden;\\n        var colfs = c.FormatString;\\n        var dt = c.DataType;\\n        var sourceColumn = (Model.Tables[tableName].Columns[columnName] as DataColumn).SourceColumn;\\n        \\n        // Add Column Properties\\n        var obj = Model.Tables[aggTableName].AddDataColumn(columnName);\\n        obj.SourceColumn = sourceColumn;\\n        obj.IsHidden = hide;\\n        obj.FormatString = colfs;\\n        obj.DataType = dt;\\n        \\n        // Add Relationships\\n        foreach(var r in Model.Relationships.ToList().Where(a=> a.FromTable == Model.Tables[tableName] && a.FromColumn == Model.Tables[tableName].Columns[columnName]))\\n        {\\n            var addRel = Model.AddRelationship();\\n            addRel.FromColumn = Model.Tables[aggTableName].Columns[columnName];\\n            addRel.ToColumn = Model.Tables[r.ToTable.Name].Columns[r.ToColumn.Name];\\n            addRel.CrossFilteringBehavior = r.CrossFilteringBehavior;\\n            addRel.SecurityFilteringBehavior = r.SecurityFilteringBehavior;\\n            addRel.IsActive = r.IsActive;\\n            Model.Tables[aggTableName].Columns[columnName].SetAnnotation(aggTableName,\\\"ForeignKey\\\");\\n            Model.Tables[tableName].Columns[columnName].SetAnnotation(aggTableName,\\\"ForeignKey\\\");\\n        }\\n        \\n        // For non-key columns, create agg measures\\n        if ( Model.Tables[aggTableName].Columns[columnName].GetAnnotation(aggTableName) == null)\\n        {\\n            foreach (var x in Model.Tables[tableName].Columns[columnName].ReferencedBy.OfType<Measure>().ToList())\\n            {\\n                var newMeasureName = x.Name + aggSuffix;\\n                var measureDAX = x.Expression;\\n                var newDAX = measureDAX.Replace(tableName + \\\"[\\\" + columnName + \\\"]\\\",aggTableName + \\\"[\\\" + columnName + \\\"]\\\");\\n                newDAX = newDAX.Replace(\\\"'\\\" + tableName + \\\"'\\\" + \\\"[\\\" + columnName + \\\"]\\\",\\\"'\\\" + aggTableName + \\\"'\\\" + \\\"[\\\" + columnName + \\\"]\\\");\\n                var fs = x.FormatString;\\n                var df = x.DisplayFolder;\\n                var k = x.KPI;\\n                \\n                // Create agg measure, format same as non-agg measure\\n                var newMeasure = Model.Tables[aggTableName].AddMeasure(newMeasureName);\\n                newMeasure.Expression = FormatDax(newDAX);\\n                newMeasure.IsHidden = true;\\n                newMeasure.FormatString = fs;\\n                newMeasure.DisplayFolder = df;\\n                newMeasure.KPI = k;\\n                \\n                // Add new measures to respective perspectives\\n                foreach (var p in Model.Perspectives.ToList())\\n                {\\n                    foreach (var mea in Model.AllMeasures.Where(a=> a.Name == x.Name))\\n                    {\\n                        bool inPer = mea.InPerspective[p];\\n                        newMeasure.InPerspective[p] = inPer;\\n                        \\n                        // Set Annotations for base measures\\n                        mea.SetAnnotation(aggTableName,\\\"BaseMeasure\\\");\\n                    }\\n                }\\n                \\n                // Set annotation denoting column as an agg column\\n                Model.Tables[aggTableName].Columns[columnName].SetAnnotation(aggTableName,\\\"AggColumn\\\");\\n                Model.Tables[tableName].Columns[columnName].SetAnnotation(aggTableName,\\\"AggColumn\\\");\\n            }\\n        }\\n        \\n        // Add columns to respective perspective(s)\\n        foreach (var p in Model.Perspectives.ToList())\\n        {\\n            bool inPersp = c.InPerspective[p];            \\n            obj.InPerspective[p] = inPersp;\\n        }\\n    }\\n\\n    // Initialize DAX Statement string for Agg-check measure\\n    var sb = new System.Text.StringBuilder();\\n    sb.Append(\\\"IF (\\\");\\n    \\n    // Create ISCROSSFILTERED Statement\\n    foreach (var c in Model.Tables[tableName].Columns.Where(b => b.GetAnnotation(aggTableName) != \\\"ForeignKey\\\" && b.GetAnnotation(aggTableName) != \\\"AggColumn\\\").ToList())\\n    {\\n        foreach(var r in Model.Relationships.ToList().Where(a=> a.FromTable == Model.Tables[tableName] && a.FromColumn == Model.Tables[tableName].Columns[c.Name]))\\n        {\\n            sb.Append(\\\"ISCROSSFILTERED('\\\"+r.ToTable.Name+\\\"') || \\\");\\n            Model.Tables[tableName].Columns[c.Name].SetAnnotation(aggTableName,\\\"ForeignKeyNotInAgg\\\");\\n        }\\n    }   \\n    \\n    // Create ISFILTERED Statement    \\n    foreach (var c in Model.Tables[tableName].Columns.Where(b => b.GetAnnotation(aggTableName) == null).ToList())\\n    {\\n        sb.Append(\\\"ISFILTERED('\\\"+tableName+\\\"'[\\\"+c.Name+\\\"]) || \\\");\\n    }\\n    \\n    string dax = sb.ToString(0,sb.Length - 3) + \\\",0,1)\\\";\\n\\n    var m = Model.Tables[aggTableName].AddMeasure(aggTableName+\\\"check\\\");\\n    m.Expression = FormatDax(dax);\\n    m.IsHidden = true;\\n    \\n    // Add Agg-check measure to respective perspective(s)\\n    foreach (var t in Model.Tables.Where (a => a.Name == tableName))\\n    {        \\n        foreach (var p in Model.Perspectives.ToList())\\n        {\\n            bool inPersp = t.InPerspective[p];            \\n            m.InPerspective[p] = inPersp;\\n        }\\n    }\\n}\\n\\n// Update non-agg measures to switch between agg & non-agg\\nforeach (var a in Model.AllMeasures.Where(a => a.GetAnnotation(aggTableName) == \\\"BaseMeasure\\\").ToList())\\n{\\n    a.Expression = FormatDax(\\\"IF([\\\" + aggTableName + \\\"check] = 1,[\\\" + a.Name + aggSuffix +\\\"],\\\"+a.Expression+\\\")\\\");\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\AutoAggs\\AutoAggs_Remove",
      "Enabled": "true",
      "Execute": "var tableName = Selected.Table.Name; // or specify table name directly i.e. \\\"Revenue\\\"\\nvar aggTableName = string.Empty;\\nstring aggSuffix = \\\"_Agg\\\";\\n\\n// Ensure code works if detail or agg table is specified in the tableName parameter\\nif (tableName.EndsWith(aggSuffix))\\n{\\n    aggTableName = tableName;\\n    tableName = tableName.Substring(0,tableName.Length - 4);\\n}\\nelse\\n{\\n    aggTableName = tableName + aggSuffix;\\n}\\n\\n// Run if the agg table exists\\nif (Model.Tables.Where(a => a.Name == aggTableName).Count() != 0)\\n{\\n    // Delete agg table\\n    Model.Tables[aggTableName].Delete();\\n    \\n    foreach (var m in Model.AllMeasures.ToList())//.Where(a => a.Name == tableName).ToList()) // perhaps remove where clause\\n    {\\n        if (m.GetAnnotation(aggTableName) == \\\"BaseMeasure\\\")\\n        {\\n            var expr = m.Expression;\\n            var aggMeasureName = m.Name+aggSuffix;\\n            int aggNameLen = aggMeasureName.Length;\\n            int startPoint = expr.IndexOf(aggMeasureName)+aggNameLen+2;\\n            var newExpr = expr.Substring(startPoint,expr.Length - startPoint - 1);\\n            \\n            // Update DAX for base measures\\n            m.Expression = FormatDax(newExpr);\\n\\n            // Remove measure annotations\\n            m.RemoveAnnotation(aggTableName);\\n         \\n        }\\n    }\\n    \\n    // Remove column annotations\\n    foreach (var c in Model.Tables[tableName].Columns.ToList())\\n    {\\n        c.RemoveAnnotation(aggTableName);\\n    }   \\n}\\n\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\AutomatedDataDictionary",
      "Enabled": "true",
      "Execute": "// Initial Parameters\\nstring dataSource = @\\\"\\\"; // Enter the name of the data source in the model that the Data Dictionary will use.\\n\\nstring serverName = @\\\"\\\"; // Enter the server name (where the Data Dictionary table will reside in the data warehouse).\\nstring databaseName = \\\"\\\"; // Enter the database name (where the Data Dictionary table will reside in the data warehouse).\\nstring schemaName = \\\"\\\"; // Enter the schema name (ensure the schema exists).\\nstring dbTableName = \\\"\\\"; // Enter the table name for the Data Dictionary in the data warehouse.\\n\\nstring modelName = Model.Database.Name;\\n\\n// Error check for parameters\\nif (!Model.DataSources.Any(a=>a.Name == dataSource))\\n{\\n    Error(\\\"Must enter a valid 'Data Source' in the dataSource parameter\\\");\\n    return;\\n}\\nif (serverName.Length == 0)\\n{\\n    Error(\\\"Must enter a valid 'Server' in the serverName parameter\\\");\\n    return;\\n}\\nif (databaseName.Length == 0)\\n{\\n    Error(\\\"Must enter a valid 'Database' in the databaseName parameter\\\");\\n    return;\\n}\\nif (schemaName.Length == 0)\\n{\\n    Error(\\\"Must enter a valid 'Schema' in the schemaName parameter\\\");\\n    return;\\n}\\nif (dbTableName.Length == 0)\\n{\\n    Error(\\\"Must enter a valid 'Table Name' in the dbTableName parameter\\\");\\n    return;\\n}\\nif (modelName.Length == 0)\\n{\\n    Error(\\\"Must enter a valid 'Model Name' in the modelName parameter\\\");\\n    return;\\n}\\n\\n// Create Data Dictionary table within the model (if it does not already exist)\\nstring ddTableName = \\\"Data Dictionary\\\";\\nstring[] sourceColName = {\\\"ModelName\\\",\\\"TableName\\\",\\\"ObjectType\\\",\\\"ObjectName\\\",\\\"HiddenFlag\\\",\\\"Description\\\",\\\"DisplayFolder\\\",\\\"MeasureFormula\\\"};\\nstring[] colName = {\\\"Model\\\",\\\"Table\\\",\\\"Object Type\\\",\\\"Object\\\",\\\"Hidden Flag\\\",\\\"Description\\\",\\\"Display Folder\\\",\\\"Measure Formula\\\"};\\n\\nif (Model.Tables.Any(a => a.Name == ddTableName) == false)\\n{\\n    var t = Model.AddTable(ddTableName);    \\n    t.Partitions[0].DataSource = Model.DataSources[dataSource];\\n    t.Partitions[0].Query = \\\"SELECT * FROM [\\\"+schemaName+\\\"].[\\\"+dbTableName+\\\"]\\\";\\n\\n    for (int i=0;i<colName.Length; i++)\\n    {\\n        var c = t.AddDataColumn(colName[i]);\\n        c.SourceColumn = sourceColName[i];\\n        c.DataType = DataType.String;\\n    }\\n}\\n\\n// Create Data Dictionary table within the Data Warehouse\\nstring newLine = Environment.NewLine;\\nstring connectionString = @\\\"Data Source=\\\"+serverName+\\\";Initial Catalog=\\\"+databaseName+\\\";Integrated Security=True\\\";\\nstring sql = \\\"DROP TABLE IF EXISTS [\\\"+schemaName+\\\"].[\\\"+dbTableName+\\\"] \\\"+newLine+\\n\\\"CREATE TABLE [\\\"+schemaName+\\\"].[\\\"+dbTableName+\\\"] \\\" +newLine+\\n\\\"(\\\" +newLine+\\n\\\" [ModelName] VARCHAR(100)\\\" +newLine+\\n\\\",[TableName] VARCHAR(200)\\\" +newLine+\\n\\\",[ObjectType] VARCHAR(30)\\\" +newLine+\\n\\\",[ObjectName] VARCHAR(250)\\\" +newLine+\\n\\\",[HiddenFlag] VARCHAR(10)\\\" +newLine+\\n\\\",[Description] VARCHAR(MAX)\\\" +newLine+\\n\\\",[DisplayFolder] VARCHAR(150)\\\" +newLine+\\n\\\",[MeasureFormula] VARCHAR(MAX)\\\" +newLine+\\n\\\")\\\";\\n\\nSystem.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(connectionString);\\nSystem.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand(sql, con);\\n\\ncmd.Connection.Open();\\ncmd.ExecuteNonQuery();\\n\\n// Set up the insert statement for sending the metadata to the data warehouse\\nstring insertSQL;\\nvar sb_InsertSQL = new System.Text.StringBuilder();\\n\\nsb_InsertSQL.Append(\\\"INSERT INTO [\\\"+schemaName+\\\"].[\\\"+dbTableName+\\\"]\\\");\\nsb_InsertSQL.Append(Environment.NewLine);\\n\\n// Extract model metadata in the data dictionary format\\nforeach (var t in Model.Tables.Where(a => a.ObjectType.ToString() != \\\"CalculationGroupTable\\\" && a.Name != ddTableName).OrderBy(a => a.Name).ToList())\\n{\\n    string tableName = t.Name;\\n    string tableDesc = t.Description.Replace(\\\"'\\\",\\\"''\\\");\\n    string objectType = \\\"Table\\\";\\n    string hiddenFlag;                 \\n    string expr;\\n\\n    if (t.IsHidden)\\n    {\\n        hiddenFlag = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        hiddenFlag = \\\"No\\\";\\n    }\\n    \\n    if (t.SourceType.ToString() == \\\"Calculated\\\")\\n    {\\n        expr = (Model.Tables[tableName] as CalculatedTable).Expression;\\n \\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"'\\\",\\\"''\\\");\\n        \\n        sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','\\\"+objectType+\\\"','\\\"+tableName+\\\"','\\\"+hiddenFlag+\\\"','\\\"+tableDesc+\\\"','\\\"+\\\"','\\\"+expr+\\\"' UNION ALL \\\");                        \\n    }\\n    else\\n    {\\n        sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','\\\"+objectType+\\\"','\\\"+tableName+\\\"','\\\"+hiddenFlag+\\\"','\\\"+tableDesc+\\\"','\\\"+\\\"','\\\"+\\\"***N/A***' UNION ALL \\\");             \\n    }\\n    \\n    sb_InsertSQL.Append(Environment.NewLine);\\n    \\n    foreach (var o in t.Columns.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = o.Name;\\n        string objectDesc = o.Description.Replace(\\\"'\\\",\\\"''\\\");\\n        string objectDF = o.DisplayFolder.Replace(\\\"'\\\",\\\"''\\\");\\n        objectType = \\\"Attribute\\\";\\n        \\n        if (o.IsHidden)\\n        {\\n            hiddenFlag = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hiddenFlag = \\\"No\\\";\\n        }\\n        \\n        if (o.Type.ToString() == \\\"Calculated\\\")\\n        {\\n            expr = (Model.Tables[tableName].Columns[objectName] as CalculatedColumn).Expression;\\n            \\n            // Remove tabs and new lines\\n            expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n            expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n            expr = expr.Replace(\\\"'\\\",\\\"''\\\");\\n            sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','\\\"+objectType+\\\"','\\\"+objectName+\\\"','\\\"+hiddenFlag+\\\"','\\\"+objectDesc+\\\"','\\\"+objectDF+\\\"','\\\"+expr+\\\"' UNION ALL \\\");                \\n            \\n        }\\n        else\\n        {\\n            sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','\\\"+objectType+\\\"','\\\"+objectName+\\\"','\\\"+hiddenFlag+\\\"','\\\"+objectDesc+\\\"','\\\"+objectDF+\\\"','***N/A***' UNION ALL \\\");        \\n        }\\n        \\n        sb_InsertSQL.Append(Environment.NewLine);        \\n    }\\n    \\n    foreach (var o in t.Measures.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = o.Name;\\n        string objectDesc = o.Description.Replace(\\\"'\\\",\\\"''\\\");\\n        string objectDF = o.DisplayFolder.Replace(\\\"'\\\",\\\"''\\\");\\n        objectType = \\\"Measure\\\";\\n        expr = o.Expression;                    \\n        \\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"'\\\",\\\"''\\\");\\n        \\n        if (o.IsHidden)\\n        {\\n            hiddenFlag = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hiddenFlag = \\\"No\\\";\\n        }\\n        \\n        sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','\\\"+objectType+\\\"','\\\"+objectName+\\\"','\\\"+hiddenFlag+\\\"','\\\"+objectDesc+\\\"','\\\"+objectDF+\\\"','\\\"+expr+\\\"' UNION ALL \\\");        \\n        sb_InsertSQL.Append(Environment.NewLine);\\n    }\\n    \\n    foreach (var o in t.Hierarchies.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = o.Name;\\n        string objectDesc = o.Description.Replace(\\\"'\\\",\\\"''\\\");\\n        string objectDF = o.DisplayFolder.Replace(\\\"'\\\",\\\"''\\\");\\n        objectType = \\\"Hierarchy\\\";\\n        \\n        if (o.IsHidden)\\n        {\\n            hiddenFlag = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hiddenFlag = \\\"No\\\";\\n        }\\n        \\n        sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','\\\"+objectType+\\\"','\\\"+objectName+\\\"','\\\"+hiddenFlag+\\\"','\\\"+objectDesc+\\\"','\\\"+objectDF+\\\"','***N/A***' UNION ALL \\\");\\n        sb_InsertSQL.Append(Environment.NewLine);\\n    }            \\n}\\n\\nforeach (var o in Model.CalculationGroups.ToList())\\n{\\n    string tableName = o.Name;\\n    string tableDesc = o.Description.Replace(\\\"'\\\",\\\"''\\\");\\n    string hiddenFlag;\\n    \\n    if (o.IsHidden)\\n    {\\n        hiddenFlag = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        hiddenFlag = \\\"No\\\";\\n    }\\n    \\n    sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','Calculation Group','\\\"+tableName+\\\"','\\\"+hiddenFlag+\\\"','\\\"+tableDesc+\\\"','','***N/A***' UNION ALL \\\");    \\n    sb_InsertSQL.Append(Environment.NewLine);\\n    \\n    foreach (var i in o.CalculationItems.ToList())\\n    {        \\n        string objectName = i.Name;\\n        string objectDesc = i.Description.Replace(\\\"'\\\",\\\"''\\\");\\n        string expr = i.Expression;            \\n        \\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"'\\\",\\\"''\\\");\\n        \\n        sb_InsertSQL.Append(\\\"SELECT\\\"+\\\"'\\\"+modelName+\\\"','\\\"+tableName+\\\"','Calculation Item','\\\"+objectName+\\\"','No','\\\"+objectDesc+\\\"','','\\\"+expr+\\\"' UNION ALL \\\");                \\n        sb_InsertSQL.Append(Environment.NewLine);\\n    }\\n} \\n\\n// Remove the extra comma \\ninsertSQL = sb_InsertSQL.ToString().Trim();\\ninsertSQL = insertSQL.Substring(0,insertSQL.Length-10);\\n\\n// Insert the data dictionary metadata into the data warehouse\\nSystem.Data.SqlClient.SqlCommand cmdInsert = new System.Data.SqlClient.SqlCommand(insertSQL, con);\\n\\ncmdInsert.ExecuteNonQuery();\\ncmdInsert.Connection.Close();\\ncmd.Connection.Close();\\ncon.Close();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\AutomatedDataDictionary_Excel",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"Microsoft.Office.Interop.Excel\\\"\\n\\nusing System.IO;\\nusing Excel = Microsoft.Office.Interop.Excel;\\n\\nstring filePath = @\\\"C:\\Desktop\\DataDictionary\\\"; // Update this to be the desired location of the Data Dictionary file\\nbool dataSourceM = false; // Set this to true if you want the data source to use M\\nstring excelFilePath = filePath + \\\".xlsx\\\"; \\nstring textFilePath = filePath + \\\".txt\\\";\\nstring modelName = Model.Database.Name;\\nstring ddName = \\\"Data Dictionary\\\";\\nstring ddSource = \\\"Excel \\\" + ddName;\\nstring conn = \\\"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\\"+excelFilePath+\\\";Persist Security Info=false;Extended Properties=\\\\\"Excel 12.0;HDR=Yes;\\\\\"\\\";\\nstring[] colName = { \\\"Model\\\",\\\"Table\\\",\\\"Object Type\\\",\\\"Object\\\",\\\"Hidden Flag\\\",\\\"Description\\\",\\\"Display Folder\\\",\\\"Measure Formula\\\" };\\nint colNameCount = colName.Length;\\nvar sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\nif (modelName == \\\"SemanticModel\\\")\\n{\\n    Error(\\\"Please name your model in the properties window: Model -> Database -> Name\\\");\\n    return;\\n}\\n\\n// Create Structured Data Source (M-Partitions)\\nif (dataSourceM)\\n{\\n    // Add data source\\n    if (!Model.DataSources.Any(a => a.Name == ddSource))\\n    {\\n        var ds = Model.AddStructuredDataSource(ddSource);\\n        ds.Protocol = \\\"file\\\";\\n        ds.Path = excelFilePath;\\n        ds.AuthenticationKind = \\\"ServiceAccount\\\";\\n        ds.ContextExpression = \\\"let\\\" + newline + \\\"#\\\\\"0001\\\\\" = Excel.Workbook(..., null, true)\\\" + newline + \\\"in\\\" + newline + \\\"#\\\\\"0001\\\\\"\\\";\\n    }\\n    \\n    // Add table\\n    if (!Model.Tables.Any(a => a.Name == ddName))\\n    {\\n        var t = Model.AddTable(ddName);\\n        t.AddMPartition(ddName+\\\"1\\\");\\n        t.Partitions[0].Delete();\\n        var p = (Model.Tables[ddName].Partitions[0] as MPartition);\\n        p.Name = ddName;\\n        p.MExpression = \\\"let\\\" + newline + \\n        \\\"    Source = #\\\\\"\\\"+ddSource+\\\"\\\\\",\\\" + newline + \\n        \\\"    #\\\\\"\\\"+ddName+\\\"_Sheet\\\\\" = Source{[Item=\\\\\"\\\"+ddName+\\\"\\\\\",Kind=\\\\\"Sheet\\\\\"]}[Data],\\\" + newline +\\n        \\\"    #\\\\\"Changed Type\\\\\" = Table.TransformColumnTypes(#\\\\\"\\\"+ddName+\\\"_Sheet\\\\\",{{\\\\\"Column1\\\\\", type text}, {\\\\\"Column2\\\\\", type text}, {\\\\\"Column3\\\\\", type text}, {\\\\\"Column4\\\\\", type text}, {\\\\\"Column5\\\\\", type text}, {\\\\\"Column6\\\\\", type text}, {\\\\\"Column7\\\\\", type text}, {\\\\\"Column8\\\\\", type text}}),\\\" + newline +\\n        \\\"    #\\\\\"Promoted Headers\\\\\" = Table.PromoteHeaders(#\\\\\"Changed Type\\\\\", [PromoteAllScalars=true]),\\\" + newline +\\n        \\\"    #\\\\\"Changed Type1\\\\\" = Table.TransformColumnTypes(#\\\\\"Promoted Headers\\\\\",{{\\\\\"Model\\\\\", type text}, {\\\\\"Table\\\\\", type text}, {\\\\\"Object Type\\\\\", type text}, {\\\\\"Object\\\\\", type text}, {\\\\\"Hidden Flag\\\\\", type text}, {\\\\\"Description\\\\\", type text}, {\\\\\"Display Folder\\\\\", type text}, {\\\\\"Measure Formula\\\\\", type text}})\\\" + newline +\\n        \\\"in\\\" + newline +\\n        \\\"    #\\\\\"Changed Type1\\\\\"\\\";\\n        \\n                \\n        // Add columns\\n        for (int i=0; i<colNameCount; i++)\\n        {\\n            var col = t.AddDataColumn(colName[i]);\\n            col.SourceColumn = colName[i];\\n            col.DataType = DataType.String;\\n        }\\n    }\\n}\\n\\n// Create Legacy Data Source\\nelse\\n{\\n    // Add data source\\n    if (!Model.DataSources.Any(a => a.Name == ddSource))\\n    {\\n        var ds = Model.AddDataSource(ddSource);\\n        ds.ConnectionString = conn;\\n    }\\n    \\n    // Add table\\n    if (!Model.Tables.Any(a => a.Name == ddName))\\n    {\\n        var t = Model.AddTable(ddName);\\n        t.Partitions[0].DataSource = Model.DataSources[ddSource];\\n        t.Partitions[0].Query = \\\"SELECT * FROM [\\\"+ddName+\\\"$]\\\";\\n        \\n        // Add columns\\n        for (int i=0; i<colNameCount; i++)\\n        {\\n            var col = t.AddDataColumn(colName[i]);\\n            col.SourceColumn = colName[i];\\n            col.DataType = DataType.String;\\n        }\\n    }\\n}\\n\\n// Add headers\\nfor (int i=0; i < colNameCount; i++)\\n{\\n    if (i<colNameCount-1)\\n    {\\n        sb.Append(colName[i] + '\\t');\\n    }\\n    else\\n    {\\n        sb.Append(colName[i] + newline);\\n    }\\n}\\n\\n// Extract model metadata in the data dictionary format\\nforeach (var t in Model.Tables.Where(a => a.ObjectType.ToString() != \\\"CalculationGroupTable\\\" && a.Name != ddName).OrderBy(a => a.Name).ToList())\\n{\\n    string tableName = t.Name;\\n    string tableDesc = t.Description.Replace(\\\"'\\\",\\\"''\\\");\\n    string objectType = \\\"Table\\\";\\n    string hiddenFlag;                 \\n    string expr;\\n\\n    if (t.IsHidden)\\n    {\\n        hiddenFlag = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        hiddenFlag = \\\"No\\\";\\n    }\\n    \\n    if (t.SourceType.ToString() == \\\"Calculated\\\")\\n    {\\n        expr = (Model.Tables[tableName] as CalculatedTable).Expression;\\n \\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\").Replace(\\\"\\t\\\",\\\" \\\");\\n\\n        sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + tableName + '\\t' + hiddenFlag + '\\t' + tableDesc + '\\t' + \\\" \\\" + '\\t' + expr + newline);\\n    }\\n    else\\n    {\\n        sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + tableName + '\\t' + hiddenFlag + '\\t' + tableDesc + '\\t' + \\\" \\\" + '\\t' + \\\"***N/A***\\\" + newline);\\n    }\\n    \\n    foreach (var o in t.Columns.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = o.Name;\\n        string objectDesc = o.Description;\\n        string objectDF = o.DisplayFolder;\\n        objectType = \\\"Attribute\\\";\\n        \\n        if (o.IsHidden)\\n        {\\n            hiddenFlag = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hiddenFlag = \\\"No\\\";\\n        }\\n        \\n        if (o.Type.ToString() == \\\"Calculated\\\")\\n        {\\n            expr = (Model.Tables[tableName].Columns[objectName] as CalculatedColumn).Expression;\\n            \\n            // Remove tabs and new lines\\n            expr = expr.Replace(\\\"\\n\\\",\\\" \\\").Replace(\\\"\\t\\\",\\\" \\\");\\n\\n            sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + objectName + '\\t' + hiddenFlag + '\\t' + objectDesc + '\\t' + objectDF + '\\t' + expr + newline);        \\n        }\\n        else\\n        {\\n            sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + objectName + '\\t' + hiddenFlag + '\\t' + objectDesc + '\\t' + objectDF + '\\t' + \\\"***N/A***\\\" + newline); \\n        }\\n    }\\n    \\n    foreach (var o in t.Measures.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = o.Name;\\n        string objectDesc = o.Description;\\n        string objectDF = o.DisplayFolder;\\n        objectType = \\\"Measure\\\";\\n        expr = o.Expression;                    \\n        \\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\").Replace(\\\"\\t\\\",\\\" \\\");\\n        \\n        if (o.IsHidden)\\n        {\\n            hiddenFlag = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hiddenFlag = \\\"No\\\";\\n        }\\n        \\n        sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + objectName + '\\t' + hiddenFlag + '\\t' + objectDesc + '\\t' + objectDF + '\\t' + expr + newline);\\n    }\\n    \\n    foreach (var o in t.Hierarchies.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = o.Name;\\n        string objectDesc = o.Description;\\n        string objectDF = o.DisplayFolder;\\n        objectType = \\\"Hierarchy\\\";\\n        \\n        if (o.IsHidden)\\n        {\\n            hiddenFlag = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hiddenFlag = \\\"No\\\";\\n        }\\n        \\n        sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + objectName + '\\t' + hiddenFlag + '\\t' + objectDesc + '\\t' + objectDF + '\\t' + \\\"***N/A***\\\" + newline);\\n    }\\n}\\n\\nforeach (var o in Model.CalculationGroups.ToList())\\n{\\n    string tableName = o.Name;\\n    string tableDesc = o.Description;\\n    string hiddenFlag;\\n    string objectType = \\\"Calculation Group\\\";\\n    \\n    if (o.IsHidden)\\n    {\\n        hiddenFlag = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        hiddenFlag = \\\"No\\\";\\n    }\\n    \\n    sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + tableName + '\\t' + hiddenFlag + '\\t' + tableDesc + '\\t' + \\\"\\\" + '\\t' + \\\"***N/A***\\\" + newline);    \\n    \\n    foreach (var i in o.CalculationItems.ToList())\\n    {        \\n        string objectName = i.Name;\\n        string objectDesc = i.Description;        \\n        string expr = i.Expression;\\n        objectType = \\\"Calculation Item\\\";\\n        \\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"'\\\",\\\"''\\\");\\n        \\n        sb.Append(modelName + '\\t' + tableName + '\\t' + objectType + '\\t' + objectName + '\\t' + hiddenFlag + '\\t' + objectDesc + '\\t' + \\\"\\\" + '\\t' + expr + newline);    \\n    }\\n} \\n\\n// Delete existing text/Excel files\\ntry\\n{\\n    File.Delete(textFilePath);\\n    File.Delete(excelFilePath);\\n}\\ncatch\\n{\\n}\\n\\n// Save to text file\\nSaveFile(textFilePath, sb.ToString());\\n\\n// Save to Excel file\\nvar excelApp = new Excel.Application();\\nexcelApp.Visible = false;\\nexcelApp.DisplayAlerts = false;\\nexcelApp.Workbooks.OpenText(textFilePath, Type.Missing, 1, Excel.XlTextParsingType.xlDelimited, Excel.XlTextQualifier.xlTextQualifierNone, false, true, false, false, false, false, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, true, Type.Missing);\\n\\nvar wb = excelApp.ActiveWorkbook;\\nvar ws = wb.ActiveSheet as Excel.Worksheet;\\nws.Name = ddName;\\nwb.SaveAs(excelFilePath, Excel.XlFileFormat.xlWorkbookDefault, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Excel.XlSaveAsAccessMode.xlNoChange);\\n\\n// Close workbook and quit Excel program\\nwb.Close();\\nexcelApp.Quit();\\nSystem.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);\\n\\n// Delete text file as it is no longer necessary\\ntry\\n{\\n    File.Delete(textFilePath);\\n}\\ncatch\\n{\\n}\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\BPA\\BPAScanFolder",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n\\nusing System.IO;\\nusing TabularEditor.BestPracticeAnalyzer;\\n\\nstring folderPath = @\\\"C:\\Desktop\\MyReport\\\"; // Enter the folder with your model files\\nstring textFilePath = folderPath + @\\\"\\BPAResults.txt\\\"; // This is where the output .txt file is saved\\n\\nvar sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\nsb.Append(\\\"ModelName\\\" + '\\t' + \\\"RuleCategory\\\" + '\\t' + \\\"RuleName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"RuleSeverity\\\" + '\\t' + \\\"HasFixExpression\\\" + '\\t' + \\\"RuleID\\\" + newline);\\n\\n// Extract all model files from the folderPath\\nstring fileTypeBIM = \\\"*.bim\\\";\\nstring fileTypeDJSON = \\\"database.json\\\";\\nstring fileTypeTMDL = \\\"model.tmd\\\";\\n\\nif (Directory.Exists(folderPath) == false)\\n{\\n    Error(\\\"Folder path specified in the 'folderPath' parameter is not valid. Please enter a valid folder path.\\\");\\n    return;\\n}\\n\\nstring[] files = Directory.GetFiles(folderPath, fileTypeBIM, SearchOption.AllDirectories).Concat(Directory.GetFiles(folderPath, fileTypeDJSON, SearchOption.AllDirectories)).Concat(Directory.GetFiles(folderPath, fileTypeTMDL, SearchOption.AllDirectories)).ToArray();\\n\\nif (files.Count() == 0)\\n{\\n    Warning(\\\"No model files found in the specified folder. Please specify a folder with one or more model files.\\\");\\n    return;\\n}\\n\\n// Loop through each model file and run BPA against the file\\nforeach (string filePath in files)\\n{\\n    // Extract model name\\n    string fileFolder = Path.GetFileName(Path.GetDirectoryName(filePath));\\n    string modelName = \\\"\\\";\\n    \\n    if (filePath.EndsWith(fileTypeDJSON) || filePath.EndsWith(fileTypeTMDL))\\n    {\\n        modelName = fileFolder;\\n    }\\n    else if (fileFolder.Contains(\\\".Dataset\\\"))\\n    {\\n        modelName = fileFolder.Substring(0,fileFolder.IndexOf(\\\".Dataset\\\"));\\n    }\\n    else if (Path.GetDirectoryName(filePath) == folderPath)\\n    {\\n        modelName = Path.GetFileNameWithoutExtension(filePath);\\n    }\\n    else\\n    {\\n        modelName = fileFolder;\\n    }\\n    \\n    // Run BPA against file\\n    var bpa = new Analyzer();\\n    var model = new TabularModelHandler(filePath).Model;    \\n    bpa.SetModel(model);\\n    \\n    foreach (var a in bpa.AnalyzeAll().ToList())\\n    {\\n        sb.Append(modelName + '\\t' + a.Rule.Category + '\\t' + a.RuleName + '\\t' + a.ObjectName + '\\t' + a.ObjectType + '\\t' + a.Rule.Severity + '\\t' + a.CanFix + '\\t' + a.Rule.ID + newline);\\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(textFilePath, sb.ToString());\\n\\nInfo(\\\"BPA Scan Completed. File saved in this folder: \\\" + folderPath);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\BaseMeasures",
      "Enabled": "true",
      "Execute": "var sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"MeasureName\\\");\\n\\nforeach (var m in Model.AllMeasures.ToList())\\n{\\n    var allReferences = m.DependsOn.Deep();\\n    \\n    if (!allReferences.Any(a => a.ObjectType.ToString() == \\\"Measure\\\"))\\n    {\\n        sb.Append(newline + m.Table.Name + '\\t' + m.Name);\\n    }\\n}\\n\\nsb.Output();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\BestPracticeRule_LongLengthColumns",
      "Enabled": "true",
      "Execute": "int maxLen = 100;\\nstring annName = \\\"LongLengthRowCount\\\";\\n\\nforeach (var c in Model.AllColumns.Where(a => a.DataType == DataType.String))\\n{\\n    string objName = c.DaxObjectFullName;\\n    var result = EvaluateDax(\\\"SUMMARIZECOLUMNS(\\\\\"test\\\\\",CALCULATE(COUNTROWS(DISTINCT(\\\"+objName+\\\")),LEN(\\\"+objName+\\\") > \\\"+maxLen+\\\"))\\\");\\n    \\n    c.SetAnnotation(annName,result.ToString());\\n    \\n    if (c.GetAnnotation(annName) == \\\"Table\\\")\\n    {\\n        c.SetAnnotation(annName,\\\"0\\\");\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\BestPracticeRule_SplitDateAndTime",
      "Enabled": "true",
      "Execute": "// Split Date/Time recommendation\\nstring annName = \\\"DateTimeWithHourMinSec\\\";\\nforeach (var c in Model.AllColumns.Where(a => a.DataType == DataType.DateTime))\\n{\\n    string objName = c.DaxObjectFullName;\\n    var result = ExecuteDax(\\\"EVALUATE TOPN(5,SUMMARIZECOLUMNS(\\\"+objName+\\\"))\\\").Tables[0];\\n\\n    for (int r = 0; r < result.Rows.Count; r++)\\n    {\\n        string resultValue = result.Rows[r][0].ToString();\\n        if (!resultValue.EndsWith(\\\"12:00:00 AM\\\"))\\n        {\\n            c.SetAnnotation(annName,\\\"Yes\\\");\\n            r=50;\\n        }\\n        else\\n        {\\n            c.SetAnnotation(annName,\\\"No\\\");\\n        }\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\BlankRowFinder",
      "Enabled": "true",
      "Execute": "var sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\nsb.Append(\\\"FromTable\\\" + '\\t' + \\\"ToTable\\\" + '\\t' + \\\"BlankRowCount\\\" + newline);\\n\\nforeach (var r in Model.Relationships.ToList())\\n{\\n    bool   act = r.IsActive;\\n    string fromTable = r.FromTable.Name;\\n    string toTable = r.ToTable.Name;\\n    string fromTableFull = r.FromTable.DaxObjectFullName;    \\n    string fromObject = r.FromColumn.DaxObjectFullName;\\n    string toObject = r.ToColumn.DaxObjectFullName;\\n    string dax;\\n    \\n    if (act)\\n    {\\n        dax = \\\"SUMMARIZECOLUMNS(\\\\\"test\\\\\",CALCULATE(COUNTROWS(\\\"+fromTableFull+\\\"),ISBLANK(\\\"+toObject+\\\")))\\\";\\n    }\\n    else\\n    {\\n        dax = \\\"SUMMARIZECOLUMNS(\\\\\"test\\\\\",CALCULATE(COUNTROWS(\\\"+fromTableFull+\\\"),USERELATIONSHIP(\\\"+fromObject+\\\",\\\"+toObject+\\\"),ISBLANK(\\\"+toObject+\\\")))\\\";\\n    }\\n    \\n    var daxResult = EvaluateDax(dax);\\n    string blankRowCount = daxResult.ToString();\\n    \\n    if (blankRowCount != \\\"Table\\\")\\n    {\\n        sb.Append(fromTable + '\\t' + toTable + '\\t' + blankRowCount + newline);        \\n    }\\n}\\n\\nsb.Output();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\CancelUserQuery",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.AnalysisServices.Core.dll\\\"\\n\\nvar DMV_Connections = ExecuteDax(\\\"SELECT [CONNECTION_ID],[CONNECTION_USER_NAME],[CONNECTION_LAST_COMMAND_ELAPSED_TIME_MS] FROM $SYSTEM.DISCOVER_CONNECTIONS\\\").Tables[0];\\nvar DMV_Sessions = ExecuteDax(\\\"SELECT [SESSION_SPID],[SESSION_CONNECTION_ID],[SESSION_USER_NAME] FROM $SYSTEM.DISCOVER_SESSIONS\\\").Tables[0];\\nvar DMV_Commands = ExecuteDax(\\\"SELECT [SESSION_SPID],[COMMAND_TEXT] FROM $SYSTEM.DISCOVER_COMMANDS\\\").Tables[0];\\n\\nint thresholdSec = 5*60; // Set the threshold (seconds)\\nstring[] userNames = { \\\"\\\" }; // Enter an array of user names for which you do not want queries to be cancelled\\n\\nthresholdSec = thresholdSec * 1000 // Convert to seconds\\n\\nfor (int r=0; r < DMV_Connections.Rows.Count; r++)\\n{\\n    string connID = DMV_Connections.Rows[r][0].ToString();\\n    string userName = DMV_Connections.Rows[r][1].ToString();\\n    int timeMS = Convert.ToInt32(DMV_Connections.Rows[r][2].ToString());\\n        \\n    if (!userNames.Contains(userName) && timeMS > thresholdSec) // do not cancel certain users\\n    {\\n        for (int a=0; a < DMV_Sessions.Rows.Count; a++)\\n        {\\n            string spid = DMV_Sessions.Rows[a][0].ToString();\\n            string sConnID = DMV_Sessions.Rows[a][1].ToString();\\n            \\n            for (int b=0; b < DMV_Commands.Rows.Count; b++)\\n            {\\n                string sp = DMV_Commands.Rows[b][0].ToString();\\n                string cmdText = DMV_Commands.Rows[b][1].ToString();\\n                \\n                if (connID == sConnID && sp == spid && !cmdText.StartsWith(\\\"<Batch Transaction=\\\")) // do not cancel processing events\\n                {\\n                    string cmd = @\\\"<Cancel xmlns=\\\"\\\"http://schemas.microsoft.com/analysisservices/2003/engine\\\"\\\"><SPID>\\\"+spid+\\\"</SPID><CancelAssociated>true</CancelAssociated></Cancel>\\\";\\n                                                        \\n                    try\\n                    {\\n                        ExecuteCommand(cmd,isXmla: true);\\n                        Info(\\\"SPID '\\\" + spid + \\\"' for user '\\\" + userName + \\\"' was cancelled.\\\");\\n                    }\\n                    catch\\n                    {\\n                        Error(\\\"SPID '\\\" + spid + \\\"' was not found.\\\");\\n                    }                                               \\n                }\\n            }                            \\n        }\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\ConvertStructuredToProvider",
      "Enabled": "true",
      "Execute": "// Loop through structured data sources\\nforeach (var ds in Model.DataSources.Where(a => a.Type.ToString() == \\\"Structured\\\").ToList())\\n{    \\n    string strdsName = ds.Name;\\n    var strDataSource = (Model.DataSources[strdsName] as StructuredDataSource);\\n    string serverName = strDataSource.Server;\\n    string dbName = strDataSource.Database;\\n    string userName = strDataSource.Username;\\n    \\n    // Create provider data source\\n    string provdsName = strdsName + \\\"1\\\";    \\n    var provDataSource = Model.AddDataSource(provdsName);\\n    string conn = \\\"Data Source=\\\"+serverName+\\\";Initial Catalog=\\\"+dbName+\\\";Persist Security Info=True\\\";\\n\\n    if (userName != null)\\n    {\\n        conn = conn + \\\";User ID=\\\"+userName;\\n    }\\n\\n    // Update provider data source connection string and provider\\n    provDataSource.ConnectionString = conn;\\n    provDataSource.Provider = \\\"System.Data.SqlClient\\\";\\n    \\n    // Update partitions to use the new provider data source\\n    foreach (var t in Model.Tables.ToList())\\n    {\\n        foreach (var p in t.Partitions.Where(a => a.DataSource.Name == strdsName).ToList())\\n        {\\n            p.DataSource = provDataSource;\\n        }\\n    }\\n    \\n    // Delete structured data source\\n    strDataSource.Delete();\\n\\n    // Rename provider data source\\n    Model.DataSources[provdsName].Name = strdsName;\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\DataPreview_Columns",
      "Enabled": "true",
      "Execute": "string dax = string.Empty;\\n\\nforeach (var x in Selected.Columns.ToList())\\n{\\n    dax = dax + x.DaxObjectFullName + \\\",\\\";\\n}\\n\\ndax = dax.Substring(0,dax.Length-1);\\nvar result = EvaluateDax(\\\"TOPN(500,SUMMARIZECOLUMNS(\\\"+dax+\\\")) ORDER BY \\\" + dax);\\nresult.Output();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\DataPreview_Table",
      "Enabled": "true",
      "Execute": "string tableName = Selected.Table.Name;\\n\\nvar result = EvaluateDax(\\\"TOPN(10,'\\\"+tableName+\\\"')\\\");\\nresult.Output();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\Descriptions\\ExportDescriptions",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"Microsoft.Office.Interop.Excel\\\"\\n\\nusing System.IO;\\nusing Excel = Microsoft.Office.Interop.Excel;\\n\\nstring filePath = @\\\"C:\\Desktop\\Descriptions\\\"; // Update this to be the desired location of the Descriptions file\\nstring excelFilePath = filePath + \\\".xlsx\\\"; \\nstring textFilePath = filePath + \\\".txt\\\";\\nstring excelTabName = \\\"ModelDescriptions\\\";\\nvar sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"HiddenFlag\\\" + '\\t' + \\\"Description\\\" + newline);\\n\\nforeach (var t in Model.Tables.Where(a => a.ObjectType.ToString() != \\\"CalculationGroupTable\\\").OrderBy(a => a.Name).ToList())\\n{\\n    string tableName = t.Name;\\n    string tableDesc = t.Description;\\n    string tblhid;\\n    \\n    if (t.IsHidden)\\n    {\\n        tblhid = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        tblhid = \\\"No\\\";\\n    }\\n    \\n    sb.Append(tableName + '\\t' + \\\"Table\\\" + '\\t' + tableName + '\\t' + tblhid + '\\t' + tableDesc + newline);\\n    \\n    foreach (var o in t.Columns.OrderBy(a => a.Name).ToList())\\n    {\\n        string objName = o.Name;\\n        string objDesc = o.Description;\\n        string objhid;\\n    \\n        if (o.IsHidden)\\n        {\\n            objhid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            objhid = \\\"No\\\";\\n        }\\n        \\n        sb.Append(tableName + '\\t' + \\\"Column\\\" + '\\t' + objName + '\\t' + objhid + '\\t' + objDesc + newline);        \\n    }\\n    \\n    foreach (var o in t.Measures.OrderBy(a => a.Name).ToList())\\n    {\\n        string objName = o.Name;\\n        string objDesc = o.Description;\\n        string objhid;\\n    \\n        if (o.IsHidden)\\n        {\\n            objhid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            objhid = \\\"No\\\";\\n        }\\n        \\n        sb.Append(tableName + '\\t' + \\\"Measure\\\" + '\\t' + objName + '\\t' + objhid + '\\t' + objDesc + newline);        \\n    }\\n    \\n    foreach (var o in t.Hierarchies.OrderBy(a => a.Name).ToList())\\n    {\\n        string objName = o.Name;\\n        string objDesc = o.Description;\\n        string objhid;\\n    \\n        if (o.IsHidden)\\n        {\\n            objhid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            objhid = \\\"No\\\";\\n        }\\n        \\n        sb.Append(tableName + '\\t' + \\\"Hierarchy\\\" + '\\t' + objName + '\\t' + objhid + '\\t' + objDesc + newline);        \\n    }    \\n}\\n\\nforeach (var o in Model.CalculationGroups.OrderBy(a => a.Name).ToList())\\n{\\n    string tableName = o.Name;\\n    string tableDesc = o.Description;\\n    string tblhid;\\n    \\n    if (o.IsHidden)\\n    {\\n        tblhid = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        tblhid = \\\"No\\\";\\n    }\\n    \\n    sb.Append(tableName + '\\t' + \\\"Calculation Group\\\" + '\\t' + tableName + '\\t' + tblhid + '\\t' + tableDesc + newline);  \\n    \\n    foreach (var i in o.CalculationItems.ToList())\\n    {        \\n        string objName = i.Name;\\n        string objDesc = i.Description;\\n        \\n        sb.Append(tableName + '\\t' + \\\"Calculation Item\\\" + '\\t' + objName + '\\t' + \\\"No\\\" + '\\t' + objDesc + newline);        \\n    }\\n}\\n\\n// Delete existing text/Excel files\\ntry\\n{\\n    File.Delete(textFilePath);\\n    File.Delete(excelFilePath);\\n}\\ncatch\\n{\\n}\\n\\n// Save to text file\\nSaveFile(textFilePath, sb.ToString());\\n\\n// Save to Excel file\\nvar excelApp = new Excel.Application();\\nexcelApp.Visible = false;\\nexcelApp.DisplayAlerts = false;\\nexcelApp.Workbooks.OpenText(textFilePath, 65001, 1, Excel.XlTextParsingType.xlDelimited, Excel.XlTextQualifier.xlTextQualifierNone, false, true, false, false, false, false, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, true, Type.Missing);\\n\\nvar wb = excelApp.ActiveWorkbook;\\nvar ws = wb.ActiveSheet as Excel.Worksheet;\\nws.Name = excelTabName;\\nwb.SaveAs(excelFilePath, Excel.XlFileFormat.xlWorkbookDefault, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Excel.XlSaveAsAccessMode.xlNoChange);\\n\\n// Close workbook and quit Excel program\\nwb.Close();\\nexcelApp.Quit();\\nSystem.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);\\n\\n// Delete text file as it is no longer necessary\\ntry\\n{\\n    File.Delete(textFilePath);\\n}\\ncatch\\n{\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\Descriptions\\ImportDescriptions",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"Microsoft.Office.Interop.Excel\\\"\\n\\nusing System.IO;\\nusing Excel = Microsoft.Office.Interop.Excel;\\n\\nstring filePath = @\\\"C:\\Desktop\\Descriptions\\\"; // Update this to be the location of the Descriptions file\\nstring excelFilePath = filePath + \\\".xlsx\\\"; \\nstring excelTabName = \\\"ModelDescriptions\\\";\\n\\n// Open Excel\\nvar excelApp = new Excel.Application();\\nexcelApp.Visible = false;\\nexcelApp.DisplayAlerts = false;\\n\\n// Open Workbook, Worksheet\\nvar wb = excelApp.Workbooks.Open(excelFilePath); \\nvar ws = wb.Worksheets[excelTabName] as Excel.Worksheet;\\n\\n// Count rows and columns\\nExcel.Range xlRange = ws.UsedRange;\\n\\nint rowCount = xlRange.Rows.Count;\\n\\nfor (int r = 2; r <= rowCount; r++)\\n{\\n    string tableName = (string)(ws.Cells[r,1] as Excel.Range).Text.ToString();\\n    string objType = (string)(ws.Cells[r,2] as Excel.Range).Text.ToString();\\n    string objName = (string)(ws.Cells[r,3] as Excel.Range).Text.ToString();\\n    string desc = (string)(ws.Cells[r,5] as Excel.Range).Text.ToString();\\n    \\n    if (objType == \\\"Table\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Column\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Columns[objName].Description = desc;\\n        }\\n        catch\\n        {            \\n        }\\n    }\\n    else if (objType == \\\"Measure\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Measures[objName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Hierarchy\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Hierarchies[objName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Calculation Group\\\")\\n    {\\n        try\\n        {\\n            Model.Tables[tableName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n    else if (objType == \\\"Calculation Item\\\")\\n    {\\n        try\\n        {\\n            (Model.Tables[tableName] as CalculationGroupTable).CalculationItems[objName].Description = desc;\\n        }\\n        catch\\n        {\\n        }\\n    }\\n}\\n\\n// Close workbook and quit Excel program\\nwb.Close();\\nexcelApp.Quit();\\nSystem.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\ExportBPAResults",
      "Enabled": "true",
      "Execute": "using TabularEditor.BestPracticeAnalyzer; \\n//using TabularEditor.Shared.BPA; // Use this instead of the first line when using Tabular Editor 3\\n\\nvar bpa = new Analyzer();\\nbpa.SetModel(Model);\\n\\nvar sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\nsb.Append(\\\"RuleCategory\\\" + '\\t' + \\\"RuleName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"RuleSeverity\\\" + '\\t' + \\\"HasFixExpression\\\" + newline);\\n\\nforeach (var a in bpa.AnalyzeAll().ToList())\\n{\\n    sb.Append(a.Rule.Category + '\\t' + a.RuleName + '\\t' + a.ObjectName + '\\t' + a.ObjectType + '\\t' + a.Rule.Severity + '\\t' + a.CanFix + newline);\\n}\\n\\nsb.Output();\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\ExportReportObjects",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"System.IO.Compression.FileSystem\\\"\\n\\nusing System.IO;\\nusing System.IO.Compression;\\n\\n/************************************************************************************************************\\n\\n    Instructions:\\n\\n    1. Paste this code into the Advanced Scripting window of Tabular Editor.\\n    2. Create a new model in Tabular Editor (File -> New Model) (Compatibility Level does not matter).\\n    3. Choose a method below and follow its respective steps.\\n\\n    Method 1: For a single Power BI Desktop (.pbix) or Power BI Template (.pbit) file:\\n        1. Enter the folder location of the file in the 'pbiFolderName' parameter.\\n        2. Enter the file name (including the extension) in the 'pbiFile' parameter.\\n    \\n        // You must open the model/dataset (behind the Power BI Report) in Tabular Editor in order for the following steps to work properly.\\n        3. Setting the 'addPersp' parameter to 'true' will create a new perspective which contains all of the objects used in the Power BI report including object dependencies.\\n        4. (Optional) Set the 'perspName' parameter to set the name of the perspective referenced in Step 3.\\n\\n    Method 2: For looping through multiple .pbix or .pbit files within a folder:\\n        1. Enter the location of the folder in the 'pbiFolderName' parameter.\\n        2. Ensure that the pbiFile parameter is empty (should be this:  @\\\"\\\"; ).\\n\\n    Setting the 'saveToFile' parameter to 'true' will save the output text files to the respective folder.\\n    Setting the 'saveToFile' parameter to 'false' will generate the output within pop-up windows. \\n\\n************************************************************************************************************/\\n\\n// User Parameters\\nstring pbiFolderName = @\\\"C:\\Desktop\\MyReport\\\";\\nstring pbiFile = @\\\"MyReport.pbix\\\";\\nbool saveToFile = true;\\nbool addPersp = false;\\nstring perspName = \\\"RptObj\\\";\\n\\n// Do not modify these parameters\\nstring newline = Environment.NewLine;\\nstring savePrefix = \\\"ReportObjects\\\";\\nbool singleFile = true;\\nbool createPersp = false;\\nif (pbiFile.Length == 0)\\n{\\n    singleFile = false;\\n}\\n\\nif (singleFile && addPersp)\\n{\\n    createPersp = true;\\n    if (Model.Perspectives.Any(a => a.Name == perspName))\\n    {\\n        Model.Perspectives[perspName].Delete();\\n    }\\n    Model.AddPerspective(perspName);\\n}\\n\\nList<string> FileList = new List<string>();\\n\\nvar sb_CustomVisuals = new System.Text.StringBuilder();\\nsb_CustomVisuals.Append(\\\"ReportName\\\" + '\\t' + \\\"CustomVisualName\\\" + newline);\\n\\nvar sb_ReportFilters = new System.Text.StringBuilder();\\nsb_ReportFilters.Append(\\\"ReportName\\\" + '\\t' + \\\"FilterName\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"FilterType\\\" + newline);\\n\\nvar sb_VisualObjects = new System.Text.StringBuilder();\\nsb_VisualObjects.Append(\\\"ReportName\\\" + '\\t' + \\\"PageName\\\" + '\\t' + \\\"VisualId\\\" + '\\t' + \\\"VisualType\\\" + '\\t' + \\\"CustomVisualFlag\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"Source\\\" + newline);\\n\\nvar sb_VisualFilters = new System.Text.StringBuilder();\\nsb_VisualFilters.Append(\\\"ReportName\\\" + '\\t' + \\\"PageName\\\" + '\\t' + \\\"VisualId\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"FilterType\\\" + newline);\\n\\nvar sb_PageFilters = new System.Text.StringBuilder();\\nsb_PageFilters.Append(\\\"ReportName\\\" + '\\t' + \\\"PageId\\\" + '\\t' + \\\"PageName\\\" + '\\t' + \\\"FilterName\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"FilterType\\\" + newline);\\n\\nvar sb_Bookmarks = new System.Text.StringBuilder();\\nsb_Bookmarks.Append(\\\"ReportName\\\" + '\\t' + \\\"BookmarkName\\\" + '\\t' + \\\"BookmarkId\\\" + '\\t' + \\\"PageId\\\" + '\\t' + \\\"VisualId\\\" + '\\t' + \\\"VisualHiddenFlag\\\" + newline);\\n\\nvar sb_Pages = new System.Text.StringBuilder();\\nsb_Pages.Append(\\\"ReportName\\\" + '\\t' + \\\"PageId\\\" + '\\t' + \\\"PageName\\\" + '\\t' + \\\"PageNumber\\\" + '\\t' + \\\"PageWidth\\\" + '\\t' + \\\"PageHeight\\\" + '\\t' + \\\"PageHiddenFlag\\\" + '\\t' + \\\"VisualCount\\\" + '\\t' + \\\"PageBackgroundImage\\\" + '\\t' + \\\"PageWallpaperImage\\\" + '\\t' + \\\"PageType\\\" + newline);\\n\\nvar sb_Visuals = new System.Text.StringBuilder();\\nsb_Visuals.Append(\\\"ReportName\\\" + '\\t' + \\\"PageName\\\" + '\\t' + \\\"VisualId\\\" + '\\t' + \\\"VisualName\\\" + '\\t' + \\\"VisualType\\\" + '\\t' + \\\"CustomVisualFlag\\\" + '\\t' + \\\"VisualHiddenFlag\\\" + '\\t' + \\\"X_Coordinate\\\" + '\\t' + \\\"Y_Coordinate\\\" + '\\t' + \\\"Z_Coordinate\\\" + '\\t' + \\\"VisualWidth\\\" + '\\t' + \\\"VisualHeight\\\" + '\\t' + \\\"ObjectCount\\\" + '\\t' + \\\"ShowItemsNoDataFlag\\\" + '\\t' + \\\"SlicerType\\\" + '\\t' + \\\"ParentGroup\\\" + newline);\\n\\nvar sb_Connections = new System.Text.StringBuilder();\\nsb_Connections.Append(\\\"ReportName\\\" + '\\t' + \\\"ServerName\\\" + '\\t' + \\\"DatabaseName\\\" + '\\t' + \\\"ReportId\\\" + '\\t' + \\\"ConnectionType\\\" + newline);\\n\\nvar sb_VisualInteractions = new System.Text.StringBuilder();\\nsb_VisualInteractions.Append(\\\"ReportName\\\" + '\\t' + \\\"PageName\\\" + '\\t' + \\\"SourceVisualID\\\" + '\\t' + \\\"TargetVisualID\\\" + '\\t' + \\\"TypeID\\\" + '\\t' + \\\"Type\\\" + newline);\\n\\nif (pbiFile.Length > 0 && pbiFolderName.Length == 0)\\n{\\n    Error(\\\"If specifying the 'pbiFile' you must also specify the 'pbiFolderName'.\\\");\\n    return;\\n}    \\nelse if (pbiFile.Length == 0 && pbiFolderName.Length > 0)\\n{\\n    foreach (var x in System.IO.Directory.GetFiles(pbiFolderName, \\\"*.pbi*\\\"))\\n    {\\n        FileList.Add(x);\\n    }\\n}\\nelse\\n{\\n    FileList.Add(pbiFolderName + @\\\"\\\\\" + pbiFile);\\n}\\n\\nforeach (var rpt in FileList)\\n{\\n    var CustomVisuals = new List<CustomVisual>();\\n    var Bookmarks = new List<Bookmark>();\\n    var ReportFilters = new List<ReportFilter>();\\n    var Visuals = new List<Visual>();\\n    var VisualObjects = new List<VisualObject>();\\n    var VisualFilters = new List<VisualFilter>();\\n    var PageFilters = new List<PageFilter>();\\n    var Pages = new List<Page>();\\n    var Connections = new List<Connection>();\\n    var VisualInteractions = new List<VisualInteraction>();\\n    string fileExt = Path.GetExtension(rpt);\\n    string fileName = Path.GetFileNameWithoutExtension(rpt);\\n    string folderName = Path.GetDirectoryName(rpt) + @\\\"\\\\\";\\n    string zipPath = folderName + fileName + \\\".zip\\\";\\n    string unzipPath = folderName + fileName;\\n\\n    if (! (fileExt == \\\".pbix\\\" || fileExt == \\\".pbit\\\"))\\n    {\\n        Error(\\\"'\\\" +rpt+ \\\"is not a valid file. File(s) must be a valid .pbix or .pbit.\\\");\\n        return;\\n    }\\n\\n    try\\n    {\\n        // Make a copy of a pbi and turn it into a zip file\\n        File.Copy(rpt, zipPath);\\n        // Unzip file\\n        System.IO.Compression.ZipFile.ExtractToDirectory(zipPath, unzipPath);\\n        // Delete zip file\\n        File.Delete(zipPath);\\n    }\\n    catch\\n    {\\n        Error(\\\"File does not exist. Must use a valid .pbix or .pbit file\\\");\\n        return;\\n    }\\n\\n    // Layout file\\n    string layoutPath = unzipPath + @\\\"\\Report\\Layout\\\";\\n    string jsonFilePath = Path.ChangeExtension(layoutPath, \\\".json\\\");\\n    File.Move(layoutPath, jsonFilePath); \\n\\n    string unformattedJson = File.ReadAllText(jsonFilePath,System.Text.UnicodeEncoding.Unicode);\\n    string formattedJson = Newtonsoft.Json.Linq.JToken.Parse(unformattedJson).ToString();\\n    dynamic json = Newtonsoft.Json.Linq.JObject.Parse(formattedJson);\\n    \\n    // Connections file\\n    string svName = string.Empty;\\n    string dbName = string.Empty;\\n    string rptId = string.Empty;\\n    string connType = string.Empty;\\n    string connPath = unzipPath + @\\\"\\Connections\\\";\\n    if (File.Exists(connPath))\\n    {        \\n        string jsonconnFilePath = Path.ChangeExtension(connPath, \\\".json\\\");\\n        File.Move(connPath, jsonconnFilePath); \\n\\n        string unformattedconnJson = File.ReadAllText(jsonconnFilePath,System.Text.Encoding.UTF8);\\n        string formattedconnJson = Newtonsoft.Json.Linq.JToken.Parse(unformattedconnJson).ToString();\\n        dynamic connjson = Newtonsoft.Json.Linq.JObject.Parse(formattedconnJson);\\n        \\n        // Connection info\\n        try\\n        {\\n            foreach (var o in connjson[\\\"Connections\\\"].Children())\\n            {\\n                connType = (string)o[\\\"ConnectionType\\\"];\\n                try\\n                {\\n                    \\n                    dbName = (string)o[\\\"PbiModelDatabaseName\\\"];\\n                }\\n                catch\\n                {\\n                }\\n                if (connType != \\\"pbiServiceLive\\\")\\n                {\\n                    try\\n                    {\\n                        \\n                        string x = (string)o[\\\"ConnectionString\\\"];\\n                        string dsCatch = \\\"Data Source=\\\";\\n                        string icCatch = \\\";Initial Catalog=\\\";\\n                        int dsCatchLen = dsCatch.Length;\\n                        int icCatchLen = icCatch.Length;\\n                        svName = x.Substring(x.IndexOf(dsCatch)+dsCatchLen,x.IndexOf(\\\";\\\")-x.IndexOf(dsCatch)-dsCatchLen);\\n                        int svNameLen = svName.Length;\\n                        dbName = x.Substring(x.IndexOf(icCatch)+icCatchLen);\\n                        \\n                    }\\n                    catch\\n                    {                    \\n                    }\\n                }            \\n            }\\n        }\\n        catch\\n        {\\n            try\\n            {\\n                dbName = (string)connjson[\\\"RemoteArtifacts\\\"][0][\\\"DatasetId\\\"];\\n                rptId = (string)connjson[\\\"RemoteArtifacts\\\"][0][\\\"ReportId\\\"];\\n                connType = \\\"localPowerQuery\\\";\\n            }\\n            catch\\n            {\\n            }\\n        }\\n        Connections.Add(new Connection {ServerName = svName, DatabaseName = dbName, Type = connType, ReportID = rptId});        \\n    }\\n    \\n    //Delete previously created folder\\n    try\\n    {\\n        Directory.Delete(folderName + fileName,true);\\n    }\\n    catch\\n    {\\n    }\\n\\n    // Custom Visuals\\n    try\\n    {\\n        foreach (var o in json[\\\"resourcePackages\\\"].Children())\\n        {\\n            int resType = (int)o[\\\"resourcePackage\\\"][\\\"type\\\"];\\n            string visualName = (string)o[\\\"resourcePackage\\\"][\\\"name\\\"];\\n                \\n            if (resType == 0)\\n            {            \\n                CustomVisuals.Add( new CustomVisual {Name = visualName});\\n            }\\n            else if (resType == 1)\\n            {\\n                try\\n                {\\n                    // Create list of images used\\n                    foreach (var o2 in o[\\\"resourcePackage\\\"][\\\"items\\\"].Children())\\n                    {\\n                        string imageName = o2[\\\"path\\\"];\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n        }\\n    }\\n    catch\\n    {\\n    }\\n\\n    // Report-Level Filters\\n    string rptFilters = json[\\\"filters\\\"];\\n\\n    try\\n    {\\n        string formattedrptfiltersJson = Newtonsoft.Json.Linq.JToken.Parse(rptFilters).ToString();\\n        dynamic rptFiltersJson = Newtonsoft.Json.Linq.JArray.Parse(formattedrptfiltersJson);\\n\\n        foreach (var o in rptFiltersJson.Children())\\n        {\\n            string filterName = (string)o[\\\"name\\\"];\\n            string filterType = (string)o[\\\"type\\\"];\\n            string objectType = string.Empty;\\n            string objectName = string.Empty;\\n            string tableName = string.Empty;\\n            \\n            // Note: Add filter conditions\\n            try\\n            {\\n                objectName = (string)o[\\\"expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                objectType = \\\"Column\\\";\\n                tableName = (string)o[\\\"expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                \\n                if (createPersp)\\n                {\\n                    try\\n                    {\\n                        Model.Tables[tableName].Columns[objectName].InPerspective[perspName] = true;\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            try\\n            {\\n                objectName = (string)o[\\\"expression\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                objectType = \\\"Measure\\\";\\n                tableName = (string)o[\\\"expression\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                \\n                if (createPersp)\\n                {\\n                    try\\n                    {\\n                        Model.Tables[tableName].Measures[objectName].InPerspective[perspName] = true;\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            try\\n            {\\n                string levelName = (string)o[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Level\\\"];\\n                string hierName = (string)o[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Hierarchy\\\"];\\n                objectName = hierName + \\\".\\\" + levelName;\\n                objectType = \\\"Hierarchy\\\";\\n                tableName = (string)o[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                \\n                if (createPersp)\\n                {\\n                    try\\n                    {\\n                        Model.Tables[tableName].Hierarchies[hierName].InPerspective[perspName] = true;\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }           \\n            ReportFilters.Add(new ReportFilter {FilterName = filterName, TableName = tableName, ObjectName = objectName, ObjectType = objectType, FilterType = filterType});\\n        }\\n    }\\n    catch\\n    {        \\n    }\\n\\n    // Pages\\n    foreach (var o in json[\\\"sections\\\"].Children())\\n    {\\n        string pageId = (string)o[\\\"name\\\"];\\n        string pageName = (string)o[\\\"displayName\\\"];\\n        string pageFlt = (string)o[\\\"filters\\\"];\\n        int pageNumber = 0;\\n        try\\n        {\\n            pageNumber = (int)o[\\\"ordinal\\\"];\\n        }\\n        catch\\n        {\\n        }\\n        int pageWidth = (int)o[\\\"width\\\"];\\n        int pageHeight = (int)o[\\\"height\\\"];\\n        int visualCount = (int)o[\\\"visualContainers\\\"].Count;\\n        string pageBkgrd = \\\"\\\";\\n        string pageWall = \\\"\\\";\\n        string formattedpagfltJson = Newtonsoft.Json.Linq.JToken.Parse(pageFlt).ToString();\\n        dynamic pageFltJson = Newtonsoft.Json.Linq.JArray.Parse(formattedpagfltJson);\\n        int displayOpt = (int)o[\\\"displayOption\\\"];\\n        bool pageHid = false;\\n        string pageType = string.Empty;\\n        string pageConfig = (string)o[\\\"config\\\"];\\n        string formattedpagconfigJson = Newtonsoft.Json.Linq.JToken.Parse(pageConfig).ToString();\\n        dynamic pageConfigJson = Newtonsoft.Json.Linq.JObject.Parse(formattedpagconfigJson);\\n\\n        try\\n        {\\n            int pageV = (int)pageConfigJson[\\\"visibility\\\"];\\n\\n            if (pageV == 1)\\n            {\\n                pageHid = true;\\n            }\\n        }\\n        catch\\n        {            \\n        }\\n        \\n        // Visual Interactions\\n        try\\n        {\\n            foreach (var o2 in pageConfigJson[\\\"relationships\\\"].Children())\\n            {\\n                string sourceViz = (string)o2[\\\"source\\\"];\\n                string targetViz = (string)o2[\\\"target\\\"];\\n                int typeID = (int)o2[\\\"type\\\"];\\n                string[] typeAr = {\\\"blank\\\", \\\"Filter\\\", \\\"Highlight\\\", \\\"None\\\"};\\n                string type = typeAr[typeID];\\n                \\n                VisualInteractions.Add(new VisualInteraction {PageName = pageName, SourceVisualID = sourceViz, TargetVisualID = targetViz, TypeID = typeID, Type = type});\\n            }\\n        }\\n        catch\\n        {\\n        }\\n        \\n        // Page Background\\n        try\\n        {\\n            pageBkgrd = pageConfigJson[\\\"objects\\\"][\\\"background\\\"][0][\\\"properties\\\"][\\\"image\\\"][\\\"image\\\"][\\\"url\\\"][\\\"expr\\\"][\\\"ResourcePackageItem\\\"][\\\"ItemName\\\"];\\n        }\\n        catch\\n        {\\n        }\\n        \\n        // Page Wallpaper\\n        try\\n        {\\n            pageWall = pageConfigJson[\\\"objects\\\"][\\\"outspace\\\"][0][\\\"properties\\\"][\\\"image\\\"][\\\"image\\\"][\\\"url\\\"][\\\"expr\\\"][\\\"ResourcePackageItem\\\"][\\\"ItemName\\\"];\\n        }\\n        catch\\n        {\\n        }\\n        \\n        // Page Type\\n        if (displayOpt == 3 && pageWidth == 320 && pageHeight == 240)\\n        {\\n            pageType = \\\"Tooltip\\\";\\n        }\\n        else if (pageWidth == 816 && pageHeight == 1056)\\n        {\\n            pageType = \\\"Letter\\\";\\n        }\\n        else if (pageWidth == 960 && pageHeight == 720)            \\n        {\\n            pageType = \\\"4:3\\\";\\n        }\\n        else if (pageWidth == 1280 && pageHeight == 720)\\n        {\\n            pageType = \\\"16:9\\\";\\n        }\\n        else\\n        {\\n            pageType = \\\"Custom\\\";\\n        }\\n        \\n        Pages.Add(new Page {Id = pageId, Name = pageName, Number = pageNumber, Width = pageWidth, Height = pageHeight, HiddenFlag = pageHid, VisualCount = visualCount, BackgroundImage = pageBkgrd, WallpaperImage = pageWall, Type = pageType });\\n\\n        // Page-Level Filters\\n        foreach (var o2 in pageFltJson.Children())\\n        {\\n            string pgFltName = (string)o2[\\\"name\\\"];\\n            string pgFltType = (string)o2[\\\"type\\\"];\\n            string objType = string.Empty;\\n            string objName = string.Empty;\\n            string tblName = string.Empty;\\n            \\n            // Note: Add filter conditions\\n            try\\n            {\\n                objName = (string)o2[\\\"expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                objType = \\\"Column\\\";\\n                tblName = (string)o2[\\\"expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                \\n                if (createPersp)\\n                {\\n                    try\\n                    {\\n                        Model.Tables[tblName].Columns[objName].InPerspective[perspName] = true;\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            try\\n            {\\n                objName = (string)o2[\\\"expression\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                objType = \\\"Measure\\\";\\n                tblName = (string)o2[\\\"expression\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                \\n                if (createPersp)\\n                {\\n                    try\\n                    {\\n                        Model.Tables[tblName].Measures[objName].InPerspective[perspName] = true;\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            try\\n            {\\n                string levelName = (string)o2[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Level\\\"];\\n                string hierName = (string)o2[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Hierarchy\\\"];\\n                objName = hierName + \\\".\\\" + levelName;\\n                objType = \\\"Hierarchy\\\";\\n                tblName = (string)o2[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                \\n                if (createPersp)\\n                {\\n                    try\\n                    {\\n                        Model.Tables[tblName].Hierarchies[hierName].InPerspective[perspName] = true;\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            PageFilters.Add(new PageFilter {PageId = pageId, PageName = pageName, FilterName = pgFltName, TableName = tblName, ObjectName = objName, ObjectType = objType, FilterType = pgFltType });\\n        }\\n\\n        // Visuals\\n        foreach (var vc in o[\\\"visualContainers\\\"].Children())\\n        {                        \\n            string config = (string)vc[\\\"config\\\"];\\n            string formattedconfigJson = Newtonsoft.Json.Linq.JToken.Parse(config).ToString();\\n            dynamic configJson = Newtonsoft.Json.Linq.JObject.Parse(formattedconfigJson);\\n            string visualId = (string)configJson[\\\"name\\\"];\\n            int cx = Convert.ToInt32(Math.Ceiling((double)vc[\\\"x\\\"]));\\n            int cy = Convert.ToInt32(Math.Ceiling((double)vc[\\\"y\\\"]));\\n            int cz = Convert.ToInt32(Math.Ceiling((double)vc[\\\"z\\\"]));\\n            int cw = Convert.ToInt32(Math.Ceiling((double)vc[\\\"width\\\"]));\\n            int ch = Convert.ToInt32(Math.Ceiling((double)vc[\\\"height\\\"]));\\n            string visualType = string.Empty;\\n            string visualName = string.Empty;\\n            bool customVisualFlag = false;\\n            int objCount = 0;\\n            bool visHid = false;\\n            bool showItemsNoData = false;\\n            string slicerType = \\\"N/A\\\";\\n            string parentGroup = string.Empty;\\n            \\n            try\\n            {\\n                parentGroup = (string)configJson[\\\"parentGroupName\\\"];\\n            }\\n            catch\\n            {\\n            }         \\n            \\n            // Show Items With No Data\\n            try\\n            {\\n                string sInd = (string)configJson[\\\"singleVisual\\\"][\\\"showAllRoles\\\"][0];\\n                \\n                if (sInd == \\\"Values\\\")\\n                {\\n                    showItemsNoData = true;\\n                }\\n            }\\n            catch\\n            {\\n            }                \\n\\n            try\\n            {\\n                visualType = (string)configJson[\\\"singleVisual\\\"][\\\"visualType\\\"];\\n            }\\n            catch\\n            {\\n                visualType = \\\"visualGroup\\\";\\n            }\\n            \\n            if (CustomVisuals.Exists(a => a.Name == visualType))\\n            {\\n                customVisualFlag = true;\\n            }\\n\\n            // Visual Name\\n            try\\n            {\\n                visualName = (string)configJson[\\\"singleVisualGroup\\\"][\\\"displayName\\\"];\\n            }\\n            catch\\n            {\\n            }\\n            try\\n            {\\n                visualName = (string)configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"][0][\\\"properties\\\"][\\\"text\\\"][\\\"expr\\\"][\\\"Literal\\\"][\\\"Value\\\"];\\n                visualName = visualName.Substring(1,visualName.Length-2);\\n            }\\n            catch\\n            {\\n            }\\n            if (visualName.Length == 0)\\n            {\\n                visualName = visualType;\\n            }\\n\\n            // Visual Hidden\\n            try\\n            {\\n                string visH = (string)configJson[\\\"singleVisual\\\"][\\\"display\\\"][\\\"mode\\\"];\\n\\n                if (visH == \\\"hidden\\\")\\n                {\\n                    visHid = true;\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            if (visualType == \\\"slicer\\\")\\n            {\\n                try\\n                {\\n                    string sT = (string)configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"data\\\"][0][\\\"properties\\\"][\\\"mode\\\"][\\\"expr\\\"][\\\"Literal\\\"][\\\"Value\\\"];\\n\\n                    if (sT == \\\"'Basic'\\\")\\n                    {\\n                        slicerType = \\\"List\\\";\\n                    }\\n                    else if (sT == \\\"'Dropdown'\\\")\\n                    {\\n                        slicerType = \\\"Dropdown\\\";\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n            }\\n\\n            try\\n            {\\n                bool visH = (bool)configJson[\\\"singleVisualGroup\\\"][\\\"isHidden\\\"];\\n\\n                if (visH)\\n                {\\n                    visHid = true;\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // Visual Objects\\n            try\\n            {\\n                objCount = configJson[\\\"singleVisual\\\"][\\\"prototypeQuery\\\"][\\\"Select\\\"].Count;\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"prototypeQuery\\\"][\\\"Select\\\"].Children())\\n                {\\n                    string objectType = string.Empty;\\n                    string tableName = string.Empty;\\n                    string objectName = string.Empty;\\n                    string src = string.Empty;\\n                    bool isSpark = false;\\n                    string sourceLabel = \\\"Standard\\\";\\n                    \\n                    try\\n                    {\\n                        objectName = (string)o2[\\\"Column\\\"][\\\"Property\\\"];\\n                        objectType = \\\"Column\\\";\\n                        src = (string)o2[\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Source\\\"];\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    try\\n                    {\\n                        objectName = (string)o2[\\\"Measure\\\"][\\\"Property\\\"];\\n                        objectType = \\\"Measure\\\";\\n                        src = (string)o2[\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Source\\\"];\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    try\\n                    {\\n                        string levelName = (string)o2[\\\"HierarchyLevel\\\"][\\\"Level\\\"];\\n                        string hierName = (string)o2[\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Hierarchy\\\"];\\n                        objectName = hierName + \\\".\\\" + levelName;\\n                        objectType = \\\"Hierarchy\\\";\\n                        src = (string)o2[\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Source\\\"];\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    try\\n                    {\\n                        objectName = (string)o2[\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        objectType = \\\"Column\\\";\\n                        src = (string)o2[\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Source\\\"];\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    // Sparklines\\n                    try\\n                    {\\n                        objectName = (string)o2[\\\"SparklineData\\\"][\\\"Measure\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        objectType = \\\"Measure\\\";\\n                        src = (string)o2[\\\"SparklineData\\\"][\\\"Measure\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Source\\\"];\\n                        isSpark = true;\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    try\\n                    {\\n                        objectName = (string)o2[\\\"SparklineData\\\"][\\\"Measure\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        objectType = \\\"Column\\\";\\n                        src = (string)o2[\\\"SparklineData\\\"][\\\"Measure\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Source\\\"];\\n                        isSpark = true;\\n                    }\\n                    catch\\n                    {\\n                    }                  \\n\\n                    foreach (var t in configJson[\\\"singleVisual\\\"][\\\"prototypeQuery\\\"][\\\"From\\\"].Children())\\n                    {\\n                        string n = (string)t[\\\"Name\\\"];\\n                        string tbl = (string)t[\\\"Entity\\\"];\\n\\n                        if (src == n)\\n                        {\\n                            tableName = tbl;\\n                        }\\n                    }\\n                    \\n                    if (createPersp)\\n                    {\\n                        if (objectType == \\\"Column\\\")\\n                        {\\n                            try\\n                            {\\n                                Model.Tables[tableName].Columns[objectName].InPerspective[perspName] = true;\\n                            }\\n                            catch\\n                            {\\n                            }\\n                        }\\n                        else if (objectType == \\\"Measure\\\")\\n                        {\\n                            try\\n                            {\\n                                Model.Tables[tableName].Measures[objectName].InPerspective[perspName] = true;\\n                            }\\n                            catch\\n                            {\\n                            }\\n                        }\\n                        else if (objectType == \\\"Hierarchy\\\")\\n                        {\\n                            try\\n                            {\\n                                Model.Tables[tableName].Hierarchies[objectName].InPerspective[perspName] = true;\\n                            }\\n                            catch\\n                            {\\n                            }\\n                        }\\n                    }\\n                    \\n                    if (isSpark)\\n                    {\\n                        sourceLabel = \\\"Sparkline\\\";\\n                    }\\n                        \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sourceLabel});\\n                    \\n                    if (isSpark)\\n                    {\\n                        try\\n                        {\\n                            objectName = (string)o2[\\\"SparklineData\\\"][\\\"Groupings\\\"][0][\\\"Column\\\"][\\\"Property\\\"];\\n                            objectType = \\\"Column\\\";\\n                            src = (string)o2[\\\"SparklineData\\\"][\\\"Groupings\\\"][0][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Source\\\"];\\n                            isSpark = true;\\n                            \\n                            foreach (var t in configJson[\\\"singleVisual\\\"][\\\"prototypeQuery\\\"][\\\"From\\\"].Children())\\n                            {\\n                                string n = (string)t[\\\"Name\\\"];\\n                                string tbl = (string)t[\\\"Entity\\\"];\\n\\n                                if (src == n)\\n                                {\\n                                    tableName = tbl;\\n                                }\\n                            }\\n                                                        \\n                            VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sourceLabel});\\n                            \\n                            if (createPersp)\\n                            {\\n                                if (objectType == \\\"Column\\\")\\n                                {\\n                                    try\\n                                    {\\n                                        Model.Tables[tableName].Columns[objectName].InPerspective[perspName] = true;\\n                                    }\\n                                    catch\\n                                    {\\n                                    }\\n                                }\\n                                else if (objectType == \\\"Measure\\\")\\n                                {\\n                                    try\\n                                    {\\n                                        Model.Tables[tableName].Measures[objectName].InPerspective[perspName] = true;\\n                                    }\\n                                    catch\\n                                    {\\n                                    }\\n                                }\\n                                else if (objectType == \\\"Hierarchy\\\")\\n                                {\\n                                    try\\n                                    {\\n                                        Model.Tables[tableName].Hierarchies[objectName].InPerspective[perspName] = true;\\n                                    }\\n                                    catch\\n                                    {\\n                                    }\\n                                }\\n                            }\\n                        }\\n                        catch\\n                        {\\n                        }\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            \\n            // VisualObjects in Labels\\n            try\\n            {\\n                string sc = \\\"Label\\\";\\n\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"labels\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"labels\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"labels\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"labels\\\"].Children())\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // VisualObjects in CategoryAxis\\n            try\\n            {\\n                string sc = \\\"X Axis Color\\\";\\n\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // VisualObjects in CategoryAxis Title Color\\n            try\\n            {\\n                string sc = \\\"X Axis Title Color\\\";\\n\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // VisualObjects in ValueAxis Min\\n            try\\n            {\\n                string sc = \\\"Y Axis Minimum\\\";\\n\\n                // Field value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"start\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"start\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"start\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"start\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // VisualObjects in ValueAxis Max\\n            try\\n            {\\n                string sc = \\\"Y Axis Minimum\\\";\\n\\n                // Field value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"end\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"end\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryAxis\\\"].Children())\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"end\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"end\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            try\\n            {\\n                string sc = \\\"Y Axis Color\\\";\\n\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"labelColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // VisualObjects in ValueAxis Title Color\\n            try\\n            {\\n                string sc = \\\"Y Axis Title Color\\\";\\n\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"valueAxis\\\"].Children())\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"titleColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }            \\n\\n            // VisualObjects in Category Labels\\n            try\\n            {\\n                string sc = \\\"Category Label\\\";\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryLabels\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryLabels\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Field Value - Column\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryLabels\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expresssion\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Field Value - Measure\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"categoryLabels\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // Objects in Text (???)\\n            try\\n            {\\n                string sc = \\\"Text\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"text\\\"].Children())\\n                {\\n                    try\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"text\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];                    \\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"text\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }                    \\n                }\\n            }\\n            catch\\n            {\\n            }\\n       \\n            // Conditional Formatting (Background Color)\\n            try\\n            {\\n                string sc = \\\"Conditional Formatting (Background Color)\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"values\\\"].Children())\\n                {\\n                    // Gradient\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n\\n                    // Rules\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";                    \\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n\\n                    // Field value (Column)\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";                    \\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    //Field value (Measure)\\n                    try\\n                    {\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"backColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                        \\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // Conditional Formatting (Font Color)\\n            try\\n            {\\n                string sc = \\\"Conditional Formatting (Font Color)\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"values\\\"].Children())\\n                {\\n                    // Gradient\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";                    \\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n\\n                    // Rules\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n\\n                    // Field value\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // Conditional Formatting (Icon)\\n            try\\n            {\\n                string sc = \\\"Conditional Formatting (Icon)\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"values\\\"].Children())\\n                {\\n                    // Rules\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"icon\\\"][\\\"value\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];                    \\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"icon\\\"][\\\"value\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n\\n                    // Field value\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"icon\\\"][\\\"value\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"icon\\\"][\\\"value\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // Conditional Formatting (WebURL)\\n            try\\n            {\\n                string sc = \\\"Conditional Formatting (WebURL)\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"objects\\\"][\\\"values\\\"].Children())\\n                {\\n                    // Field value\\n                    try\\n                    {\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"webURL\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"webURL\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            \\n            // VisualObjects in Title Text\\n            try\\n            {                \\n                string sc = \\\"Title Text\\\";\\n                // Field Value (Column)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {                    \\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"text\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"text\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n                // Field Value (Measure)\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"text\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"text\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {                    \\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Title Font Color\\n            try\\n            {\\n                string sc = \\\"Title Font Color\\\";\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Field Value - Column\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expresssion\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Field Value - Measure\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"fontColor\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Title Background\\n            try\\n            {\\n                string sc = \\\"Title Background\\\";\\n                // Gradient\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Rules\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Field Value - Column\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expresssion\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Column\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n                // Field Value - Measure\\n                try\\n                {\\n                    foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"title\\\"].Children())\\n                    {\\n                        // labels\\n                        string tableName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        string objectName = (string)o2[\\\"properties\\\"][\\\"background\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        string objectType = \\\"Measure\\\";\\n                        \\n                        VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                    }\\n                }\\n                catch\\n                {\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Background (Gradient)\\n            try\\n            {\\n                string sc = \\\"Background\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"background\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Background (Rules)\\n            try\\n            {\\n                string sc = \\\"Background\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"background\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Background (Field Value - Column)\\n            try\\n            {\\n                string sc = \\\"Background\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"background\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expresssion\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Column\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Background (Field Value - Measure)\\n            try\\n            {\\n                string sc = \\\"Background\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"background\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // VisualObjects in Border (Gradient)\\n            try\\n            {\\n                string sc = \\\"Border\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"border\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Border (Rules)\\n            try\\n            {\\n                string sc = \\\"Border\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"border\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Border (Field Value - Column)\\n            try\\n            {\\n                string sc = \\\"Border\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"border\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expresssion\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Column\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Border (Field Value - Measure)\\n            try\\n            {\\n                string sc = \\\"Border\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"border\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            // VisualObjects in Drop Shadow (Gradient)\\n            try\\n            {\\n                string sc = \\\"Drop Shadow\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"dropShadow\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"FillRule\\\"][\\\"Input\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Drop Shadow (Rules)\\n            try\\n            {\\n                string sc = \\\"Drop Shadow\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"dropShadow\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Conditional\\\"][\\\"Cases\\\"][0][\\\"Condition\\\"][\\\"And\\\"][\\\"Left\\\"][\\\"Comparison\\\"][\\\"Left\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Drop Shadow (Field Value - Column)\\n            try\\n            {\\n                string sc = \\\"Drop Shadow\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"dropShadow\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Expresssion\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Aggregation\\\"][\\\"Expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Column\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n            // VisualObjects in Drop Shadow (Field Value - Measure)\\n            try\\n            {\\n                string sc = \\\"Drop Shadow\\\";\\n                foreach (var o2 in configJson[\\\"singleVisual\\\"][\\\"vcObjects\\\"][\\\"dropShadow\\\"].Children())\\n                {\\n                    // labels\\n                    string tableName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                    string objectName = (string)o2[\\\"properties\\\"][\\\"color\\\"][\\\"solid\\\"][\\\"color\\\"][\\\"expr\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                    string objectType = \\\"Measure\\\";\\n                    \\n                    VisualObjects.Add(new VisualObject {PageName = pageName, VisualId = visualId, VisualType = visualType, CustomVisualFlag = customVisualFlag, ObjectName = objectName, TableName = tableName, ObjectType = objectType, Source = sc});\\n                }\\n            }\\n            catch\\n            {\\n            }\\n\\n            Visuals.Add(new Visual {PageName = pageName, Id = visualId, Name = visualName, Type = visualType, CustomVisualFlag = customVisualFlag, HiddenFlag = visHid, X = cx, Y = cy, Z = cz, Width = cw, Height = ch, ObjectCount = objCount, ShowItemsNoDataFlag = showItemsNoData, SlicerType = slicerType, ParentGroup = parentGroup });\\n            \\n            // Visual Filters\\n            string visfilter = (string)vc[\\\"filters\\\"];\\n            \\n            if (visfilter != null)\\n            {\\n                string formattedvisfilterJson = Newtonsoft.Json.Linq.JToken.Parse(visfilter).ToString();\\n                dynamic visfilterJson = Newtonsoft.Json.Linq.JArray.Parse(formattedvisfilterJson);\\n                                \\n                foreach (var o3 in visfilterJson.Children())\\n                {                  \\n                    string filterType = (string)o3[\\\"type\\\"];\\n                    string objType1 = string.Empty;\\n                    string objName1 = string.Empty;\\n                    string tblName1 = string.Empty;\\n                    \\n                    // Note: Add filter conditions\\n                    try\\n                    {\\n                        objName1 = (string)o3[\\\"expression\\\"][\\\"Column\\\"][\\\"Property\\\"];\\n                        objType1 = \\\"Column\\\";\\n                        tblName1 = (string)o3[\\\"expression\\\"][\\\"Column\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        \\n                        if (createPersp)\\n                        {\\n                            try\\n                            {\\n                                Model.Tables[tblName1].Columns[objName1].InPerspective[perspName] = true;\\n                            }\\n                            catch\\n                            {\\n                            }\\n                        }\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    try\\n                    {\\n                        objName1 = (string)o3[\\\"expression\\\"][\\\"Measure\\\"][\\\"Property\\\"];\\n                        objType1 = \\\"Measure\\\";\\n                        tblName1 = (string)o3[\\\"expression\\\"][\\\"Measure\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        \\n                        if (createPersp)\\n                        {\\n                            try\\n                            {\\n                                Model.Tables[tblName1].Measures[objName1].InPerspective[perspName] = true;\\n                            }\\n                            catch\\n                            {\\n                            }\\n                        }\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    try\\n                    {\\n                        string levelName1 = (string)o3[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Level\\\"];\\n                        string hierName1 = (string)o3[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Hierarchy\\\"];\\n                        objName1 = hierName1 + \\\".\\\" + levelName1;\\n                        objType1 = \\\"Hierarchy\\\";\\n                        tblName1 = (string)o3[\\\"expression\\\"][\\\"HierarchyLevel\\\"][\\\"Expression\\\"][\\\"Hierarchy\\\"][\\\"Expression\\\"][\\\"SourceRef\\\"][\\\"Entity\\\"];\\n                        \\n                        if (createPersp)\\n                        {\\n                            try\\n                            {\\n                                Model.Tables[tblName1].Hierarchies[hierName1].InPerspective[perspName] = true;\\n                            }\\n                            catch\\n                            {\\n                            }\\n                        }\\n                    }\\n                    catch\\n                    {\\n                    }\\n                    VisualFilters.Add(new VisualFilter {PageName = pageName, VisualId = visualId, TableName = tblName1, ObjectName = objName1, ObjectType = objType1, FilterType = filterType });\\n                }\\n            }\\n        }\\n    }\\n\\n    // Bookmarks\\n    try\\n    {\\n        string configEnd = (string)json[\\\"config\\\"];\\n        string formattedconfigEndJson = Newtonsoft.Json.Linq.JToken.Parse(configEnd).ToString();\\n        dynamic configEndJson = Newtonsoft.Json.Linq.JObject.Parse(formattedconfigEndJson);\\n\\n        foreach (var o in configEndJson[\\\"bookmarks\\\"].Children())\\n        {\\n            string bName = o[\\\"displayName\\\"];\\n            string bId = o[\\\"name\\\"];\\n            string rptPageId = o[\\\"explorationState\\\"][\\\"activeSection\\\"];\\n                    \\n            try\\n            {\\n                foreach (var v in Visuals.Where(a => a.PageName == Pages.Where(z => z.Id == rptPageId).FirstOrDefault().Name).ToList())\\n                {\\n                    string vizId = v.Id;\\n                    bool hm = false;\\n                    try\\n                    {  \\n                        string vT = (string)o[\\\"explorationState\\\"][\\\"sections\\\"][rptPageId][\\\"visualContainers\\\"][vizId][\\\"singleVisual\\\"][\\\"visualType\\\"];    \\n                        \\n                        // visualContainers\\n                        try\\n                        {\\n                            string mode = (string)o[\\\"explorationState\\\"][\\\"sections\\\"][rptPageId][\\\"visualContainers\\\"][vizId][\\\"singleVisual\\\"][\\\"display\\\"][\\\"mode\\\"];\\n                            if (mode == \\\"hidden\\\")\\n                            {\\n                                hm = true;\\n                            }\\n                        }\\n                        catch\\n                        {\\n                        }                                                \\n                        \\n                        Bookmarks.Add(new Bookmark {Id = bId, Name = bName, PageId = rptPageId, VisualId = vizId, VisualHiddenFlag = hm});\\n                    }\\n                    catch\\n                    {\\n                    }\\n\\n                    // visualContainerGroups\\n                    try\\n                    {\\n                        bool mode = (bool)o[\\\"explorationState\\\"][\\\"sections\\\"][rptPageId][\\\"visualContainerGroups\\\"][vizId][\\\"isHidden\\\"];\\n                        \\n                        if (mode)\\n                        {\\n                            hm = true;\\n                        }\\n                        \\n                        Bookmarks.Add(new Bookmark {Id = bId, Name = bName, PageId = rptPageId, VisualId = vizId, VisualHiddenFlag = hm});\\n                    }\\n                    catch\\n                    {\\n                    }\\n                }\\n            }\\n            catch\\n            {\\n            } \\n        }\\n    }\\n    catch\\n    {\\n    }\\n\\n    // Update for Visual Groups\\n    foreach (var x in Visuals.ToList())\\n    {\\n        if (x.ParentGroup != null)\\n        {\\n            int pgX = Visuals.Where(a => a.Id == x.ParentGroup).First().X;\\n            int pgY = Visuals.Where(a => a.Id == x.ParentGroup).First().Y;\\n            \\n            x.X = x.X + pgX;\\n            x.Y = x.Y + pgY;\\n        }\\n    }    \\n    \\n    // Add results to StringBuilders\\n    foreach (var x in CustomVisuals.ToList())\\n    {\\n        sb_CustomVisuals.Append(fileName + '\\t' + x.Name + newline);\\n    }\\n    foreach (var x in ReportFilters.ToList())\\n    {\\n        sb_ReportFilters.Append(fileName + '\\t' + x.FilterName + '\\t' + x.TableName + '\\t' + x.ObjectName + '\\t' + x.ObjectType + '\\t' + x.FilterType + newline);\\n    }\\n    foreach (var x in PageFilters.ToList())\\n    {\\n        sb_PageFilters.Append(fileName + '\\t' + x.PageId + '\\t' + x.PageName + '\\t' + x.FilterName + '\\t' + x.TableName + '\\t' + x.ObjectName + '\\t' + x.ObjectType + '\\t' + x.FilterType + newline);\\n    }\\n    foreach (var x in VisualFilters.ToList())\\n    {\\n        sb_VisualFilters.Append(fileName + '\\t' + x.PageName + '\\t' + x.VisualId + '\\t' + x.TableName + '\\t' + x.ObjectName + '\\t' + x.ObjectType + '\\t' + x.FilterType + newline);\\n    }\\n    foreach (var x in VisualObjects.ToList())\\n    {\\n        sb_VisualObjects.Append(fileName + '\\t' + x.PageName + '\\t' + x.VisualId + '\\t' + x.VisualType + '\\t' + x.CustomVisualFlag + '\\t' + x.TableName + '\\t' + x.ObjectName + '\\t' + x.ObjectType + '\\t' + x.Source + newline);\\n    }\\n    foreach (var x in Bookmarks.ToList())\\n    {\\n        sb_Bookmarks.Append(fileName + '\\t' + x.Name + '\\t' + x.Id + '\\t' + x.PageId + '\\t' + x.VisualId + '\\t' + x.VisualHiddenFlag + newline);\\n    }\\n    foreach (var x in Pages.ToList())\\n    {\\n        sb_Pages.Append(fileName + '\\t' + x.Id + '\\t' + x.Name + '\\t' + x.Number + '\\t' + x.Width + '\\t' + x.Height + '\\t' + x.HiddenFlag + '\\t' + x.VisualCount + '\\t' + x.BackgroundImage + '\\t' + x.WallpaperImage + '\\t' + x.Type + newline);\\n    }\\n    foreach (var x in Visuals.ToList())\\n    {\\n        sb_Visuals.Append(fileName + '\\t' + x.PageName + '\\t' + x.Id + '\\t' + x.Name + '\\t' + x.Type + '\\t' + x.CustomVisualFlag + '\\t' + x.HiddenFlag + '\\t' + x.X + '\\t' + x.Y + '\\t' + x.Z + '\\t' + x.Width + '\\t' + x.Height + '\\t' + x.ObjectCount + '\\t' + x.ShowItemsNoDataFlag + '\\t' + x.SlicerType + '\\t' + x.ParentGroup + newline);\\n    }\\n    foreach (var x in Connections.ToList())\\n    {\\n        sb_Connections.Append(fileName + '\\t' + x.ServerName + '\\t' + x.DatabaseName + '\\t' + x.ReportID + '\\t' + x.Type + newline);\\n    }\\n    foreach (var x in VisualInteractions.ToList())\\n    {\\n        sb_VisualInteractions.Append(fileName + '\\t' + x.PageName + '\\t' + x.SourceVisualID + '\\t' + x.TargetVisualID + '\\t' + x.TypeID + '\\t' + x.Type + newline);\\n    }\\n}\\n\\n// Save to text files or print out results\\nif (saveToFile)\\n{    \\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_CustomVisuals.txt\\\", sb_CustomVisuals.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_ReportFilters.txt\\\", sb_ReportFilters.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_PageFilters.txt\\\", sb_PageFilters.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_VisualFilters.txt\\\", sb_VisualFilters.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_VisualObjects.txt\\\", sb_VisualObjects.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_Visuals.txt\\\", sb_Visuals.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_Bookmarks.txt\\\", sb_Bookmarks.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_Pages.txt\\\", sb_Pages.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_Connections.txt\\\", sb_Connections.ToString());\\n    System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_VisualInteractions.txt\\\", sb_VisualInteractions.ToString());\\n}\\nelse\\n{\\n    sb_CustomVisuals.Output();\\n    sb_ReportFilters.Output();\\n    sb_PageFilters.Output();\\n    sb_VisualFilters.Output();\\n    sb_VisualObjects.Output();\\n    sb_Visuals.Output();\\n    sb_Bookmarks.Output();\\n    sb_Pages.Output();\\n    sb_Connections.Output();\\n    sb_VisualInteractions.Output();\\n}\\n\\n// Add dependencies to the perspective\\nif (createPersp)\\n{    \\n    // RLS\\n    var rlsColumnDependencies = \\n    Model.Roles.SelectMany(r => r.TablePermissions)\\n        .SelectMany(tp => tp.DependsOn.Columns).Distinct().ToList();\\n        \\n    var rlsTableDependencies = Model.Roles.SelectMany(r => r.TablePermissions)\\n        .SelectMany(tp => tp.DependsOn.Tables).Distinct().ToList();\\n\\n    var rlsMeasureDependencies = Model.Roles.SelectMany(r => r.TablePermissions)\\n        .SelectMany(tp => tp.DependsOn.Tables).Distinct().ToList();\\n        \\n    foreach (var x in rlsColumnDependencies)\\n    {\\n        x.InPerspective[perspName] = true;\\n    }\\n    foreach (var x in rlsTableDependencies)\\n    {\\n        x.InPerspective[perspName] = true;\\n    }\\n    foreach (var x in rlsMeasureDependencies)\\n    {\\n        x.InPerspective[perspName] = true;\\n    }\\n\\n    //OLS\\n    foreach (var t in Model.Tables.ToList())\\n    {\\n        string tableName = t.Name;\\n        \\n        foreach(var r in Model.Roles.ToList())\\n        {\\n            string roleName = r.Name;\\n            string tableOLS = Model.Tables[tableName].ObjectLevelSecurity[roleName].ToString();\\n            if (tableOLS != \\\"Default\\\")\\n            {\\n                t.InPerspective[perspName] = true;\\n            }\\n            \\n            foreach (var c in t.Columns.ToList())\\n            {\\n                string colName = c.Name;\\n                string colOLS = Model.Tables[tableName].Columns[colName].ObjectLevelSecurity[roleName].ToString();\\n                \\n                if (colOLS != \\\"Default\\\")\\n                {\\n                    c.InPerspective[perspName] = true;\\n                }\\n            }\\n        }    \\n    }\\n    \\n    foreach (var o in Model.AllMeasures.Where(a => a.InPerspective[perspName]).ToList())\\n    {\\n        // Add measure dependencies\\n        var allReferences = o.DependsOn.Deep();\\n                            \\n        foreach(var dep in allReferences)\\n        {\\n            //Add dependent columns/measures specified in text file to the perspective\\n            var columnDep = dep as Column; if(columnDep != null) columnDep.InPerspective[perspName] = true;\\n            var measureDep = dep as Measure; if(measureDep != null) measureDep.InPerspective[perspName] = true;\\n        }\\n    }\\n    \\n    // Add hierarchy column dependencies\\n    foreach (var o in Model.AllHierarchies.Where(a => a.InPerspective[perspName]).ToList())\\n    {\\n        string tableName = o.Table.Name;\\n        foreach (var lev in o.Levels.ToList())\\n        {\\n            string hcolName = lev.Column.Name;\\n            Model.Tables[tableName].Columns[hcolName].InPerspective[perspName] = true;\\n        }\\n    }\\n    \\n    // Add foreign/primary keys\\n    foreach (var o in Model.Relationships.ToList())\\n    {\\n        var fromTable = o.FromTable;\\n        var toTable = o.ToTable;\\n        var fromColumn = o.FromColumn;\\n        var toColumn = o.ToColumn;\\n        \\n        if (fromTable.InPerspective[perspName] == true && toTable.InPerspective[perspName] == true)\\n        {\\n            fromColumn.InPerspective[perspName] = true;\\n            toColumn.InPerspective[perspName] = true;\\n        }\\n    }\\n\\n    // Add auto-date tables\\n    if (Model.Tables.Any(a => a.DataCategory == \\\"Time\\\" && a.Columns.Any(b => b.IsKey && a.InPerspective[perspName])))\\n    {\\n        foreach (var t in Model.Tables.Where(a => a.ObjectTypeName == \\\"Calculated Table\\\" && (a.Name.StartsWith(\\\"DateTableTemplate_\\\") || a.Name.StartsWith(\\\"LocalDateTable_\\\"))).ToList())\\n        {\\n            t.InPerspective[perspName] = true;\\n        }\\n    }\\n\\n    // Add all columns in calculation groups\\n    foreach (var t in Model.CalculationGroups.Where(a => a.InPerspective[perspName]).ToList())\\n    {\\n        foreach (var c in t.Columns.ToList())\\n        {\\n            c.InPerspective[perspName] = true;\\n        }\\n    }\\n    \\n    // Add column dependencies\\n    foreach (var c in Model.AllColumns.Where(a => a.InPerspective[perspName]).ToList())\\n    {\\n        // Add sort-by column dependencies\\n        try\\n        {\\n            c.SortByColumn.InPerspective[perspName] = true;\\n        }\\n        catch\\n        {\\n        }\\n\\n        // Add calculated column dependencies\\n        if (c.Type.ToString() == \\\"Calculated\\\")\\n        {\\n            var allReferences = (Model.Tables[c.Table.Name].Columns[c.Name] as CalculatedColumn).DependsOn.Deep();\\n\\n            foreach(var dep in allReferences)\\n            {\\n                // Add dependent columns/measures specified in text file to the perspective\\n                var columnDep = dep as Column; if(columnDep != null) columnDep.InPerspective[perspName] = true;\\n                var measureDep = dep as Measure; if(measureDep != null) measureDep.InPerspective[perspName] = true;\\n            }\\n        }\\n    }\\n}\\n\\n// Show unused objects\\nif (createPersp)\\n{\\n    var sb_Unused = new System.Text.StringBuilder();\\n    sb_Unused.Append(\\\"TableName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + newline);\\n\\n    foreach (var t in Model.Tables.ToList())\\n    {\\n        foreach (var o in t.Columns.Where(a => a.InPerspective[perspName] == false).ToList())\\n        {\\n            sb_Unused.Append(o.Table.Name + '\\t' + o.Name + '\\t' + \\\"Column\\\" + newline);\\n        }\\n        foreach (var o in t.Measures.Where(a => a.InPerspective[perspName] == false).ToList())\\n        {\\n            sb_Unused.Append(o.Table.Name + '\\t' + o.Name + '\\t' + \\\"Measure\\\" + newline);\\n        }\\n        foreach (var o in t.Hierarchies.Where(a => a.InPerspective[perspName] == false).ToList())\\n        {\\n            sb_Unused.Append(o.Table.Name + '\\t' + o.Name + '\\t' + \\\"Hierarchy\\\" + newline);\\n        }\\n    }\\n\\n    if (saveToFile)\\n    {\\n        System.IO.File.WriteAllText(pbiFolderName+@\\\"\\\\\"+savePrefix+\\\"_UnusedObjects.txt\\\", sb_Unused.ToString());\\n    }\\n    else\\n    {\\n        sb_Unused.Output();\\n    }\\n}\\n\\n// Extra closing bracket for classes\\n} // Comment out this line if using Tabular Editor 3\\n\\n// Classes for each object set\\npublic class CustomVisual\\n{\\n    public string Name { get; set; }\\n}\\n\\npublic class Bookmark\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string PageId { get; set; }\\n    public string VisualId { get; set; }\\n    public bool VisualHiddenFlag { get; set; }\\n}\\n\\npublic class ReportFilter\\n{\\n    public string FilterName { get; set; }\\n    public string TableName { get; set; }\\n    public string ObjectName { get; set; }\\n    public string ObjectType { get; set; }\\n    public string FilterType { get; set; }\\n}\\n\\npublic class VisualObject\\n{\\n    public string PageName { get; set; }\\n    public string VisualId { get; set; }\\n    public string VisualType { get; set; }\\n    public bool CustomVisualFlag { get; set; }\\n    public string TableName { get; set; }\\n    public string ObjectName { get; set; }\\n    public string ObjectType { get; set; }\\n    public string Source { get; set; }\\n}\\n\\npublic class Visual\\n{\\n    public string PageName { get; set; }\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Type { get; set; }\\n    public bool CustomVisualFlag { get; set; }\\n    public bool HiddenFlag { get; set; }\\n    public int X { get; set; }\\n    public int Y { get; set; }\\n    public int Z { get; set; }\\n    public int Width { get; set; }\\n    public int Height { get; set; }\\n    public int ObjectCount { get; set; }\\n    public bool ShowItemsNoDataFlag { get; set; }\\n    public string SlicerType { get; set; }\\n    public string ParentGroup {get; set; }\\n}\\n\\npublic class VisualFilter\\n{\\n    public string PageName { get; set; }\\n    public string VisualId { get; set; }\\n    public string TableName { get; set; }\\n    public string ObjectName { get; set; }\\n    public string ObjectType { get; set; }\\n    public string FilterType { get; set; }\\n}\\n\\npublic class PageFilter\\n{\\n    public string PageId { get; set; }\\n    public string PageName { get; set; }\\n    public string FilterName {get; set; }\\n    public string TableName { get; set; }\\n    public string ObjectName { get; set; }\\n    public string ObjectType { get; set; }\\n    public string FilterType { get; set; }    \\n}\\n\\npublic class Page\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public int Number { get; set; }\\n    public int Width { get; set; }\\n    public int Height { get; set; }\\n    public bool HiddenFlag { get; set; }\\n    public int VisualCount { get; set; }\\n    public string BackgroundImage { get; set; }\\n    public string WallpaperImage { get; set; }\\n    public string Type { get; set; }\\n}\\n\\npublic class Connection\\n{\\n    public string ServerName { get; set; }\\n    public string DatabaseName { get; set; }\\n    public string Type { get; set; }\\n    public string ReportID { get; set; }\\n}\\n\\npublic class VisualInteraction\\n{\\n    public string PageName { get; set; }\\n    public string SourceVisualID { get; set; }\\n    public string TargetVisualID { get; set; }\\n    public int TypeID { get; set; }\\n    public string Type { get; set; }\\n}\\n\\nstatic void _() { // Comment out this line if using Tabular Editor 3",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\FixCaseSensitiveDAX",
      "Enabled": "true",
      "Execute": "var sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"MeasureName\\\");\\n\\n// Fix table names in measures\\nforeach (var m in Model.AllMeasures.ToList())\\n{\\n    string origExpr = m.Expression;\\n    string expr = m.Expression.ToLower();\\n    string tableMeasure = m.Table.Name + '\\t' + m.Name;\\n    \\n    foreach (var t in Model.Tables.Where(a => expr.Contains(a.Name.ToLower() + \\\"[\\\") || expr.Contains(a.Name.ToLower() + \\\"'[\\\")))\\n    {        \\n        m.Expression = m.Expression.Replace(t.Name,t.Name,StringComparison.OrdinalIgnoreCase);\\n        if (origExpr != m.Expression && !sb.ToString().Contains(tableMeasure))\\n        {\\n            sb.Append(newline + tableMeasure);\\n        }\\n    }\\n}\\n\\n// Fix column names in measures\\nforeach (var m in Model.AllMeasures.ToList())\\n{\\n    string origExpr = m.Expression;\\n    string expr = m.Expression.ToLower();\\n    string tableMeasure = m.Table.Name + '\\t' + m.Name;\\n \\n    foreach (var c in Model.AllColumns.Where(a => expr.Contains(a.Table.Name.ToLower() + \\\"[\\\" + a.Name.ToLower() + \\\"]\\\") || expr.Contains(\\\"'\\\" + a.Table.Name.ToLower() + \\\"'[\\\" + a.Name.ToLower() + \\\"]\\\")))\\n    {\\n        m.Expression = m.Expression.Replace(c.Name,c.Name,StringComparison.OrdinalIgnoreCase);\\n        if (origExpr != m.Expression && !sb.ToString().Contains(tableMeasure))\\n        {\\n            sb.Append(newline + tableMeasure);\\n        }\\n    }   \\n}\\n\\n// Fix measure names in measures\\nforeach (var m in Model.AllMeasures.ToList())\\n{\\n    string origExpr = m.Expression;\\n    string expr = m.Expression.ToLower();\\n    string tableMeasure = m.Table.Name + '\\t' + m.Name;\\n \\n    foreach (var c in Model.AllMeasures.Where(a => expr.Contains(\\\"[\\\" + a.Name.ToLower() + \\\"]\\\")))\\n    {\\n        m.Expression = m.Expression.Replace(c.Name,c.Name,StringComparison.OrdinalIgnoreCase);\\n        if (origExpr != m.Expression && !sb.ToString().Contains(tableMeasure))\\n        {\\n            sb.Append(newline + tableMeasure);\\n        }\\n    }   \\n}\\n\\nInfo(\\\"Object references have been updated to match the actual table, column or measure name within the model for the following measures:\\\" + newline + newline + sb.ToString());\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\MasterModel",
      "Enabled": "true",
      "Execute": "var version = \\\"$perspective\\\"; // To Do: Replace this with the name of your perspective\\n\\n// Remove tables, measures, columns and hierarchies that are not part of the perspective:\\nforeach(var t in Model.Tables.ToList()) {\\n    if(!t.InPerspective[version]) t.Delete();\\n    else {\\n        foreach(var m in t.Measures.ToList()) if(!m.InPerspective[version]) m.Delete();   \\n        foreach(var c in t.Columns.ToList()) if(!c.InPerspective[version]) c.Delete();\\n        foreach(var h in t.Hierarchies.ToList()) if(!h.InPerspective[version]) h.Delete();\\n    }\\n}\\n\\n// Modify measures based on annotations:\\nforeach(Measure x in Model.AllMeasures) {\\n    var expr = x.GetAnnotation(version + \\\"_Expression\\\"); if(expr == null) continue;\\n    x.Expression = expr;\\n}\\n\\n// ************* START UNHIDING ************** //\\n// Modify columns to unhide based on annotations:\\nforeach(Column x in Model.AllColumns) {\\n    var expr = x.GetAnnotation(version + \\\"_Unhide\\\"); if(expr == null) continue;\\n    x.IsHidden=false;\\n}\\n\\n// Modify measures to unhide based on annotations\\nforeach(Measure x in Model.AllMeasures) {\\n    var expr = x.GetAnnotation(version + \\\"_Unhide\\\"); if(expr == null) continue;\\n    x.IsHidden=false;\\n}\\n\\n// Modify tables to unhide based on annotations\\nforeach(Table x in Model.Tables.ToList()) {\\n    var expr = x.GetAnnotation(version + \\\"_Unhide\\\"); if(expr == null) continue;\\n    x.IsHidden=false;\\n}\\n\\n// *************   END UNHIDING  ************** //\\n\\n// ************* START HIDING ************** //\\n// Modify columns to unhide based on annotations:\\nforeach(Column x in Model.AllColumns) {\\n    var expr = x.GetAnnotation(version + \\\"_Hide\\\"); if(expr == null) continue;\\n    x.IsHidden=true;\\n}\\n\\n// Modify measures to unhide based on annotations\\nforeach(Measure x in Model.AllMeasures) {\\n    var expr = x.GetAnnotation(version + \\\"_Hide\\\"); if(expr == null) continue;\\n    x.IsHidden=false;\\n}\\n\\n// Modify tables to unhide based on annotations\\nforeach(Table x in Model.Tables.ToList()) {\\n    var expr = x.GetAnnotation(version + \\\"_Hide\\\"); if(expr == null) continue;\\n    x.IsHidden=true;\\n}\\n\\n// *************   END HIDING  ************** //\\n\\n// *************  START REMOVALS ************** //\\n\\n\\n// Remove Perspectives based on annotations\\nforeach(Perspective x in Model.Perspectives.ToList()) {\\n    var expr = x.GetAnnotation(version + \\\"_Remove\\\"); if(expr == null) continue;\\n    x.Delete();\\n}\\n\\n// Remove Data Sources based on annotations\\nforeach(DataSource x in Model.DataSources.ToList()) {\\n    var expr = x.GetAnnotation(version + \\\"_Remove\\\"); if(expr == null) continue;\\n    x.Delete();\\n}\\n\\n// Remove Roles based on annotations\\nforeach(ModelRole x in Model.Roles.ToList()) {\\n    var expr = x.GetAnnotation(version + \\\"_Remove\\\"); if(expr == null) continue;\\n    x.Delete();\\n}\\n\\n// Remove Partitions based on annotations:\\nforeach(Table t in Model.Tables) {\\n    \\n    // Loop through all partitions in this table:\\n    foreach(Partition p in t.Partitions.ToList()) {\\n        var expr = p.GetAnnotation(version + \\\"_Remove\\\"); if(expr == null) continue;\\n        p.Delete();\\n    }\\n}\\n\\n// Remove KPIs based on annotations\\nforeach(Measure x in Model.AllMeasures) {\\n    var expr = x.GetAnnotation(version + \\\"_RemoveKPI\\\"); if(expr == null) continue;\\n    x.KPI.Delete();\\n}\\n//   *************  END REMOVALS ************** //\\n\\n// Set partition queries according to annotations:\\nforeach(Table t in Model.Tables) {\\n    var replaceValue = t.GetAnnotation(version + \\\"_UpdatePartitionQuery\\\"); if(replaceValue == null) continue;\\n    \\n    // Loop through all partitions in this table:\\n    foreach(Partition p in t.Partitions) {\\n        \\n        var finalQuery = p.Query.Replace(\\\"OldText\\\", \\\"NewText\\\");\\n\\n        // Replace all placeholder values:\\n        foreach(var placeholder in p.Annotations.Keys) {\\n            finalQuery = finalQuery.Replace(\\\"%\\\" + placeholder + \\\"%\\\", p.GetAnnotation(placeholder));\\n        }\\n\\n        p.Query = finalQuery;\\n    }\\n}\\n\\n// Set partition data sources according to annotations:\\nforeach(Table t in Model.Tables) {\\n    var dataSourceName = t.GetAnnotation(version + \\\"_UpdateDataSource\\\"); if(dataSourceName == null) continue;\\n    \\n    // Loop through all partitions in this table:\\n    foreach(Partition p in t.Partitions) {\\n        p.DataSource = Model.DataSources[dataSourceName];\\n    }\\n}\\n\\n// Update RLS based on annotations\\nforeach(Table t in Model.Tables) {\\n    foreach(ModelRole r in Model.Roles) {\\n        var rls = r.GetAnnotation(version + \\\"_RLS_\\\" + t.Name); if(rls == null) continue;\\n        t.RowLevelSecurity[r] = rls;\\n    }\\n}\\n\\n// Update Role Members based on annotations\\nforeach(ModelRole r in Model.Roles) {\\n    var rm = r.GetAnnotation(version + \\\"_UpdateRoleMembers\\\"); if(rm == null) continue;\\n    r.RoleMembers = rm;\\n}\\n\\n// Update Model Permissions from 'Administrator' to 'Read' based on annotations\\n    foreach(ModelRole r in Model.Roles) {\\n        var mp = r.GetAnnotation(version + \\\"_ModelPermission\\\"); if(mp == null) continue;\\n        if(mp == \\\"Administrator\\\") r.ModelPermission = ModelPermission.Administrator;\\n        else r.ModelPermission = ModelPermission.Read;\\n    }\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\MetadataExport",
      "Enabled": "true",
      "Execute": "string folderName = @\\\"C:\\Desktop\\Metadata\\\"; // Update this location to the destination folder on your computer\\n\\nvar sb = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\n\\n/******************************DATA SOURCES****************************/\\n\\n// Headers\\nsb.Append(\\\"DataSource\\\" + '\\t' + \\\"ConnectionString\\\" + '\\t' + \\\"Provider\\\" + '\\t' + \\\"MaxConnections\\\" + newline);\\n\\nforeach (var o in Model.DataSources.Where(a => a.Type.ToString() == \\\"Provider\\\").OrderBy(a => a.Name).ToList())\\n{\\n    var ds = (Model.DataSources[o.Name] as ProviderDataSource);\\n    string n = o.Name;\\n    string conn = ds.ConnectionString;\\n    string mc = ds.MaxConnections.ToString();\\n    string prov = ds.Provider;\\n    \\n    sb.Append(n + '\\t' + conn + '\\t' + prov + '\\t' + mc + newline);\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\DataSources.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/*********************************TABLES*******************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"PartitionName\\\" + '\\t' + \\\"DataSource\\\" + '\\t' + \\\"Mode\\\" + '\\t' +\\n          \\\"DataCategory\\\" + '\\t' + \\\"Description\\\" + '\\t' + \\\"Query\\\" + newline);\\n          \\nforeach (var o in Model.Tables.Where(a => a.ObjectTypeName != \\\"Calculation Group Table\\\").OrderBy(a => a.Name).ToList())\\n{\\n    foreach (var p in o.Partitions.OrderBy(a => a.Name).ToList())\\n    {\\n        string q = Model.Tables[o.Name].Partitions[p.Name].Query.Replace(\\\"\\t\\\",\\\" \\\").Replace(\\\"\\r\\\",\\\" \\\").Replace(\\\"\\n\\\",\\\" \\\");\\n        string m = Model.Tables[o.Name].Partitions[p.Name].Mode.ToString();\\n        string dc = o.DataCategory;\\n\\n        sb.Append(o.Name + '\\t' + p.Name + '\\t' + o.Source + '\\t' + m + '\\t' + dc + '\\t' + o.Description + '\\t' + q + newline);\\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\Tables.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/*************************MEASURES & COLUMNS***************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"ObjectName\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"SourceColumn\\\" + '\\t' + \\\"DataType\\\" + '\\t' + \\\"Expression\\\" + '\\t' +\\n          \\\"HiddenFlag\\\" + '\\t' + \\\"Format\\\" + '\\t' + \\\"PrimaryKey\\\" + '\\t' + \\\"SummarizeBy\\\" +'\\t' + \\\"DisplayFolder\\\" + '\\t' + \\\"DataCategory\\\" + '\\t' + \\\"SortByColumn\\\" + '\\t' + \\\"Description\\\" + '\\t' + \\\"EncodingHint\\\" + newline);\\n\\n// Columns\\nforeach (var t in Model.Tables.OrderBy(a => a.Name).ToList())\\n{\\n    foreach (var o in t.Columns.OrderBy(a => a.Name).ToList())\\n    {\\n        string sc = string.Empty;\\n        string dt = o.DataType.ToString();\\n        string expr = string.Empty;\\n        string hid = string.Empty;\\n        string pk = string.Empty;\\n        string sumb = o.SummarizeBy.ToString();\\n        string sbc = string.Empty;\\n        string fs = o.FormatString;\\n        string eh = o.EncodingHint.ToString();\\n        \\n        if (o.Type == ColumnType.Data)\\n        {\\n            sc = (Model.Tables[t.Name].Columns[o.Name] as DataColumn).SourceColumn;      \\n        }\\n        else if (o.Type == ColumnType.Calculated)\\n        {\\n            expr = (Model.Tables[t.Name].Columns[o.Name] as CalculatedColumn).Expression;\\n            // Remove tabs and new lines\\n            expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n            expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n        }\\n        \\n        if (o.IsHidden == true)\\n        {\\n            hid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hid = \\\"No\\\";\\n        }\\n        \\n        if (o.IsKey == true)\\n        {\\n            pk = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            pk = \\\"No\\\";\\n        }\\n        \\n        try \\n        {\\n            sbc = o.SortByColumn.Name;\\n        }\\n        catch\\n        {\\n            // Do nothing\\n        }\\n\\n        if (sumb == \\\"Default\\\")\\n        {\\n            sumb = \\\"\\\";\\n        }\\n        \\n        sb.Append(o.Name + '\\t' + t.Name + '\\t' + \\\"Column\\\" + '\\t' + sc + '\\t' + dt + '\\t' + expr + '\\t' + \\n        hid + '\\t' + fs + '\\t' + pk + '\\t' + sumb + '\\t' + o.DisplayFolder + '\\t' + o.DataCategory + '\\t' + \\n        sbc + '\\t' + o.Description + '\\t' + eh + newline);\\n    }\\n}\\n\\nforeach (var t in Model.Tables.OrderBy(a => a.Name).ToList())\\n{\\n    foreach (var o in t.Measures.OrderBy(a => a.Name).ToList())\\n    {\\n        string hid = string.Empty;\\n        string fs = o.FormatString;\\n        string expr = o.Expression;\\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n        \\n        if (o.IsHidden)\\n        {\\n            hid = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            hid = \\\"No\\\";\\n        }\\n        \\n        sb.Append(o.Name + '\\t' + t.Name + '\\t' + \\\"Measure\\\" + '\\t' + \\\"\\\" + '\\t' + \\\"\\\" + '\\t' + expr + '\\t' + hid + '\\t' + \\n        fs + '\\t' + \\\"\\\" + '\\t' + \\\"\\\" + '\\t' + o.DisplayFolder + '\\t' + \\\"\\\" + '\\t' + \\\"\\\" + '\\t' + o.Description + \\\"N/A\\\" +newline);\\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\MeasuresColumns.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/***********************************MODEL******************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"ModelName\\\" + '\\t' + \\\"DefaultMode\\\" + '\\t' + \\\"PowerBIDataSourceVersion\\\" + newline);\\n\\nstring dm = \\\"Import\\\";\\nstring pbi = string.Empty;\\n\\nif (Model.DefaultMode == ModeType.DirectQuery)\\n{\\n    dm = \\\"DirectQuery\\\";\\n}\\n\\nif (Model.DefaultPowerBIDataSourceVersion == PowerBIDataSourceVersion.PowerBI_V3)\\n{\\n    pbi = \\\"Yes\\\";\\n}\\n\\nsb.Append(Model.Database.Name + '\\t' + dm + '\\t' + pbi + newline);\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\Model.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/***********************************ROLES******************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"RoleName\\\" + '\\t' + \\\"RoleMember\\\" + '\\t' + \\\"ModelPermission\\\" + newline);\\n\\nforeach (var r in Model.Roles.OrderBy(a => a.Name).ToList())\\n{\\n    foreach (var rm in r.Members.OrderBy(a => a.Name).ToList())\\n    {\\n        string mp = string.Empty;\\n        if (r.ModelPermission == ModelPermission.Administrator)\\n        {\\n            mp = r.ModelPermission.ToString().Substring(0,5);\\n        }\\n        else\\n        {\\n            mp = r.ModelPermission.ToString();\\n        }\\n        sb.Append(r.Name + '\\t' + rm.Name + '\\t' + mp + newline);    \\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\Roles.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/***********************************RLS********************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"RoleName\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"FilterExpression\\\" + newline);\\n\\nforeach (var r in Model.Roles.OrderBy(a => a.Name).ToList())\\n{\\n    foreach(var t in Model.Tables.OrderBy(a => a.Name).ToList())\\n    {\\n        string rls = Model.Tables[t.Name].RowLevelSecurity[r.Name];\\n        if (!String.IsNullOrEmpty(rls))\\n        {\\n            sb.Append(r.Name + '\\t' + t.Name + '\\t' + rls + newline);\\n        }\\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\RLS.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/****************************RELATIONSHIPS*****************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Header\\nsb.Append(\\\"FromTable\\\" + '\\t' + \\\"FromColumn\\\" + '\\t' + \\\"ToTable\\\" + '\\t' + \\\"ToColumn\\\" + '\\t' +\\n          \\\"Active\\\" + '\\t' + \\\"CrossFilteringBehavior\\\" + '\\t' + \\\"RelationshipType\\\" + '\\t' + \\\"SecurityFilteringBehavior\\\" + '\\t' + \\\"RelyOnReferentialIntegrity\\\" + newline);\\n\\nforeach (var r in Model.Relationships.ToList())\\n{\\n    string actv = string.Empty;\\n    string relType = string.Empty;\\n    string cfb = string.Empty;\\n    string sfb = string.Empty;\\n    string rori = string.Empty;\\n    \\n    if (r.IsActive)\\n    {\\n        actv = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        actv = \\\"No\\\";\\n    }\\n    \\n    if (r.FromCardinality == RelationshipEndCardinality.Many && r.ToCardinality ==  RelationshipEndCardinality.One)\\n    {\\n        relType = \\\"Many-to-One\\\";\\n    }\\n    else if (r.FromCardinality == RelationshipEndCardinality.Many && r.ToCardinality ==  RelationshipEndCardinality.Many)\\n    {\\n        relType = \\\"Many-to-Many\\\";\\n    }\\n    \\n    if (r.CrossFilteringBehavior == CrossFilteringBehavior.OneDirection)\\n    {\\n        cfb = \\\"Single\\\";\\n    }\\n    else if (r.CrossFilteringBehavior == CrossFilteringBehavior.BothDirections)\\n    {\\n        cfb = \\\"Bi\\\";\\n    }\\n    if (r.SecurityFilteringBehavior == SecurityFilteringBehavior.OneDirection)\\n    {\\n        sfb = \\\"Single\\\";\\n    }\\n    else if (r.SecurityFilteringBehavior == SecurityFilteringBehavior.BothDirections)\\n    {\\n        sfb = \\\"Bi\\\";\\n    }\\n    if (r.RelyOnReferentialIntegrity)\\n    {\\n        rori = \\\"Yes\\\";\\n    }\\n    else\\n    {\\n        rori = \\\"No\\\";\\n    }\\n    \\n    sb.Append(r.FromTable.Name + '\\t' + r.FromColumn.Name + '\\t' + r.ToTable.Name + '\\t' + r.ToColumn.Name + '\\t' +\\n    actv + '\\t' + cfb + '\\t' + relType + '\\t' + sfb + '\\t' + rori + newline);\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\Relationships.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/******************************HIERARCHIES*****************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"HierarchyName\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"ColumnName\\\" + '\\t' + \\\"Ordinal\\\" + newline);\\n\\n// Hierarchies\\nforeach (var h in Model.AllHierarchies.OrderBy(a => a.Name).ToList())\\n{\\n    foreach (var lev in h.Levels.OrderBy(a => a.Name).ToList())\\n    {\\n        sb.Append(h.Name + '\\t' + h.Table.Name + '\\t' + lev.Name + '\\t' + lev.Ordinal.ToString() + newline);\\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\Hierarchies.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/******************************PERSPECTIVES****************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\");\\n\\n// Loop header for each perspective\\nforeach (var p in Model.Perspectives.OrderBy(a => a.Name).ToList())\\n{\\n    sb.Append('\\t' + p.Name);\\n}\\n\\nsb.Append(newline);\\n\\n// Measures\\nforeach (var o in Model.AllMeasures.OrderBy(a => a.Name).ToList())\\n{\\n    sb.Append(o.Parent.Name + '\\t' + o.Name + '\\t' + \\\"Measure\\\");\\n    \\n    foreach (var p in Model.Perspectives.OrderBy(a => a.Name).ToList())\\n    {\\n        string per = string.Empty;\\n        if (o.InPerspective[p])\\n        {\\n            per = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            per = \\\"No\\\";\\n        }\\n        sb.Append('\\t' + per);\\n    }\\n    sb.Append(newline);\\n}\\n\\n// Columns\\nforeach (var o in Model.AllColumns.OrderBy(a => a.Name).ToList())\\n{\\n    sb.Append(o.Table.Name + '\\t' + o.Name + '\\t' + \\\"Column\\\");\\n    \\n    foreach (var p in Model.Perspectives.OrderBy(a => a.Name).ToList())\\n    {\\n        string per = string.Empty;\\n        if (o.InPerspective[p])\\n        {\\n            per = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            per = \\\"No\\\";\\n        }\\n        sb.Append('\\t' + per);\\n    }\\n    sb.Append(newline);\\n}\\n\\n// Hierarchies\\nforeach (var o in Model.AllHierarchies.OrderBy(a => a.Name).ToList())\\n{\\n    sb.Append(o.Parent.Name + '\\t' + o.Name + '\\t' + \\\"Hierarchy\\\");\\n    \\n    foreach (var p in Model.Perspectives.OrderBy(a => a.Name).ToList())\\n    {\\n        string per = string.Empty;\\n        if (o.InPerspective[p])\\n        {\\n            per = \\\"Yes\\\";\\n        }\\n        else\\n        {\\n            per = \\\"No\\\";\\n        }\\n        sb.Append('\\t' + per);\\n    }\\n    sb.Append(newline);\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\Perspectives.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/******************************TRANSLATIONS****************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"ObjectName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"TranslationLanguage\\\" + '\\t' + \\\"TranslatedObjectName\\\" + '\\t' + \\\"TranslatedObjectDescription\\\" + '\\t' + \\\"TranslatedDisplayFolder\\\" + newline);\\n\\n// Add placeholder if no translations exist\\nbool hasTranslation = true;\\nvar placeLang = \\\"00-00\\\";\\n\\nif (Model.Cultures.Count() == 0)\\n{\\n    hasTranslation = false;\\n    Model.AddTranslation(placeLang);\\n}\\n    \\nforeach (var cul in Model.Cultures.ToList()) \\n{ \\n    // Tables\\n    foreach (var t in Model.Tables.OrderBy(a => a.Name).ToList())\\n    {    \\n        string objectName = t.Name;\\n        string objectType = \\\"Table\\\";\\n        string tableName = t.Name;\\n        string transLang = string.Empty;\\n        string transName = string.Empty;\\n        string transDesc = string.Empty;\\n        string transDF = string.Empty;\\n    \\n        if (hasTranslation)\\n        {\\n            transLang = cul.Name;\\n            transName = t.TranslatedNames[transLang];\\n            transDesc = t.TranslatedDescriptions[transLang];\\n            transDF = string.Empty;\\n        }\\n        \\n        sb.Append(objectName + '\\t' + objectType + '\\t' + tableName + '\\t' + transLang + '\\t' + transName + '\\t' + transDesc + '\\t' + transDF + newline);\\n    }\\n    \\n    // Columns\\n    foreach (var c in Model.AllColumns.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = c.Name;\\n        string objectType = \\\"Column\\\";\\n        string tableName = c.Table.Name;\\n        string transLang = string.Empty;\\n        string transName = string.Empty;\\n        string transDesc = string.Empty;\\n        string transDF = string.Empty;\\n                \\n        if (hasTranslation)\\n        {\\n            transLang = cul.Name;\\n            transName = c.TranslatedNames[transLang];\\n            transDesc = c.TranslatedDescriptions[transLang];\\n            transDF = c.TranslatedDisplayFolders[transLang];\\n        }\\n        \\n        sb.Append(objectName + '\\t' + objectType + '\\t' + tableName + '\\t' + transLang + '\\t' + transName + '\\t' + transDesc + '\\t' + transDF + newline);\\n    }\\n    \\n    // Measures\\n    foreach (var m in Model.AllMeasures.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = m.Name;\\n        string objectType = \\\"Measure\\\";\\n        string tableName = m.Table.Name;\\n        string transLang = string.Empty;\\n        string transName = string.Empty;\\n        string transDesc = string.Empty;\\n        string transDF = string.Empty;\\n        \\n        if (hasTranslation)\\n        {\\n            transLang = cul.Name;\\n            transName = m.TranslatedNames[transLang];\\n            transDesc = m.TranslatedDescriptions[transLang];\\n            transDF = m.TranslatedDisplayFolders[transLang];\\n        }\\n        \\n        sb.Append(objectName + '\\t' + objectType + '\\t' + tableName + '\\t' + transLang + '\\t' + transName + '\\t' + transDesc + '\\t' + transDF + newline);\\n    }\\n    \\n    // Hierarchies\\n    foreach (var h in Model.AllHierarchies.OrderBy(a => a.Name).ToList())\\n    {\\n        string objectName = h.Name;\\n        string objectType = \\\"Hierarchy\\\";\\n        string tableName = h.Table.Name;\\n        string transLang = string.Empty;\\n        string transName = string.Empty;\\n        string transDesc = string.Empty;\\n        string transDF = string.Empty;\\n        \\n        if (hasTranslation)\\n        {\\n            transLang = cul.Name;\\n            transName = h.TranslatedNames[transLang];\\n            transDesc = h.TranslatedDescriptions[transLang];\\n            transDF = h.TranslatedDisplayFolders[transLang];\\n        }\\n        \\n        sb.Append(objectName + '\\t' + objectType + '\\t' + tableName + '\\t' + transLang + '\\t' + transName + '\\t' + transDesc + '\\t' + transDF + newline);\\n    }\\n}\\n\\n// Remove the placeholder translation\\nif (hasTranslation == false)\\n{\\n    Model.Cultures[placeLang].Delete();\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\Translations.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/*************************CALCULATION GROUPS***************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"CalculationGroup\\\" + '\\t' + \\\"CalculationItem\\\" + '\\t' + \\\"Expression\\\" + '\\t' + \\\"Ordinal\\\" + '\\t' + \\\"FormatString\\\" + '\\t' + \\\"Description\\\" + newline);\\n\\nforeach (var o in Model.CalculationGroups.OrderBy(a => a.Name).ToList())\\n{\\n    foreach (var i in o.CalculationItems.OrderBy(a => a.Name).ToList())\\n    {\\n        string cg = o.Name;\\n        string ci = i.Name;\\n        string expr = i.Expression;\\n        \\n        // Remove tabs and new lines\\n        expr = expr.Replace(\\\"\\n\\\",\\\" \\\");\\n        expr = expr.Replace(\\\"\\t\\\",\\\" \\\");\\n\\n        string ord = i.Ordinal.ToString();\\n        string fs = i.FormatStringExpression;\\n        string desc = i.Description;\\n        \\n        sb.Append(cg + '\\t' + ci + '\\t' + expr + '\\t' + ord + '\\t' + fs + '\\t' + desc + newline);\\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\CalculationGroups.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/*********************************KPI**********************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"MeasureName\\\" + '\\t' + \\\"StatusExpresssion\\\" + '\\t' + \\\"StatusGraphic\\\" + '\\t' +\\n          \\\"StatusDescription\\\" + '\\t' + \\\"TargetExpression\\\" + '\\t' + \\\"TargetFormatString\\\" + '\\t' + \\\"TargetDescription\\\" + '\\t' + \\\"TrendExpression\\\" + '\\t' + \\\"TrendGraphic\\\" + '\\t' + \\\"TrendDescription\\\" + newline);\\n\\nforeach (var m in Model.AllMeasures.Where(a => a.KPI != null).OrderBy(a => a.Name).ToList())\\n{\\n    \\n    string tableName = m.Table.Name;\\n    string measureName = m.Name;\\n    var k = m.KPI;\\n    string statusExpr = k.StatusExpression.Replace(\\\"\\n\\\",\\\" \\\").Replace(\\\"\\t\\\",\\\" \\\");;\\n    string statusDesc = k.StatusDescription;\\n    string statusGraphic = k.StatusGraphic;\\n    string targetExpr = k.TargetExpression.Replace(\\\"\\n\\\",\\\" \\\").Replace(\\\"\\t\\\",\\\" \\\");\\n    string targetDesc = k.TargetDescription;\\n    string targetFS = k.TargetFormatString;\\n    string trendExpr = k.TrendExpression.Replace(\\\"\\n\\\",\\\" \\\").Replace(\\\"\\t\\\",\\\" \\\");;\\n    string trendDesc = k.TrendDescription;\\n    string trendGraphic = k.TrendGraphic;\\n \\n    sb.Append(tableName + '\\t' + measureName + '\\t' + statusExpr + '\\t' + statusGraphic + '\\t' + statusDesc + '\\t' + targetExpr + '\\t' + targetFS + '\\t' + targetDesc + '\\t' + trendExpr + '\\t' + trendGraphic + '\\t' + trendDesc + newline);\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\KPI.txt\\\", sb.ToString());\\n\\n/**********************************************************************/\\n/*********************************OLS**********************************/\\n\\nsb = new System.Text.StringBuilder();\\n\\n// Headers\\nsb.Append(\\\"RoleName\\\" + '\\t' + \\\"ObjectType\\\" + '\\t' + \\\"TableName\\\" + '\\t' + \\\"ObjectName\\\" + '\\t' + \\\"ObjectLevelSecurity\\\" + newline);\\n\\nif (Model.Database.CompatibilityLevel >= 1400)\\n{\\n    foreach (var t in Model.Tables.OrderBy(a => a.Name).ToList())\\n    {\\n        string tableName = t.Name;\\n        \\n        foreach(var r in Model.Roles.OrderBy(a => a.Name).ToList())\\n        {\\n            string roleName = r.Name;\\n            string tableOLS = Model.Tables[tableName].ObjectLevelSecurity[roleName].ToString();\\n            if (!String.IsNullOrEmpty(tableOLS))\\n            {\\n                sb.Append(roleName + '\\t' + \\\"Table\\\" + '\\t' + tableName + '\\t' + tableName + '\\t' + tableOLS + newline);\\n            }\\n            \\n            foreach (var c in t.Columns.OrderBy(a => a.Name).ToList())\\n            {\\n                string colName = c.Name;\\n                string colOLS = Model.Tables[tableName].Columns[colName].ObjectLevelSecurity[roleName].ToString();\\n                \\n                if (!String.IsNullOrEmpty(colOLS))\\n                {\\n                    sb.Append(roleName + '\\t' + \\\"Column\\\" + '\\t' + tableName + '\\t' + colName + '\\t' + colOLS + newline);\\n                }\\n            }\\n        }    \\n    }\\n}\\n\\nSystem.IO.File.WriteAllText(folderName + @\\\"\\OLS.txt\\\", sb.ToString());\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\MetadataImport_Perspectives",
      "Enabled": "true",
      "Execute": "var folderName = @\\\"C:\\Users\\mikova\\Desktop\\Metadata\\\"; //Update this to the folder that contains the Metadata Export text files\\n\\nvar fileName = @\\\"\\Perspectives.txt\\\";\\n\\nvar Metadata = ReadFile(folderName+fileName);\\n\\n// Split the file into rows by CR and LF characters:\\nvar tsvRows = Metadata.Split(new[] {'\\r','\\n'},StringSplitOptions.RemoveEmptyEntries);\\n\\n// Set array for perspective names\\nvar col = tsvRows[0].Split('\\t');\\nint pCount = col.Count() - 3;\\nstring[] p = new string[1000];\\n\\nfor (int i = 0; i < pCount; i++)\\n{\\n    p[i] = col[i+3];\\n}\\n\\n// Loop through all rows but skip the first one:\\nforeach(var row in tsvRows.Skip(1))\\n{\\n    var tsvColumns = row.Split('\\t');     // Assume file uses tabs as column separator  \\n    \\n    if (pCount > 0)\\n    {\\n        for (int i = 0; i < pCount; i++)\\n        {\\n            var tableName = tsvColumns[0];\\n            var objectName = tsvColumns[1];\\n            var objectType = tsvColumns[2];\\n            var persp =  p[i];\\n            bool yesno = true;\\n                \\n            if (tsvColumns[i+3] == \\\"Yes\\\")\\n            {\\n                yesno = true;\\n            }\\n            else if (tsvColumns[i+3] == \\\"No\\\")\\n            {\\n                yesno = false;\\n            }\\n\\n            // Update perspective values for objects\\n            if (objectType == \\\"Column\\\")\\n            {\\n                Model.Tables[tableName].Columns[objectName].InPerspective[persp] = yesno;\\n            }\\n            \\n            else if (objectType == \\\"Measure\\\")\\n            {\\n                Model.Tables[tableName].Measures[objectName].InPerspective[persp] = yesno;\\n            }\\n         \\n            else if (objectType == \\\"Hierarchy\\\")\\n            {\\n                Model.Tables[tableName].Hierarchies[objectName].InPerspective[persp] = yesno;\\n            }    \\n        }\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\MetadataImport_Translations",
      "Enabled": "true",
      "Execute": "var folderName = @\\\"C:\\Users\\mikova\\Desktop\\Metadata\\\"; //Update this to the folder that contains the Metadata Export text files\\n\\nvar fileName = @\\\"\\Translations.txt\\\";\\n\\nvar Metadata = ReadFile(folderName+fileName);\\n\\n// Split the file into rows by CR and LF characters:\\nvar tsvRows = Metadata.Split(new[] {'\\r','\\n'},StringSplitOptions.RemoveEmptyEntries);\\n\\n// Loop through all rows but skip the first one:\\nforeach(var row in tsvRows.Skip(1))\\n{\\n    var tsvColumns = row.Split('\\t');     // Assume file uses tabs as column separator  \\n    var objectName = tsvColumns[0];\\n    var objectType = tsvColumns[1];\\n    var tableName = tsvColumns[2];\\n    var lang = tsvColumns[3];\\n    var transobj = tsvColumns[4];\\n    var transobjdesc = tsvColumns[5];\\n    var transobjdf = tsvColumns[6];\\n    \\n    // Add new translation language if it does not already exist\\n    if (Model.Cultures.Where(a => a.Name == lang).Count() == 0)\\n    {\\n        Model.AddTranslation(lang);\\n    }\\n    \\n    // Add the translations for tables\\n    if (objectType == \\\"Table\\\")\\n    {\\n        Model.Tables[tableName].TranslatedNames[lang] = transobj;\\n        Model.Tables[tableName].TranslatedDescriptions[lang] = transobjdesc;\\n    }\\n\\n    // Add the translations for columns\\n    else if (objectType == \\\"Column\\\")\\n    {\\n        Model.Tables[tableName].Columns[objectName].TranslatedNames[lang] = transobj;\\n        Model.Tables[tableName].Columns[objectName].TranslatedDescriptions[lang] = transobjdesc;\\n        Model.Tables[tableName].Columns[objectName].TranslatedDisplayFolders[lang] = transobjdf;\\n        \\n    }\\n\\n    // Add the translations for measures\\n    else if (objectType == \\\"Measure\\\")\\n    {\\n        Model.Tables[tableName].Measures[objectName].TranslatedNames[lang] = transobj;\\n        Model.Tables[tableName].Measures[objectName].TranslatedDescriptions[lang] = transobjdesc;\\n        Model.Tables[tableName].Measures[objectName].TranslatedDisplayFolders[lang] = transobjdf;\\n    }\\n    \\n    // Add the translations for hierarchies\\n    else if (objectType == \\\"Hierarchy\\\")\\n    {\\n        Model.Tables[tableName].Hierarchies[objectName].TranslatedNames[lang] = transobj;\\n        Model.Tables[tableName].Hierarchies[objectName].TranslatedDescriptions[lang] = transobjdesc;\\n        Model.Tables[tableName].Hierarchies[objectName].TranslatedDisplayFolders[lang] = transobjdf;\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\PerspectiveEditor",
      "Enabled": "true",
      "Execute": "#r \\\"System.Drawing\\\"\\n\\nusing System.Drawing;\\n\\n// Create elements\\nSystem.Windows.Forms.Form newForm = new System.Windows.Forms.Form();\\nSystem.Windows.Forms.Panel newPanel = new System.Windows.Forms.Panel();\\nSystem.Windows.Forms.Label toolLabel = new System.Windows.Forms.Label();\\nSystem.Windows.Forms.TreeView treeView = new System.Windows.Forms.TreeView();\\nSystem.Windows.Forms.Button createButton = new System.Windows.Forms.Button();\\nSystem.Windows.Forms.TextBox enterTextBox = new System.Windows.Forms.TextBox();\\nSystem.Windows.Forms.Label nameLabel = new System.Windows.Forms.Label();\\nSystem.Windows.Forms.ImageList imageList = new System.Windows.Forms.ImageList();\\nSystem.Windows.Forms.RadioButton newmodelButton = new System.Windows.Forms.RadioButton();\\nSystem.Windows.Forms.RadioButton existingmodelButton = new System.Windows.Forms.RadioButton();\\nSystem.Windows.Forms.Button goButton = new System.Windows.Forms.Button();\\nSystem.Windows.Forms.ComboBox enterComboBox = new System.Windows.Forms.ComboBox();\\nSystem.Net.WebClient w = new System.Net.WebClient();\\nSystem.Windows.Forms.LinkLabel ebiHome = new System.Windows.Forms.LinkLabel();\\n\\n// Colors\\nSystem.Drawing.Color visibleColor = Color.Black;\\nSystem.Drawing.Color hiddenColor = Color.Gray;\\nSystem.Drawing.Color bkgrdColor =  ColorTranslator.FromHtml(\\\"#F2F2F2\\\");\\nSystem.Drawing.Color darkblackColor =  ColorTranslator.FromHtml(\\\"#0D1117\\\");\\nSystem.Drawing.Color darkgrayColor =  ColorTranslator.FromHtml(\\\"#21262D\\\");\\nSystem.Drawing.Color lightgrayColor =  ColorTranslator.FromHtml(\\\"#C9D1D9\\\");\\n\\n// Fonts\\nstring fontName = \\\"Century Gothic\\\";\\nSystem.Drawing.Font homeToolNameFont = new Font(fontName, 24);\\nSystem.Drawing.Font stdFont = new Font(fontName, 10);\\nSystem.Drawing.Font elegantFont = new Font(fontName, 10, FontStyle.Italic);\\n\\n// Add images from web to Image List\\nstring urlPrefix = \\\"https://github.com/m-kovalsky/Tabular/raw/master/Icons/\\\";\\nstring urlSuffix = \\\"Icon.png\\\";\\nstring toolName = \\\"Perspective Editor\\\";\\nstring ebiURL = @\\\"https://www.elegantbi.com\\\";\\n\\nstring[] imageURLList = { \\\"Table\\\", \\\"Column\\\", \\\"Measure\\\", \\\"Hierarchy\\\" };\\nfor (int b = 0; b < imageURLList.Count(); b++)\\n{\\n    string url = urlPrefix + imageURLList[b] + urlSuffix;      \\n    byte[] imageByte = w.DownloadData(url);\\n    System.IO.MemoryStream ms = new System.IO.MemoryStream(imageByte);\\n    System.Drawing.Image im = System.Drawing.Image.FromStream(ms);\\n    imageList.Images.Add(im);\\n}    \\n    \\n// Images\\ntreeView.ImageList = imageList;\\ntreeView.ImageIndex = 0;   \\nimageList.ImageSize = new Size(16, 16);   \\n     \\n// Form\\nnewForm.Text = toolName;\\nint formWidth = 600;\\nint formHeight = 600;\\nnewForm.TopLevel = true;\\nnewForm.Size = new Size(formWidth,formHeight);\\nnewForm.Controls.Add(newPanel);\\nnewForm.BackColor = bkgrdColor;\\nnewForm.MaximumSize = new Size(formWidth,formHeight);\\nnewForm.MinimumSize = new Size(formWidth,formHeight);\\n\\n// Panel\\nnewPanel.Size = new Size(formWidth,formHeight);\\nnewPanel.Location =  new Point(0, 0);\\nnewPanel.BorderStyle = System.Windows.Forms.BorderStyle.None;\\nnewPanel.BackColor = bkgrdColor;\\nnewPanel.Controls.Add(treeView);\\nnewPanel.Controls.Add(createButton);\\nnewPanel.Controls.Add(enterTextBox);\\nnewPanel.Controls.Add(nameLabel);\\nnewPanel.Visible = false;\\n\\n// TreeView\\nint treeViewWidth = formWidth * 2 / 3;\\nint treeViewHeight = formHeight - 100;\\nint treeViewX = 10;\\nint treeViewY = 50;\\ntreeView.CheckBoxes = false;\\ntreeView.Size = new Size(treeViewWidth,treeViewHeight);\\ntreeView.Location = new Point(treeViewX,treeViewY);\\ntreeView.StateImageList = new System.Windows.Forms.ImageList();\\ntreeView.Visible = false;\\nbool IsExpOrCol = false;\\nstring perspName = string.Empty;\\n\\n// Add images for tri-state tree view\\nstring[] stateimageURLList = { \\\"Unchecked\\\", \\\"Checked\\\", \\\"PartiallyChecked\\\" };\\nfor (int c = 0; c < stateimageURLList.Count(); c++)\\n{\\n    var url = urlPrefix + stateimageURLList[c] + urlSuffix;      \\n    byte[] imageByte = w.DownloadData(url);\\n    System.IO.MemoryStream ms = new System.IO.MemoryStream(imageByte);\\n    System.Drawing.Image im = System.Drawing.Image.FromStream(ms);\\n    treeView.StateImageList.Images.Add(im);\\n}  \\n            \\n// Create Button\\ncreateButton.Size = new Size(130,55);\\ncreateButton.Location = new Point(treeViewWidth + 35,treeViewY);\\ncreateButton.Text = \\\"Create Perspective\\\";\\ncreateButton.Visible = false;\\ncreateButton.Font = stdFont;\\n\\nint startScreenX = 200;\\nint startScreenY = 200;\\n\\ntoolLabel.Size = new Size(300,60);\\ntoolLabel.Text = toolName;\\ntoolLabel.Location = new Point(150,100);\\ntoolLabel.Font = homeToolNameFont;\\ntoolLabel.ForeColor = visibleColor;\\n\\n// New Model Button\\nnewmodelButton.Size = new Size(250,40);\\nnewmodelButton.Location = new Point(startScreenX,startScreenY);\\nnewmodelButton.Text = \\\"Create New Perspective\\\";\\nnewmodelButton.Font = stdFont;\\n\\n// Existing Model Button\\nexistingmodelButton.Size = new Size(250,40);\\nexistingmodelButton.Location = new Point(startScreenX,startScreenY+30);\\nexistingmodelButton.Text = \\\"Modify Existing Perspective\\\";\\nexistingmodelButton.Font = stdFont;\\n\\n// Enter Combo Box\\nenterComboBox.Visible = false;\\nenterComboBox.Size = new Size(215,40);\\nenterComboBox.Location = new Point(startScreenX-10,startScreenY+80);\\nenterComboBox.Font = stdFont;\\n\\n// Add items to combo box\\nforeach (var p in Model.Perspectives.ToList())\\n{\\n    string pName = p.Name;\\n    enterComboBox.Items.Add(pName);\\n}\\n\\n// New Model Button\\ngoButton.Size = new Size(140,30);\\ngoButton.Location = new Point(startScreenX+80,startScreenY+80);\\ngoButton.Text = \\\"Go\\\";\\ngoButton.Font = stdFont;\\ngoButton.Visible = false;\\ngoButton.Enabled = false; \\n\\n// Add starting elements to form\\nnewForm.Controls.Add(newmodelButton);\\nnewForm.Controls.Add(existingmodelButton);\\nnewForm.Controls.Add(enterComboBox);\\nnewForm.Controls.Add(goButton);\\nnewForm.Controls.Add(toolLabel);\\nnewForm.Controls.Add(ebiHome);\\n\\nebiHome.Text = \\\"Designed by Elegant BI\\\";\\nebiHome.Size = new Size(200,40);\\nebiHome.Location = new Point(220,400);\\nebiHome.Font = elegantFont;\\n\\nebiHome.LinkClicked += (System.Object sender, System.Windows.Forms.LinkLabelLinkClickedEventArgs e) => {\\n\\n    System.Diagnostics.Process.Start(ebiURL);\\n};\\n\\n// Label\\nnameLabel.Size = new Size(60,40);\\nnameLabel.Location = new Point(treeViewX,20);\\nnameLabel.Text = \\\"Name:\\\";\\nnameLabel.Font = stdFont;\\nnameLabel.Visible = false;\\n\\n// Text box\\nenterTextBox.Size = new Size(348,40);\\nenterTextBox.Location = new Point(63,18);\\nenterTextBox.Visible = false;\\nenterTextBox.Font = stdFont;\\n\\n// Add nodes to treeview\\nforeach (var t in Model.Tables.OrderBy(a => a.Name).ToList())\\n{  \\n    // Add table nodes\\n    string tableName = t.Name;    \\n    var tn = treeView.Nodes.Add(tableName);    \\n    tn.StateImageIndex = 0;\\n    tn.ImageIndex = 0;\\n    tn.SelectedImageIndex = 0;\\n    \\n    if (t.IsHidden)\\n    {\\n        tn.ForeColor = hiddenColor;\\n    }\\n    \\n    // Add column sub-nodes\\n    foreach (var c in t.Columns.OrderBy(a => a.Name).ToList())\\n    {\\n        string columnName = c.Name;\\n        var x = tn.Nodes.Add(columnName);        \\n        x.StateImageIndex = 0;\\n        x.ImageIndex = 1;        \\n        x.SelectedImageIndex = 1;\\n        \\n        if (c.IsHidden)\\n        {\\n            x.ForeColor = hiddenColor;\\n        }\\n    }\\n    \\n    // Add measure sub-nodes\\n    foreach (var m in t.Measures.OrderBy(a => a.Name).ToList())\\n    {\\n        string measureName = m.Name;\\n        var x = tn.Nodes.Add(measureName);\\n        x.StateImageIndex = 0;\\n        x.ImageIndex = 2;        \\n        x.SelectedImageIndex = 2;\\n        \\n        if (m.IsHidden)\\n        {\\n            x.ForeColor = hiddenColor;\\n        }\\n    }   \\n   \\n    // Add hierarchy sub-nodes\\n    foreach (var h in t.Hierarchies.OrderBy(a => a.Name).ToList())\\n    {\\n        string hierarchyName = h.Name;\\n        var x = tn.Nodes.Add(hierarchyName);\\n         x.ImageIndex = 3;\\n         x.StateImageIndex = 0;\\n         x.SelectedImageIndex = 3;\\n         \\n        if (h.IsHidden)\\n        {\\n            x.ForeColor = hiddenColor;\\n        }\\n    }    \\n}\\n\\nnewmodelButton.Click += (System.Object sender1, System.EventArgs e1) => {\\n\\n    goButton.Visible = true;\\n    existingmodelButton.Checked = false;\\n    newmodelButton.Checked = true;\\n    goButton.Location = new Point(startScreenX+25, startScreenY+80);\\n    enterComboBox.Visible = false;\\n    goButton.Enabled = true;\\n    enterComboBox.Text = string.Empty;\\n    createButton.Text = \\\"Create Perspective\\\";   \\n    enterTextBox.Enabled = true;\\n};\\n\\nexistingmodelButton.Click += (System.Object sender2, System.EventArgs e2) => {\\n\\n    goButton.Location = new Point(startScreenX+25, startScreenY+120);\\n    enterComboBox.Visible = true;\\n    goButton.Visible = true;    \\n    newmodelButton.Checked = false;\\n    existingmodelButton.Checked = true;  \\n    createButton.Text = \\\"Modify Perspective\\\";    \\n    enterTextBox.Enabled = false;\\n    \\n    // Add items to combo box\\n    enterComboBox.Items.Clear();\\n    foreach (var p in Model.Perspectives.ToList())\\n    {\\n        string pName = p.Name;\\n        enterComboBox.Items.Add(pName);\\n    }\\n    \\n    if (enterComboBox.SelectedItem == null)\\n    {\\n        goButton.Enabled = false;\\n    }\\n};\\n\\nenterComboBox.SelectedValueChanged += (System.Object sender3, System.EventArgs e3) => {\\n\\n    goButton.Enabled = true;         \\n};\\n\\ngoButton.Click += (System.Object sender4, System.EventArgs e4) => {\\n\\n    // Hide initial buttons    \\n    newmodelButton.Visible = false;\\n    existingmodelButton.Visible = false;    \\n    enterComboBox.Visible = false;\\n    goButton.Visible = false;\\n    toolLabel.Visible = false;\\n    ebiHome.Visible = false;\\n    \\n    string p = enterComboBox.Text;\\n    \\n    // Make panel items visible\\n    newPanel.Visible = true;\\n    createButton.Visible = true;\\n    treeView.Visible = true;\\n    nameLabel.Visible = true;\\n    enterTextBox.Visible = true;\\n    \\n    // Populate tree from perspective if modifying existing mini model\\n    if (p != string.Empty)\\n    {\\n        enterTextBox.Text = p;\\n     \\n        foreach (System.Windows.Forms.TreeNode rootNode in treeView.Nodes)\\n        {\\n             string tableName = rootNode.Text;\\n             int childNodeCount = rootNode.Nodes.Count;\\n             int childNodeCheckedCount = 0;\\n\\n             // Loop through checked child nodes (columns, measures, hierarchies)\\n             foreach (System.Windows.Forms.TreeNode childNode in rootNode.Nodes)\\n             {\\n                 var objectName = childNode.Text;\\n                 \\n                 if (childNode.ImageIndex == 1)\\n                 {\\n                     if (Model.Tables[tableName].Columns[objectName].InPerspective[p] == true)\\n                     {\\n                         childNode.StateImageIndex = 1;\\n                     }\\n                 }\\n                 else if (childNode.ImageIndex == 2)\\n                 {\\n                     if (Model.Tables[tableName].Measures[objectName].InPerspective[p] == true)\\n                     {\\n                         childNode.StateImageIndex = 1;\\n                     }\\n                 }\\n                 else if (childNode.ImageIndex == 3)\\n                 {\\n                     if (Model.Tables[tableName].Hierarchies[objectName].InPerspective[p] == true)\\n                     {\\n                         childNode.StateImageIndex = 1;\\n                     }\\n                 }\\n                 \\n                 if (childNode.StateImageIndex == 1)\\n                 {\\n                    childNodeCheckedCount+=1;\\n                 }\\n            }\\n             \\n            // Finish populating tree root nodes (tables)\\n            // If all child nodes are checked, set parent node to checked\\n            if (childNodeCheckedCount == childNodeCount)\\n            {\\n                rootNode.StateImageIndex = 1;\\n            }\\n            // If no child nodes are checked, set parent node to unchecked\\n            else if (childNodeCheckedCount == 0)\\n            {\\n                rootNode.StateImageIndex = 0;\\n            }\\n            // If not all children nodes are selected, set parent node to partially checked icon\\n            else if (childNodeCheckedCount < childNodeCount)\\n            {\\n                rootNode.StateImageIndex = 2;\\n            }\\n         }\\n     }                      \\n};\\n\\ntreeView.NodeMouseClick += (System.Object sender, System.Windows.Forms.TreeNodeMouseClickEventArgs e) => {\\n    \\n    if (IsExpOrCol == false)\\n    {\\n        if (e.Node.StateImageIndex != 1)\\n        {\\n            e.Node.StateImageIndex = 1;\\n        }\\n        else if (e.Node.StateImageIndex == 1)\\n        {\\n            e.Node.StateImageIndex = 0;\\n        }\\n        \\n        // If parent node is checked, check all child nodes\\n        if (e.Node.Nodes.Count > 0 && e.Node.StateImageIndex == 1)\\n        {\\n            foreach (System.Windows.Forms.TreeNode childNode in e.Node.Nodes)\\n            {\\n                childNode.StateImageIndex = 1;\\n            }\\n        }       \\n        \\n        // If parent node is unhecked, uncheck all child nodes\\n        else if (e.Node.Nodes.Count > 0 && e.Node.StateImageIndex == 0)\\n        {\\n            foreach (System.Windows.Forms.TreeNode childNode in e.Node.Nodes)\\n            {\\n                childNode.StateImageIndex = 0;\\n            }\\n        }\\n        \\n        if (e.Node.Parent != null)\\n        {\\n            int childNodeCount = e.Node.Parent.Nodes.Count;   \\n            int childNodeCheckedCount = 0;    \\n        \\n            foreach (System.Windows.Forms.TreeNode n in e.Node.Parent.Nodes)\\n            {\\n                if (n.StateImageIndex == 1)\\n                {\\n                    childNodeCheckedCount+=1;\\n                }\\n            }\\n            \\n            // If all child nodes are checked, set parent node to checked\\n            if (childNodeCheckedCount == childNodeCount)\\n            {\\n                e.Node.Parent.StateImageIndex = 1;\\n            }\\n            // If no child nodes are checked, set parent node to unchecked\\n            else if (childNodeCheckedCount == 0)\\n            {\\n                e.Node.Parent.StateImageIndex = 0;\\n            }\\n            // If not all children nodes are selected, set parent node to partially checked icon\\n            else if (childNodeCheckedCount < childNodeCount)\\n            {\\n                e.Node.Parent.StateImageIndex = 2;\\n            }\\n        }   \\n    }\\n    \\n    IsExpOrCol = false;\\n};\\n\\ntreeView.AfterExpand += (System.Object sender9, System.Windows.Forms.TreeViewEventArgs e9) => {\\n    \\n    IsExpOrCol = true;\\n};\\n\\ntreeView.AfterCollapse += (System.Object sender10, System.Windows.Forms.TreeViewEventArgs e10) => {\\n    \\n    IsExpOrCol = true;\\n};\\n\\ncreateButton.Click += (System.Object sender6, System.EventArgs e6) => {\\n   \\n     perspName = enterTextBox.Text;     \\n     \\n     if (perspName == string.Empty)\\n     {\\n         // Invalid perspective name\\n         Error(\\\"Please enter a name for the new perspective.\\\");\\n     }\\n     else\\n     {\\n         if (!Model.Perspectives.Any(a => a.Name == perspName))\\n         {\\n             // Create new perspective\\n             Model.AddPerspective(perspName);\\n         }\\n\\n         // Clear perspective\\n         foreach (var t in Model.Tables.ToList())\\n         {\\n             string tableName = t.Name;             \\n             Model.Tables[tableName].InPerspective[perspName] = false;\\n         }\\n         \\n         // Loop through root nodes (tables)\\n         foreach (System.Windows.Forms.TreeNode rootNode in treeView.Nodes)\\n         {\\n             string tableName = rootNode.Text;\\n         \\n             // Loop through checked child nodes (columns, measures, hierarchies)\\n             foreach (System.Windows.Forms.TreeNode childNode in rootNode.Nodes)\\n             {\\n                 string objectName = childNode.Text;\\n                 \\n                 if (childNode.StateImageIndex == 1)\\n                 {\\n                     // Columns\\n                     if (childNode.ImageIndex == 1)                    \\n                     {\\n                         Model.Tables[tableName].Columns[objectName].InPerspective[perspName] = true;                                              \\n                     }                    \\n                     // Measures\\n                     else if (childNode.ImageIndex == 2)                    \\n                     {\\n                         Model.Tables[tableName].Measures[objectName].InPerspective[perspName] = true;                                            \\n                     }\\n                     // Hierarchies\\n                     else if (childNode.ImageIndex == 3)                    \\n                     {\\n                         Model.Tables[tableName].Hierarchies[objectName].InPerspective[perspName] = true;\\n                     }\\n                 }\\n             }\\n         }\\n     }        \\n};\\n\\nnewForm.Show();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\Processing\\CancelProcessing",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.AnalysisServices.Core.dll\\\"\\n\\nvar DMV_Cmd = ExecuteDax(\\\"SELECT [SESSION_ID],[SESSION_LAST_COMMAND] FROM $SYSTEM.DISCOVER_SESSIONS\\\").Tables[0];\\nbool runTMSL = true;\\nstring databaseID = Model.Database.ID;\\nstring databaseName = Model.Database.Name;\\nstring sID = string.Empty;\\n\\nfor (int r = 0; r < DMV_Cmd.Rows.Count; r++)\\n{\\n    string sessionID = DMV_Cmd.Rows[r][0].ToString();\\n    string cmdText = DMV_Cmd.Rows[r][1].ToString();\\n    \\n    // Capture refresh command for the database\\n    if (cmdText.StartsWith(\\\"<Batch Transaction=\\\") && cmdText.Contains(\\\"<Refresh xmlns\\\") && cmdText.Contains(\\\"<DatabaseID>\\\"+databaseID+\\\"</DatabaseID>\\\"))\\n    {\\n        sID = sessionID;\\n    }      \\n}\\n\\nif (sID == string.Empty)\\n{\\n    Error(\\\"No processing Session ID found for the '\\\"+databaseName+\\\"' model.\\\");\\n    return;\\n}\\n\\nif (runTMSL)\\n{\\n    Model.Database.TOMDatabase.Server.CancelSession(sID);\\n    Info(\\\"Processing for the '\\\"+databaseName+\\\"' model has been cancelled (Session ID: \\\"+sID+\\\").\\\");\\n}\\nelse\\n{\\n    sID.Output();\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\Processing\\ProcessTablesFromList",
      "Enabled": "true",
      "Execute": "// Initial parameters\\nstring[] tableList = {\\\"Calendar\\\",\\\"Geography\\\"}; // Enter tables to process. If you want to process the whole database, leave the array as {};\\nstring type = \\\"full\\\"; // Options: 'full','automatic','calculate','clearValues'\\n\\n// Additional parameters\\nstring databaseName = Model.Database.Name;\\nstring tmslStart = \\\"{ \\\\\"refresh\\\\\": { \\\\\"type\\\\\": \\\\\"\\\"+type+\\\"\\\\\",\\\\\"objects\\\\\": [ \\\";\\nstring tmslMid = \\\"{\\\\\"database\\\\\": \\\\\"\\\"+databaseName+\\\"\\\\\",\\\\\"table\\\\\": \\\\\"%table%\\\\\"} \\\";\\nstring tmslMidDB = \\\"{\\\\\"database\\\\\": \\\\\"\\\"+databaseName+\\\"\\\\\"}\\\";\\nstring tmslEnd = \\\"] } }\\\";\\nstring tmsl = tmslStart;\\nstring tablePrint = string.Empty;\\nstring[] typeList = {\\\"full\\\",\\\"automatic\\\",\\\"calculate\\\",\\\"clearValues\\\"};\\nvar sw = new System.Diagnostics.Stopwatch();\\n\\n// Error check: processing type\\nif (!typeList.Contains(type))\\n{\\n    Error(\\\"Invalid processing 'type'. Please enter a valid processing type within the 'type' parameter.\\\");\\n    return;\\n}\\n\\n// Error check: validate tables\\nfor (int i=0; i<tableList.Length; i++)\\n{\\n    if (!Model.Tables.Any(a => a.Name == tableList[i]))\\n    {\\n        Error(\\\"'\\\"+tableList[i]+\\\"' is not a valid table in the model.\\\");\\n        return;\\n    }\\n}\\n\\n// Generate TMSL\\nif (tableList.Length == 0)\\n{\\n    tmsl = tmsl+tmslMidDB+tmslEnd;\\n}\\nelse\\n{\\n    for (int i=0; i<tableList.Length; i++)\\n    {\\n        if (i == 0)\\n        {\\n            tmsl = tmsl+tmslMid.Replace(\\\"%table%\\\",tableList[i]);\\n        }\\n        else\\n        {\\n            tmsl = tmsl+\\\",\\\"+tmslMid.Replace(\\\"%table%\\\",tableList[i]);\\n        }\\n        \\n        tablePrint = tablePrint + \\\"'\\\"+tableList[i]+\\\"',\\\";\\n    }\\n    \\n    tmsl = tmsl + tmslEnd;    \\n}\\n\\n// Run TMSL and output info text\\ntablePrint = tablePrint.Substring(0,tablePrint.Length-1);\\nsw.Start();\\nExecuteCommand(tmsl);\\nsw.Stop();\\nInfo(\\\"Processing '\\\"+type+\\\"' of tables: [\\\"+tablePrint+\\\"] finished in: \\\" + sw.ElapsedMilliseconds + \\\" ms\\\");\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\Processing\\ProcessUnprocessedObjects",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.AnalysisServices.Core.dll\\\"\\n\\n// Initial Parameters\\nbool runTMSL = true;\\nstring processingType = \\\"full\\\"; // Enter the processing type\\nstring[] typeList = {\\\"full\\\",\\\"automatic\\\",\\\"calculate\\\",\\\"clearValues\\\",\\\"defragment\\\",\\\"dataOnly\\\"};\\nstring[] tableOmit = {}; // Set tables to omit from the processing script\\nbool seqEnabled = false; // Indicate whether to use the sequence command\\nint maxP = 0; // Enter the Max Parallelism (applicable if using sequence command)\\nstring databaseName = Model.Database.Name;\\nvar DMV_Tables = ExecuteDax(\\\"SELECT [ID],[Name] FROM $SYSTEM.TMSCHEMA_TABLES\\\").Tables[0];\\nvar DMV_Partitions = ExecuteDax(\\\"SELECT [ID],[TableID],[Name] FROM $SYSTEM.TMSCHEMA_PARTITIONS WHERE [State] <> 1\\\").Tables[0];\\nstring processingMethod = string.Empty; // Database, Table, Partition\\nstring newline = Environment.NewLine;\\nTOM.SaveOptions so = new TOM.SaveOptions();\\nvar sw = new System.Diagnostics.Stopwatch();\\nstring timeSpent = \\\"\\\";\\n\\n// Remove existing annotations\\nforeach (var o in Model.Tables.ToList())\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_TableID\\\");\\n}\\n\\nforeach (var o in Model.AllPartitions)\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_PartitionID\\\");\\n}\\n\\n// Add TableId annotations\\nfor (int r = 0; r < DMV_Tables.Rows.Count; r++)\\n{\\n    string tblID = DMV_Tables.Rows[r][0].ToString();\\n    string tblName = DMV_Tables.Rows[r][1].ToString();\\n    \\n    Model.Tables[tblName].SetAnnotation(\\\"Vertipaq_TableID\\\",tblID);         \\n}\\n\\n// Add PartitionId annotations\\nfor (int r = 0; r < DMV_Partitions.Rows.Count; r++)\\n{\\n    string pID = DMV_Partitions.Rows[r][0].ToString();\\n    string tableID = DMV_Partitions.Rows[r][1].ToString();\\n    string pName = DMV_Partitions.Rows[r][2].ToString();\\n    \\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\\\"Vertipaq_TableID\\\") == tableID))\\n    {\\n        string tableName = t.Name;\\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\\\"Vertipaq_PartitionID\\\",pID);        \\n    }\\n}\\n\\n// Error catching: Max Parallelism\\nif (seqEnabled == true && maxP <1)\\n{\\n    Error(\\\"Must enter a valid Max Parallelism value in the maxP parameter.\\\");\\n    return;\\n}\\n\\n// Update annotations based on tables/partitions to process\\nforeach (var t in Model.Tables.ToList())\\n{\\n    if (t.Partitions.All(a => a.HasAnnotation(\\\"Vertipaq_PartitionID\\\")))\\n    {\\n        foreach (var p in t.Partitions.ToList())\\n        {\\n            p.RemoveAnnotation(\\\"Vertipaq_PartitionID\\\");\\n        }\\n    }\\n    else\\n    {\\n        t.RemoveAnnotation(\\\"Vertipaq_TableID\\\");\\n    }\\n}\\n\\n// Identify processing method\\nif (Model.Tables.All(a => a.HasAnnotation(\\\"Vertipaq_TableID\\\")))\\n{\\n    processingMethod = \\\"Database\\\";\\n}\\nelse if (Model.AllPartitions.Any(a => a.HasAnnotation(\\\"Vertipaq_PartitionID\\\")))\\n{\\n    processingMethod = \\\"Partition\\\";\\n}\\nelse if (Model.Tables.Any(a => a.HasAnnotation(\\\"Vertipaq_TableID\\\")))\\n{\\n    processingMethod = \\\"Table\\\";\\n}\\nelse\\n{\\n    Info(\\\"All tables/partitions are already processed.\\\");\\n    return;\\n}\\n\\n// Error check: processing type\\nif (!typeList.Contains(processingType))\\n{\\n    Error(\\\"Invalid processing 'type'. Please enter a valid processing type within the 'type' parameter.\\\");\\n    return;\\n}\\n\\n// Determine refresh type\\nvar refType = TOM.RefreshType.Full;\\n\\nif (processingType.ToLower() == \\\"automatic\\\")\\n{\\n    refType = TOM.RefreshType.Automatic;\\n}\\nelse if (processingType.ToLower() == \\\"dataonly\\\")\\n{\\n    refType = TOM.RefreshType.DataOnly;\\n}\\nelse if (processingType.ToLower() == \\\"clearvalues\\\")\\n{\\n    refType = TOM.RefreshType.ClearValues;\\n}\\nelse if (processingType.ToLower() == \\\"calculate\\\")\\n{\\n    refType = TOM.RefreshType.Calculate;\\n}\\nelse if (processingType.ToLower() == \\\"defragment\\\")\\n{\\n    refType = TOM.RefreshType.Defragment;\\n}\\n\\n// Build Info output text\\nvar sb_Info = new System.Text.StringBuilder();\\nsb_Info.Append(\\\"Processing type '\\\"+processingType+\\\"' of the '\\\"+databaseName+\\\"' model \\\");\\n\\n// Generate request refresh\\nif (processingMethod == \\\"Database\\\")\\n{\\n    Model.Database.TOMDatabase.Model.RequestRefresh(refType);\\n}\\nelse if (processingMethod == \\\"Table\\\")\\n{\\n    sb_Info.Append(\\\"for the following tables: [\\\");\\n    foreach (var t in Model.Tables.Where(a => a.HasAnnotation(\\\"Vertipaq_TableID\\\")))\\n    {\\n        string tableName = t.Name;\\n        Model.Database.TOMDatabase.Model.Tables[tableName].RequestRefresh(refType);   \\n        sb_Info.Append(\\\"'\\\"+tableName+\\\"',\\\");\\n    }\\n\\n    sb_Info.Remove(sb_Info.Length-1,1);\\n    sb_Info.Append(\\\"]\\\");\\n}\\nelse if (processingMethod == \\\"Partition\\\")\\n{\\n    sb_Info.Append(\\\"for the following partitions: [\\\");    \\n    foreach (var t in Model.Tables.Where(a => a.HasAnnotation(\\\"Vertipaq_TableID\\\") || a.Partitions.Any(b => b.HasAnnotation(\\\"Vertipaq_PartitionID\\\"))))\\n    {\\n        string tableName = t.Name;\\n        \\n        if (t.HasAnnotation(\\\"Vertipaq_TableID\\\"))\\n        {\\n            foreach (var p in t.Partitions.ToList())\\n            {\\n                string pName = p.Name;\\n                Model.Database.TOMDatabase.Model.Tables[tableName].Partitions[pName].RequestRefresh(refType);\\n                sb_Info.Append(\\\"'\\\"+tableName+\\\"'[\\\"+pName+\\\"],\\\");\\n            }\\n        }\\n        else\\n        {\\n            foreach (var p in t.Partitions.Where(a => a.HasAnnotation(\\\"Vertipaq_PartitionID\\\")))\\n            {\\n                string pName = p.Name;\\n                Model.Database.TOMDatabase.Model.Tables[tableName].Partitions[pName].RequestRefresh(refType);\\n                sb_Info.Append(\\\"'\\\"+tableName+\\\"'[\\\"+pName+\\\"],\\\");             \\n            }\\n        }\\n    }\\n\\n    sb_Info.Remove(sb_Info.Length-1,1);\\n    sb_Info.Append(\\\"]\\\");\\n}\\n\\nsb_Info.Append(\\\" has finished in \\\");\\n\\n// Remove Annotations\\nforeach (var o in Model.Tables.ToList())\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_TableID\\\");\\n}\\n\\nforeach (var o in Model.AllPartitions)\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_PartitionID\\\");\\n}\\n\\nif (runTMSL)\\n{\\n    sw.Start();\\n    // Add sequence if it is enabled\\n    if (seqEnabled)\\n    {        \\n        so.MaxParallelism = maxP;        \\n    }\\n    Model.Database.TOMDatabase.Model.SaveChanges(so); \\n    sw.Stop();\\n\\n    TimeSpan ts = sw.Elapsed;\\n  \\n    int sec = ts.Seconds;\\n    int min = ts.Minutes;\\n    int hr = ts.Hours;\\n\\n    // Break down hours,minutes,seconds\\n    if (hr == 0)\\n    {\\n        if (min == 0)\\n        {\\n            timeSpent = sec + \\\" seconds.\\\";\\n        }\\n        else\\n        {\\n            timeSpent = min + \\\" minutes and \\\" + sec + \\\" seconds.\\\";\\n        }\\n    }\\n    else\\n    {\\n        timeSpent = hr + \\\" hours, \\\" + min + \\\" minutes and \\\" + sec + \\\" seconds.\\\";\\n    }\\n\\n    if (hr == 1)\\n    {\\n        timeSpent = timeSpent.Replace(\\\"hours\\\",\\\"hour\\\");\\n    }\\n    if (min == 1)\\n    {\\n        timeSpent = timeSpent.Replace(\\\"minutes\\\",\\\"minute\\\");\\n    }\\n    if (sec == 1)\\n    {\\n        timeSpent = timeSpent.Replace(\\\"seconds\\\",\\\"second\\\");\\n    }\\n\\n    Info(sb_Info.ToString() + timeSpent);\\n    return;\\n}\\nelse\\n{\\n    if (processingMethod == \\\"Database\\\")\\n    {\\n        var x = Model.Database.TOMDatabase;\\n        TOM.JsonScripter.ScriptRefresh(x,refType).Output();\\n    }\\n    else if (processingMethod == \\\"Table\\\")\\n    {\\n        var x = Model.Database.TOMDatabase.Model.Tables.Where(a => a.Annotations.Where(b => b.Name == \\\"Vertipaq_TableID\\\").Count() == 1).ToArray();\\n        TOM.JsonScripter.ScriptRefresh(x,refType).Output();\\n    }\\n    else if (processingMethod == \\\"Partition\\\")\\n    {\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\RelatedTablesInCommon",
      "Enabled": "true",
      "Execute": "List<string> TableList = new List<string>(); \\n\\nint i=0;\\nforeach (var t in Selected.Tables.ToList())\\n{\\n    if (i==0)\\n    {\\n        foreach (var x in t.RelatedTables)\\n        {\\n            TableList.Add(x.Name);\\n        }\\n    }\\n    else\\n    {\\n        foreach (var x in t.RelatedTables)\\n        {\\n            if (!TableList.Any(a => a == x.Name))\\n            {\\n                TableList.Remove(x.Name);\\n            }\\n        }\\n    }\\n    i++;\\n}\\n\\nTableList.OrderBy(a => a).Output();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\RemoveUnnecessaryColumns_MemorySavings",
      "Enabled": "true",
      "Execute": "var sb = new System.Text.StringBuilder(); \\nstring newline = Environment.NewLine;\\nstring ann = \\\"Vertipaq_ColumnSize\\\";\\nlong tot = 0;\\n\\n// Header\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"ColumnName\\\" + '\\t' + \\\"ColumnSize\\\" + newline );\\n\\nforeach (var c in Model.AllColumns.Where(a => (a.IsHidden || a.Table.IsHidden) && a.ReferencedBy.Count() == 0 && ! a.UsedInRelationships.Any() && ! a.UsedInSortBy.Any() && ! a.UsedInHierarchies.Any() \\n    && (! a.Table.RowLevelSecurity.Any(b => b != null && b.IndexOf(\\\"[\\\" + a.Name + \\\"]\\\", StringComparison.OrdinalIgnoreCase) >= 0 ))\\n    && (! Model.Roles.Any(c => c.RowLevelSecurity.Any(d => d != null && (d.IndexOf(a.Table.Name + \\\"[\\\" + a.Name + \\\"]\\\", StringComparison.OrdinalIgnoreCase) >=0 || d.IndexOf(\\\"'\\\" + a.Table.Name + \\\"'[\\\" + a.Name + \\\"]\\\", StringComparison.OrdinalIgnoreCase) >=0))))).OrderBy(a => a.Table.Name).ThenBy(a => a.Name))\\n    \\n{\\n    string tableName = c.Table.Name;\\n    string colName = c.Name;\\n    string annValue = c.GetAnnotation(ann);\\n    sb.Append(tableName + '\\t' + colName + '\\t' + annValue + newline);\\n    tot = tot + Convert.ToInt64(annValue);\\n}\\n\\ntot.Output(); // Value shown in bytes\\nsb.ToString().Output();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\ReportLevelMeasures",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"System.IO.Compression.FileSystem\\\"\\n\\nusing System.IO;\\nusing System.IO.Compression;\\n\\nbool createMeasures = false; // Set this to true if you want the measures to be created within the model. If set to false it will generate a script which can be executed to create the measures.\\nstring pbiFile = @\\\"C:\\Desktop\\ReportFile.pbix\\\"; // Update this to a .pbix or .pbit file.\\nstring fileExt = Path.GetExtension(pbiFile);\\nstring fileName = Path.GetFileNameWithoutExtension(pbiFile);\\nstring folderName = Path.GetDirectoryName(pbiFile) + @\\\"\\\\\";\\nstring zipPath = folderName + fileName + \\\".zip\\\";\\nstring unzipPath = folderName + fileName;\\n\\nif (! (fileExt == \\\".pbix\\\" || fileExt == \\\".pbit\\\"))\\n{\\n   Error(\\\"Must enter a valid .pbix or .pbit file\\\");\\n   return;\\n}\\n\\ntry\\n{\\n   // Make a copy of a pbi and turn it into a zip file\\n   File.Copy(pbiFile, zipPath);\\n   // Unzip file\\n   System.IO.Compression.ZipFile.ExtractToDirectory(zipPath, unzipPath);\\n   // Delete zip file\\n   File.Delete(zipPath);\\n}\\ncatch\\n{\\n   Error(\\\"File does not exist. Must use a valid .pbix or .pbit file\\\");\\n   return;\\n}\\n\\nstring layoutPath = unzipPath + @\\\"\\Report\\Layout\\\";\\nstring jsonFilePath = Path.ChangeExtension(layoutPath, \\\".json\\\");\\nFile.Move(layoutPath, jsonFilePath); \\n\\nstring unformattedJson = File.ReadAllText(jsonFilePath,System.Text.UnicodeEncoding.Unicode);\\nstring formattedJson = Newtonsoft.Json.Linq.JToken.Parse(unformattedJson).ToString();\\ndynamic json = Newtonsoft.Json.Linq.JObject.Parse(formattedJson);\\n\\n// Delete previously created folder\\ntry\\n{\\n    Directory.Delete(folderName + fileName,true);\\n}\\ncatch\\n{\\n}\\n\\nvar sb = new System.Text.StringBuilder();\\nvar sb_Script = new System.Text.StringBuilder();\\nstring newline = Environment.NewLine;\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"MeasureName\\\" + '\\t' + \\\"Expression\\\" + '\\t' + \\\"HiddenFlag\\\" + '\\t' + \\\"FormatString\\\" + '\\t' + \\\"MeasureCreatedFlag\\\" + newline);\\n\\nstring config = (string)json[\\\"config\\\"];\\nstring formattedconfigJson = Newtonsoft.Json.Linq.JToken.Parse(config).ToString();\\ndynamic configJson = Newtonsoft.Json.Linq.JObject.Parse(formattedconfigJson);\\n\\nint i=0;\\n\\ntry{\\n    foreach (var o in configJson[\\\"modelExtensions\\\"].Children())\\n    {    \\n        foreach (var o2 in o[\\\"entities\\\"].Children())\\n        {\\n            string tableName = (string)o2[\\\"name\\\"];\\n            \\n            foreach (var o3 in o2[\\\"measures\\\"].Children())\\n            {\\n                string measureName = (string)o3[\\\"name\\\"];\\n                string expr = (string)o3[\\\"expression\\\"];\\n                bool hid = (bool)o3[\\\"hidden\\\"];\\n                string fs = (string)o3[\\\"formatInformation\\\"][\\\"formatString\\\"];\\n                \\n                sb.Append(tableName + '\\t' + measureName + '\\t' + expr + '\\t' + hid + '\\t' + fs + '\\t');\\n                \\n                if (createMeasures)\\n                {\\n                    try\\n                    {\\n                        if (Model.AllMeasures.Any(a => a.Name == measureName))\\n                        {\\n                            Warning(\\\"Unable to create the '\\\"+measureName+\\\"' measure as this measure already exists in the model.\\\");\\n                            sb.Append(\\\"No\\\" + newline);\\n                        }\\n                        else\\n                        {\\n                            var m = Model.Tables[tableName].AddMeasure(measureName);\\n                            m.Expression = expr;\\n                            m.IsHidden = hid;\\n                            m.FormatString = fs;\\n                            \\n                            sb.Append(\\\"Yes\\\" + newline);\\n                        }\\n                    }\\n                    catch\\n                    {\\n                        Warning(\\\"Unable to create the '\\\"+measureName+\\\"' measure as the '\\\"+tableName+\\\"' table does not exist.\\\");\\n                        sb.Append(\\\"No\\\" + newline);\\n                    }                \\n                }\\n                else\\n                {\\n                    expr = expr.Replace(\\\"\\\\\"\\\",@\\\"\\\\\"\\\"\\\").Replace(\\\"\\r\\\",\\\"\\\\r\\\").Replace(\\\"\\n\\\",\\\"\\\\n\\\").Replace(\\\"\\t\\\",\\\"\\\\t\\\");\\n                    \\n                    sb_Script.Append(\\\"var m\\\"+i+\\\" = Model.Tables[\\\\\"\\\" + tableName + \\\"\\\\\"].AddMeasure(\\\\\"\\\" + measureName + \\\"\\\\\");\\\" + newline);\\n                    sb_Script.Append(\\\"m\\\"+i+\\\".Expression = \\\\\"\\\" + expr + \\\"\\\\\";\\\" + newline);\\n                    sb_Script.Append(\\\"m\\\"+i+\\\".IsHidden = \\\" + hid.ToString().ToLower() + \\\";\\\" + newline);\\n                    sb_Script.Append(\\\"m\\\"+i+\\\".FormatString = @\\\\\"\\\" + fs + \\\"\\\\\";\\\" + newline + newline);\\n\\n                    sb.Append(\\\"No\\\" + newline);\\n                }\\n                i++;\\n            }        \\n        }    \\n    }\\n}\\ncatch\\n{\\n    Error(\\\"There are no report level measures in this report. All the measures in this report are in the model itself.\\\");\\n}\\n\\nsb.Output(); // Outputs a list of the report-level measures\\n\\nif (!createMeasures)\\n{\\n    sb_Script.Output(); // Outputs a C# script which can be executed in the Advanced Scripting window to create the measures\\n}\\n\\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\SaveAllModelsOnServer",
      "Enabled": "true",
      "Execute": "#r \\\"Microsoft.AnalysisServices.Core.dll\\\"\\nusing ToM = Microsoft.AnalysisServices.Tabular;\\n\\nstring folderPath = @\\\"C:\\Desktop\\MyFolder\\\"; // Folder where the files are saved\\nstring saveType = \\\"B\\\"; // Use 'B' for saving to .bim files, use 'F' for saving to folder structure\\n\\n// If saving datasets from Power BI Premium, enter your Service Principal credentials in the 3 parameters below:\\nstring appID = \\\"\\\";\\nstring tenantID = \\\"\\\";\\nstring appSecret = \\\"\\\";\\n\\nstring serverName = Model.Database.TOMDatabase.Server.ToString();\\nstring cmdText = @\\\"start /wait /d \\\"\\\"C:\\Program Files (x86)\\Tabular Editor\\\"\\\" TabularEditor.exe \\\" + @\\\"\\\"\\\"\\\";\\nbool pbiPrem = false;\\n\\nif (Model.DefaultPowerBIDataSourceVersion == PowerBIDataSourceVersion.PowerBI_V3)\\n{\\n    pbiPrem = true;\\n}\\n// Update cmdText for Power BI Premium datasets (v3)\\nif (pbiPrem)\\n{\\n    cmdText = cmdText + @\\\"Provider=MSOLAP;Data Source=powerbi://api.powerbi.com/v1.0/myorg/\\\" + serverName + \\\";User ID=app:\\\" + appID + \\\"@\\\" + tenantID + \\\";Password=\\\" + appSecret + @\\\"\\\"\\\"\\\";\\n}\\nelse\\n{\\n    cmdText = cmdText + serverName + @\\\"\\\"\\\"\\\";   \\n}\\n\\nforeach (var x in Model.Database.TOMDatabase.Server.Databases)\\n{\\n    string dbName = x.ToString();\\n    string fullCmdText = cmdText + @\\\" \\\"\\\"\\\" + dbName + @\\\"\\\"\\\" -\\\" + saveType + \\\" \\\" + @\\\"\\\"\\\"\\\" + folderPath + @\\\"\\\\\" + dbName;\\n    \\n    if (saveType == \\\"B\\\")\\n    {\\n        fullCmdText = fullCmdText + @\\\".bim\\\"\\\"\\\";\\n    }\\n\\n    if (pbiPrem && appID.Length == 0)\\n    {\\n        Error(\\\"Must enter the Application ID in the appID parameter.\\\");\\n        return;\\n    }\\n    else if (pbiPrem && tenantID.Length == 0)\\n    {\\n        Error(\\\"Must enter the Tenant ID in the tenantID parameter.\\\");\\n        return;\\n    }\\n    else if (pbiPrem && appSecret.Length == 0)\\n    {\\n        Error(\\\"Must enter the Application Secret in the appSecret parameter.\\\");\\n        return;\\n    }\\n    else if (saveType != \\\"B\\\" && saveType != \\\"F\\\")\\n    {\\n        Error(\\\"The saveType paramter must be a value of 'B' or 'F' only.\\\");\\n        return;\\n    }\\n    else\\n    {\\n        System.Diagnostics.Process process = new System.Diagnostics.Process();\\n        System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo(\\\"cmd\\\");\\n        startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\\n        startInfo.FileName = \\\"cmd.exe\\\";\\n        startInfo.Arguments = fullCmdText;\\n        process.StartInfo = startInfo;    \\n        process.StartInfo.CreateNoWindow = true;\\n        process.StartInfo.RedirectStandardInput = true;\\n        process.StartInfo.UseShellExecute = false;\\n        process.Start();\\n        process.StandardInput.WriteLine(fullCmdText);\\n        process.StandardInput.Flush();\\n        process.StandardInput.Close();\\n        process.WaitForExit();\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\SetIsAvailableInMDXProperty_MemorySavings",
      "Enabled": "true",
      "Execute": "var sb = new System.Text.StringBuilder(); \\nstring newline = Environment.NewLine;\\nstring ann = \\\"Vertipaq_ColumnHierarchySize\\\";\\nlong tot = 0;\\n\\n// Header\\nsb.Append(\\\"TableName\\\" + '\\t' + \\\"ColumnName\\\" + '\\t' + \\\"HierarchySize\\\" + newline);\\n\\nforeach (var c in Model.AllColumns.Where(a => a.IsAvailableInMDX && (a.IsHidden || a.Table.IsHidden) && ! a.UsedInSortBy.Any() && ! a.UsedInHierarchies.Any() ).OrderBy(a => a.Table.Name).ThenBy(a => a.Name))\\n{\\n    string tableName = c.Table.Name;\\n    string colName = c.Name;\\n    string annValue = c.GetAnnotation(ann);\\n    sb.Append(tableName + '\\t' + colName + '\\t' + annValue + newline);\\n    tot = tot + Convert.ToInt64(annValue);\\n}\\n\\ntot.Output(); // Value shown in bytes\\nsb.ToString().Output();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\VertipaqAnnotations",
      "Enabled": "true",
      "Execute": "// Store DMV Queries as Data Tables\\nvar DMV_Tables = ExecuteDax(\\\"SELECT [ID],[Name] FROM $SYSTEM.TMSCHEMA_TABLES\\\").Tables[0];\\nvar DMV_Dimensions = ExecuteDax(\\\"SELECT [DIMENSION_NAME], [DIMENSION_CARDINALITY] FROM $SYSTEM.MDSCHEMA_DIMENSIONS\\\").Tables[0];\\nvar DMV_Relationships = ExecuteDax(\\\"SELECT [ID],[Name] FROM $SYSTEM.TMSCHEMA_RELATIONSHIPS\\\").Tables[0];\\nvar DMV_Hierarchies = ExecuteDax(\\\"SELECT [ID], [TableID], [Name] FROM $SYSTEM.TMSCHEMA_HIERARCHIES\\\").Tables[0];\\nvar DMV_Columns = ExecuteDax(\\\"SELECT [ID],[TableID],[ExplicitName] FROM $SYSTEM.TMSCHEMA_COLUMNS\\\").Tables[0];\\nvar DMV_Partitions = ExecuteDax(\\\"SELECT [ID],[TableID],[Name] FROM $SYSTEM.TMSCHEMA_PARTITIONS\\\").Tables[0];\\nvar DMV_PartitionStorages = ExecuteDax(\\\"SELECT [ID],[PartitionID] FROM $SYSTEM.TMSCHEMA_PARTITION_STORAGES\\\").Tables[0];\\nvar DMV_SegmentMapStorages = ExecuteDax(\\\"SELECT [PartitionStorageID],[RecordCount],[SegmentCount],[RecordsPerSegment] FROM $SYSTEM.TMSCHEMA_SEGMENT_MAP_STORAGES\\\").Tables[0];\\nvar DMV_StorageTableColumns = ExecuteDax(\\\"SELECT [DIMENSION_NAME],[ATTRIBUTE_NAME],[COLUMN_TYPE],[DICTIONARY_SIZE] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMNS\\\").Tables[0];\\nvar DMV_StorageTables = ExecuteDax(\\\"SELECT [DIMENSION_NAME],[TABLE_ID],[ROWS_COUNT] FROM $SYSTEM.DISCOVER_STORAGE_TABLES\\\").Tables[0];\\nvar DMV_ColumnSegments = ExecuteDax(\\\"SELECT [DIMENSION_NAME],[TABLE_ID],[COLUMN_ID],[USED_SIZE] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS\\\").Tables[0];\\n\\n// Remove Existing Vertipaq Annotations\\nModel.RemoveAnnotation(\\\"Vertipaq_ModelSize\\\");\\n\\nforeach (var o in Model.AllHierarchies)\\n{   \\n    o.RemoveAnnotation(\\\"Vertipaq_HierarchyID\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_UserHierarchySize\\\");\\n}\\n\\nforeach (var o in Model.AllColumns)\\n{   \\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnID\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnHierarchySize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_DataSize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_DictionarySize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_Cardinality\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnSize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnSizePctOfTable\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnSizePctOfModel\\\");\\n}\\n\\nforeach (var o in Model.Relationships.ToList())\\n{    \\n    o.RemoveAnnotation(\\\"Vertipaq_RelationshipID\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_RelationshipSize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_MaxFromCardinality\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_MaxToCardinality\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_RIViolationInvalidRows\\\");\\n}\\n\\nforeach (var o in Model.Tables.ToList())\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_TableID\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_RowCount\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_TableSize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_TableSizePctOfModel\\\");\\n}\\n\\nforeach (var o in Model.AllPartitions)\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_PartitionID\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_PartitionStorageID\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_RecordCount\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_RecordsPerSegment\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_SegmentCount\\\");\\n}\\n\\n// Set Table IDs\\nfor (int r = 0; r < DMV_Tables.Rows.Count; r++)\\n{\\n    string tblID = DMV_Tables.Rows[r][0].ToString();\\n    string tblName = DMV_Tables.Rows[r][1].ToString();\\n    \\n    Model.Tables[tblName].SetAnnotation(\\\"Vertipaq_TableID\\\",tblID);         \\n}\\n\\n// Set Table Row Counts\\nfor (int r = 0; r < DMV_Dimensions.Rows.Count; r++)\\n{\\n    string tblName = DMV_Dimensions.Rows[r][0].ToString();\\n    string recordCount = DMV_Dimensions.Rows[r][1].ToString();\\n    \\n    if (tblName != \\\"Measures\\\")\\n    {\\n        Model.Tables[tblName].SetAnnotation(\\\"Vertipaq_RowCount\\\",recordCount);\\n    }\\n}\\n\\n// Set Relationship IDs\\nfor (int r = 0; r < DMV_Relationships.Rows.Count; r++)\\n{\\n    string ID = DMV_Relationships.Rows[r][0].ToString();   \\n    string relID = DMV_Relationships.Rows[r][1].ToString();    \\n    \\n    Model.Relationships[relID].SetAnnotation(\\\"Vertipaq_RelationshipID\\\",ID);    \\n}\\n\\n// Set Hierarchy IDs\\nfor (int r = 0; r < DMV_Hierarchies.Rows.Count; r++)\\n{\\n    string hID = DMV_Hierarchies.Rows[r][0].ToString();\\n    string tableID = DMV_Hierarchies.Rows[r][1].ToString();\\n    string hName = DMV_Hierarchies.Rows[r][2].ToString();\\n    \\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\\\"Vertipaq_TableID\\\") == tableID))\\n    {\\n        string tableName = t.Name;\\n        Model.Tables[tableName].Hierarchies[hName].SetAnnotation(\\\"Vertipaq_HierarchyID\\\",hID);\\n    }        \\n}\\n\\n// Set Column IDs\\nfor (int r = 0; r < DMV_Columns.Rows.Count; r++)\\n{\\n    string colID = DMV_Columns.Rows[r][0].ToString();\\n    string tableID = DMV_Columns.Rows[r][1].ToString();\\n    string colName = DMV_Columns.Rows[r][2].ToString();\\n    \\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\\\"Vertipaq_TableID\\\") == tableID))\\n    {\\n        string tableName = t.Name;\\n        \\n        if (colName.StartsWith(\\\"RowNumber-\\\") == false && colName != \\\"\\\")\\n        {\\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\\\"Vertipaq_ColumnID\\\",colID);\\n        }\\n    }\\n}\\n\\n// Set Partition IDs\\nfor (int r = 0; r < DMV_Partitions.Rows.Count; r++)\\n{\\n    string pID = DMV_Partitions.Rows[r][0].ToString();\\n    string tableID = DMV_Partitions.Rows[r][1].ToString();\\n    string pName = DMV_Partitions.Rows[r][2].ToString();\\n    \\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\\\"Vertipaq_TableID\\\") == tableID))\\n    {\\n        string tableName = t.Name;\\n        \\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\\\"Vertipaq_PartitionID\\\",pID);        \\n    }\\n}\\n\\n\\n// Set Partition Storage IDs\\nfor (int r = 0; r < DMV_PartitionStorages.Rows.Count; r++)\\n{\\n    string psID = DMV_PartitionStorages.Rows[r][0].ToString();\\n    string pID = DMV_PartitionStorages.Rows[r][1].ToString();    \\n    \\n    foreach (var p in Model.AllPartitions.Where(a => a.GetAnnotation(\\\"Vertipaq_PartitionID\\\") == pID))\\n    {\\n        string tableName = p.Table.Name;\\n        string pName = p.Name;\\n        \\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\\\"Vertipaq_PartitionStorageID\\\",psID);        \\n    }\\n}\\n\\n// Set Partition Stats\\nfor (int r = 0; r < DMV_SegmentMapStorages.Rows.Count; r++)\\n{\\n    string psID = DMV_SegmentMapStorages.Rows[r][0].ToString();\\n    string recordCount = DMV_SegmentMapStorages.Rows[r][1].ToString();    \\n    string segmentCount = DMV_SegmentMapStorages.Rows[r][2].ToString();    \\n    string recordsPerSegment = DMV_SegmentMapStorages.Rows[r][3].ToString();    \\n    \\n    foreach (var p in Model.AllPartitions.Where(a => a.GetAnnotation(\\\"Vertipaq_PartitionStorageID\\\") == psID))\\n    {\\n        string tableName = p.Table.Name;\\n        string pName = p.Name;\\n        \\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\\\"Vertipaq_RecordCount\\\",recordCount);\\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\\\"Vertipaq_SegmentCount\\\",segmentCount);\\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\\\"Vertipaq_RecordsPerSegment\\\",recordsPerSegment);\\n    }\\n}\\n\\n// Set Dictionary Size\\nfor (int r = 0; r < DMV_StorageTableColumns.Rows.Count; r++)\\n{\\n    string tableName = DMV_StorageTableColumns.Rows[r][0].ToString();    \\n    string colName = DMV_StorageTableColumns.Rows[r][1].ToString();\\n    string colType = DMV_StorageTableColumns.Rows[r][2].ToString();\\n    string dictSize = DMV_StorageTableColumns.Rows[r][3].ToString();\\n      \\n    if (colType == \\\"BASIC_DATA\\\" && colName.StartsWith(\\\"RowNumber-\\\") == false)\\n    {\\n        Model.Tables[tableName].Columns[colName].SetAnnotation(\\\"Vertipaq_DictionarySize\\\",dictSize);\\n    }\\n}\\n\\n// Set Column Row Counts\\nfor (int r = 0; r < DMV_StorageTables.Rows.Count; r++)\\n{\\n    string tableName = DMV_StorageTables.Rows[r][0].ToString();    \\n    string usedColumn = DMV_StorageTables.Rows[r][1].ToString();    \\n    string rowCount = DMV_StorageTables.Rows[r][2].ToString();    \\n    int lastInd = usedColumn.LastIndexOf(\\\"(\\\");\\n    string usedColumnID = usedColumn.Substring(lastInd+1,usedColumn.Length - lastInd - 2);\\n    \\n    \\n    foreach (var c in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\\\"Vertipaq_ColumnID\\\") == usedColumnID))\\n    {\\n        var colName = c.Name;\\n        Model.Tables[tableName].Columns[colName].SetAnnotation(\\\"Vertipaq_Cardinality\\\",rowCount);\\n    }    \\n}\\n\\n// User Hierarchy Size\\nfor (int r = 0; r < DMV_ColumnSegments.Rows.Count; r++)\\n{\\n    string tableName = DMV_ColumnSegments.Rows[r][0].ToString();    \\n    string usedObj = DMV_ColumnSegments.Rows[r][1].ToString();    \\n    string usedCol = DMV_ColumnSegments.Rows[r][2].ToString();    \\n    string usedSize = DMV_ColumnSegments.Rows[r][3].ToString();    \\n    \\n    int lastInd = usedObj.LastIndexOf(\\\"(\\\");\\n    string usedObjID = usedObj.Substring(lastInd+1,usedObj.Length - lastInd - 2);    \\n    \\n    int lastInd2 = usedCol.LastIndexOf(\\\"(\\\");\\n    string usedObjID2 = usedCol.Substring(lastInd2+1,usedCol.Length - lastInd2 - 2);    \\n    \\n    // User Hierarchy Size\\n    foreach (var o in Model.Tables[tableName].Hierarchies.Where(a => a.GetAnnotation(\\\"Vertipaq_HierarchyID\\\") == usedObjID))\\n    {\\n        string hName = o.Name;\\n        int hSize = Convert.ToInt32(Model.Tables[tableName].Hierarchies[hName].GetAnnotation(\\\"Vertipaq_UserHierarchySize\\\"));\\n        \\n        if (usedObj.StartsWith(\\\"U$\\\"))\\n        {\\n            if (hSize != null)\\n            {\\n                hSize = hSize + Convert.ToInt32(usedSize);\\n            }\\n            else\\n            {\\n                hSize = Convert.ToInt32(usedSize);\\n            }\\n        \\n            Model.Tables[tableName].Hierarchies[hName].SetAnnotation(\\\"Vertipaq_UserHierarchySize\\\",hSize.ToString());                \\n        }   \\n    }    \\n    \\n    // Relationship Size\\n    foreach (var o in Model.Relationships.Where(a => a.GetAnnotation(\\\"Vertipaq_RelationshipID\\\") == usedObjID))\\n    {\\n        string rName = o.ID;\\n        int rSize = Convert.ToInt32(Model.Relationships[rName].GetAnnotation(\\\"Vertipaq_RelationshipSize\\\"));\\n        \\n        if (usedObj.StartsWith(\\\"R$\\\"))\\n        {\\n            if (rSize != null)\\n            {\\n                rSize = rSize + Convert.ToInt32(usedSize);\\n            }\\n            else\\n            {\\n                rSize = Convert.ToInt32(usedSize);\\n            }\\n        \\n            Model.Relationships[rName].SetAnnotation(\\\"Vertipaq_RelationshipSize\\\",rSize.ToString());                \\n        }\\n    }\\n    \\n    // Column Hierarchy Size\\n    foreach (var o in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\\\"Vertipaq_ColumnID\\\") == usedObjID))\\n    {\\n        string colName = o.Name;\\n        long colSize = Convert.ToInt64(Model.Tables[tableName].Columns[colName].GetAnnotation(\\\"Vertipaq_ColumnHierarchySize\\\"));\\n        \\n        if (usedObj.StartsWith(\\\"H$\\\"))\\n        {\\n            if (colSize != null)\\n            {\\n                colSize = colSize + Convert.ToInt32(usedSize);\\n            }\\n            else\\n            {\\n                colSize = Convert.ToInt64(usedSize);\\n            }\\n        \\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\\\"Vertipaq_ColumnHierarchySize\\\",colSize.ToString());                \\n        }   \\n    }  \\n    \\n    // Column Data Size\\n    foreach (var o in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\\\"Vertipaq_ColumnID\\\") == usedObjID2))\\n    {\\n        string colName = o.Name;\\n        long colSize = Convert.ToInt64(Model.Tables[tableName].Columns[colName].GetAnnotation(\\\"Vertipaq_DataSize\\\"));\\n        \\n        if (usedObj.StartsWith(\\\"H$\\\") == false && usedObj.StartsWith(\\\"R$\\\") == false && usedObj.StartsWith(\\\"U$\\\") == false)\\n        {\\n            if (colSize != null)\\n            {\\n                colSize = colSize + Convert.ToInt64(usedSize);\\n            }\\n            else\\n            {\\n                colSize = Convert.ToInt64(usedSize);\\n            }\\n        \\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\\\"Vertipaq_DataSize\\\",colSize.ToString());                \\n        }\\n    }   \\n}\\n\\n// Set Column & Table Size\\nlong tableSizeCumulative = 0;\\n\\nforeach (var t in Model.Tables.ToList())\\n{\\n    string tableName = t.Name;\\n    long colSizeCumulative = 0;\\n    long userHierSizeCumulative = 0;\\n    long relSizeCumulative = 0;       \\n    \\n    foreach (var c in t.Columns.ToList())\\n    {        \\n        string colName = c.Name;\\n        var obj = Model.Tables[tableName].Columns[colName];\\n        \\n        long colHierSize = Convert.ToInt64(obj.GetAnnotation(\\\"Vertipaq_ColumnHierarchySize\\\"));\\n        long dataSize = Convert.ToInt64(obj.GetAnnotation(\\\"Vertipaq_DataSize\\\"));\\n        long dictSize = Convert.ToInt64(obj.GetAnnotation(\\\"Vertipaq_DictionarySize\\\"));\\n        \\n        long colSize = colHierSize + dataSize + dictSize;\\n        colSizeCumulative = colSizeCumulative + colSize;        \\n        \\n        // Set Column Size\\n        obj.SetAnnotation(\\\"Vertipaq_ColumnSize\\\",colSize.ToString());\\n    }\\n    \\n    foreach (var h in t.Hierarchies.ToList())\\n    {\\n        string hName = h.Name;\\n        var obj = Model.Tables[tableName].Hierarchies[hName];\\n        \\n        long userHierSize = Convert.ToInt32(obj.GetAnnotation(\\\"Vertipaq_UserHierarchySize\\\"));      \\n        userHierSizeCumulative = userHierSizeCumulative + userHierSize;           \\n    }\\n    \\n    foreach (var r in Model.Relationships.Where(a => a.FromTable.Name == tableName).ToList())\\n    {\\n        string rName = r.ID;\\n        var obj = Model.Relationships[rName];\\n        \\n        long relSize = Convert.ToInt32(obj.GetAnnotation(\\\"Vertipaq_RelationshipSize\\\"));\\n        \\n        relSizeCumulative = relSizeCumulative + relSize;                \\n    }\\n    \\n    long tableSize = colSizeCumulative + userHierSizeCumulative + relSizeCumulative;\\n    tableSizeCumulative = tableSizeCumulative + tableSize;\\n    \\n    // Set Table Size\\n    Model.Tables[tableName].SetAnnotation(\\\"Vertipaq_TableSize\\\",tableSize.ToString());\\n}\\n\\n// Set Model Size\\nModel.SetAnnotation(\\\"Vertipaq_ModelSize\\\",tableSizeCumulative.ToString());\\n\\n// Set Max From/To Cardinality, Referential Integrity Violations\\nforeach (var r in Model.Relationships.ToList())\\n{\\n    string rName = r.ID;\\n    string fromTbl = r.FromTable.Name;\\n    string fromCol = r.FromColumn.Name;\\n    string toTbl = r.ToTable.Name;\\n    string toCol = r.ToColumn.Name;\\n    //var obj = Model.Relationships[rName];\\n    bool act = r.IsActive;\\n    string fromTableFull = r.FromTable.DaxObjectFullName;    \\n    string fromObject = r.FromColumn.DaxObjectFullName;\\n    string toObject = r.ToColumn.DaxObjectFullName;\\n    string dax;\\n    \\n    // Set Max From/To Cardinality\\n    string fromCard = Model.Tables[fromTbl].Columns[fromCol].GetAnnotation(\\\"Vertipaq_Cardinality\\\");\\n    string toCard = Model.Tables[toTbl].Columns[toCol].GetAnnotation(\\\"Vertipaq_Cardinality\\\");\\n    \\n    r.SetAnnotation(\\\"Vertipaq_MaxFromCardinality\\\",fromCard);\\n    r.SetAnnotation(\\\"Vertipaq_MaxToCardinality\\\",toCard);   \\n\\n    // Set Referential Integrity Violations\\n    if (act)\\n    {\\n        dax = \\\"SUMMARIZECOLUMNS(\\\\\"test\\\\\",CALCULATE(COUNTROWS(\\\"+fromTableFull+\\\"),ISBLANK(\\\"+toObject+\\\")))\\\";\\n    }\\n    else\\n    {\\n        dax = \\\"SUMMARIZECOLUMNS(\\\\\"test\\\\\",CALCULATE(COUNTROWS(\\\"+fromTableFull+\\\"),USERELATIONSHIP(\\\"+fromObject+\\\",\\\"+toObject+\\\"),ISBLANK(\\\"+toObject+\\\")))\\\";\\n    }\\n    \\n    var daxResult = EvaluateDax(dax);\\n    string blankRowCount = daxResult.ToString();\\n    \\n    if (blankRowCount != \\\"Table\\\")\\n    {\\n        r.SetAnnotation(\\\"Vertipaq_RIViolationInvalidRows\\\",blankRowCount);        \\n    }\\n    else\\n    {\\n        r.SetAnnotation(\\\"Vertipaq_RIViolationInvalidRows\\\",\\\"0\\\");\\n    }\\n}\\n\\n// Percent of Table and Model\\nfloat modelSize = Convert.ToInt64(Model.GetAnnotation(\\\"Vertipaq_ModelSize\\\"));\\n\\nforeach (var t in Model.Tables.ToList())\\n{\\n    string tableName = t.Name;\\n    var obj = Model.Tables[tableName];\\n    \\n    float tableSize = Convert.ToInt64(obj.GetAnnotation(\\\"Vertipaq_TableSize\\\"));\\n    double tblpct = Math.Round(tableSize / modelSize,3);\\n        \\n    obj.SetAnnotation(\\\"Vertipaq_TableSizePctOfModel\\\",tblpct.ToString());\\n    \\n    foreach (var c in t.Columns.ToList())\\n    {\\n        string colName = c.Name;\\n        var col = Model.Tables[tableName].Columns[colName];\\n        \\n        float colSize = Convert.ToInt64(col.GetAnnotation(\\\"Vertipaq_ColumnSize\\\"));\\n        double colpctTbl = Math.Round(colSize / tableSize,3);\\n        double colpctModel = Math.Round(colSize / modelSize,3);\\n        \\n        col.SetAnnotation(\\\"Vertipaq_ColumnSizePctOfTable\\\",colpctTbl.ToString());\\n        col.SetAnnotation(\\\"Vertipaq_ColumnSizePctOfModel\\\",colpctModel.ToString());\\n    }\\n}\\n\\n// Remove Vertipaq ID Annotations\\nforeach (var o in Model.AllHierarchies)\\n{   \\n    o.RemoveAnnotation(\\\"Vertipaq_HierarchyID\\\");\\n}\\n\\nforeach (var o in Model.AllColumns)\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnID\\\");\\n}\\n\\nforeach (var o in Model.Relationships.ToList())\\n{    \\n    o.RemoveAnnotation(\\\"Vertipaq_RelationshipID\\\");     \\n}\\n\\nforeach (var o in Model.Tables.ToList())\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_TableID\\\");\\n}\\n\\nforeach (var o in Model.AllPartitions)\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_PartitionID\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_PartitionStorageID\\\");\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Tabular-master\\VpaxToTabularEditor",
      "Enabled": "true",
      "Execute": "#r \\\"System.IO\\\"\\n#r \\\"System.IO.Compression.FileSystem\\\"\\n\\nusing System.IO;\\nusing System.IO.Compression;\\n\\nstring vpaxFile = @\\\"C:\\Desktop\\ModelVertipaq.vpax\\\"; // Enter .vpax file path\\n\\nstring fileExt = Path.GetExtension(vpaxFile);\\n\\nif (fileExt != \\\".vpax\\\")\\n{\\n    Error(\\\"Must use a valid .vpax file\\\");\\n}\\n\\nstring fileName = Path.GetFileNameWithoutExtension(vpaxFile);\\nstring folderName = Path.GetDirectoryName(vpaxFile) + @\\\"\\\\\";\\nstring zipPath = folderName + fileName + \\\".zip\\\";\\nstring unzipPath = folderName + fileName;\\n\\ntry\\n{\\n    // Make a copy of a vpax and turn it into a zip file\\n    File.Copy(vpaxFile, zipPath);\\n    // Unzip file\\n    System.IO.Compression.ZipFile.ExtractToDirectory(zipPath, unzipPath);\\n    // Delete zip file\\n    File.Delete(zipPath);\\n}\\n\\ncatch\\n{\\n    Error(\\\"File does not exist. Must use a valid .vpax file\\\");\\n}\\n\\n// Remove Existing Vertipaq Annotations\\nModel.RemoveAnnotation(\\\"Vertipaq_ModelSize\\\");\\n\\nforeach (var o in Model.AllHierarchies)\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_UserHierarchySize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_TableSizePctOfModel\\\");\\n}\\n\\nforeach (var o in Model.AllColumns)\\n{\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnHierarchySize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_DataSize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_DictionarySize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_Cardinality\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnSize\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnSizePctOfTable\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_ColumnSizePctOfModel\\\");\\n}\\n\\nforeach (var o in Model.Relationships.ToList())\\n{        \\n    o.RemoveAnnotation(\\\"Vertipaq_RelationshipSize\\\"); \\n    o.RemoveAnnotation(\\\"Vertipaq_MaxFromCardinality\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_MaxToCardinality\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_RIViolationInvalidRows\\\");\\n}\\n\\nforeach (var o in Model.Tables.ToList())\\n{     \\n    o.RemoveAnnotation(\\\"Vertipaq_RowCount\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_TableSize\\\");\\n}\\n\\nforeach (var o in Model.AllPartitions)\\n{       \\n    o.RemoveAnnotation(\\\"Vertipaq_RecordCount\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_RecordsPerSegment\\\");\\n    o.RemoveAnnotation(\\\"Vertipaq_SegmentCount\\\");\\n}\\n\\n// Deseralize json file\\nstring jsonFilePath = folderName + fileName + @\\\"\\\\\" + \\\"DaxVpaView.json\\\";\\nvar unformattedJson = File.ReadAllText(jsonFilePath,System.Text.UnicodeEncoding.Unicode);\\nvar formattedJson = Newtonsoft.Json.Linq.JToken.Parse(unformattedJson).ToString();\\n\\ndynamic json = Newtonsoft.Json.Linq.JObject.Parse(formattedJson);\\n\\n// Delete previously created folder\\ntry\\n{\\n    Directory.Delete(folderName + fileName,true);\\n}\\ncatch\\n{\\n}\\n\\nint tableCount = (int)json[\\\"Tables\\\"].Count;\\nint columnCount = (int)json[\\\"Columns\\\"].Count;\\nint relationshipCount = (int)json[\\\"Relationships\\\"].Count;\\nint hierarchiesCount = (int)json[\\\"UserHierarchies\\\"].Count;\\nint columnSegmentCount = (int)json[\\\"ColumnsSegments\\\"].Count;\\n\\n// Add table annotations\\nfor (int i=0; i<tableCount; i++)\\n{\\n    string tableName = (string)json[\\\"Tables\\\"][i][\\\"TableName\\\"];\\n    string rowCount = (string)json[\\\"Tables\\\"][i][\\\"RowsCount\\\"];\\n    string tableSize = (string)json[\\\"Tables\\\"][i][\\\"TableSize\\\"];\\n    \\n    if (Model.Tables.Where(a => a.Name == tableName).Count() == 1)\\n    {\\n        var obj = Model.Tables[tableName];\\n        \\n        obj.SetAnnotation(\\\"Vertipaq_RowCount\\\",rowCount);\\n        obj.SetAnnotation(\\\"Vertipaq_TableSize\\\",tableSize);\\n    }\\n}\\n\\n// Add column annotations\\nfor (int i=0; i<columnCount; i++)\\n{\\n    string columnName = (string)json[\\\"Columns\\\"][i][\\\"ColumnName\\\"];\\n    string tableName = (string)json[\\\"Columns\\\"][i][\\\"TableName\\\"];\\n    string columnCardinality = (string)json[\\\"Columns\\\"][i][\\\"ColumnCardinality\\\"];\\n    string dictionarySize = (string)json[\\\"Columns\\\"][i][\\\"DictionarySize\\\"];\\n    string dataSize = (string)json[\\\"Columns\\\"][i][\\\"DataSize\\\"];\\n    string hierarchiesSize = (string)json[\\\"Columns\\\"][i][\\\"HierarchiesSize\\\"];\\n    string totalSize = (string)json[\\\"Columns\\\"][i][\\\"TotalSize\\\"];\\n    \\n    if (Model.Tables.Where(a => a.Name == tableName && a.Columns.Any(b => b.Name == columnName)).Count() == 1)\\n    \\n    {\\n        var obj = Model.Tables[tableName].Columns[columnName];\\n    \\n        obj.SetAnnotation(\\\"Vertipaq_Cardinality\\\",columnCardinality);\\n        obj.SetAnnotation(\\\"Vertipaq_ColumnHierarchySize\\\",hierarchiesSize);\\n        obj.SetAnnotation(\\\"Vertipaq_ColumnSize\\\",totalSize);\\n        obj.SetAnnotation(\\\"Vertipaq_DataSize\\\",dataSize);\\n        obj.SetAnnotation(\\\"Vertipaq_DictionarySize\\\",dictionarySize);\\n    }      \\n}\\n\\n// Add relationship annotations\\nfor (int i=0; i<relationshipCount; i++)\\n{\\n    string relationshipName = (string)json[\\\"Relationships\\\"][i][\\\"RelationshipName\\\"];\\n    string fromCardinality = (string)json[\\\"Relationships\\\"][i][\\\"FromCardinality\\\"];\\n    string toCardinality = (string)json[\\\"Relationships\\\"][i][\\\"ToCardinality\\\"];\\n    string usedSize = (string)json[\\\"Relationships\\\"][i][\\\"UsedSize\\\"];\\n    string invalidRows = (string)json[\\\"Relationships\\\"][i][\\\"InvalidRows\\\"];\\n    \\n    if (Model.Relationships.Where(a => a.ID == relationshipName).Count() == 1)\\n    {\\n        var obj = Model.Relationships[relationshipName];\\n    \\n        obj.SetAnnotation(\\\"Vertipaq_MaxFromCardinality\\\",fromCardinality);\\n        obj.SetAnnotation(\\\"Vertipaq_MaxToCardinality\\\",toCardinality);\\n        obj.SetAnnotation(\\\"Vertipaq_RelationshipSize\\\",usedSize);\\n        obj.SetAnnotation(\\\"Vertipaq_RIViolationInvalidRows\\\",invalidRows);\\n    }\\n}\\n\\n// Add hierarchies annotations\\nfor (int i=0; i<hierarchiesCount; i++)\\n{\\n    string hierarchyName = (string)json[\\\"UserHierarchies\\\"][i][\\\"UserHierarchyName\\\"];\\n    string tableName = (string)json[\\\"UserHierarchies\\\"][i][\\\"TableName\\\"];\\n    string usedSize = (string)json[\\\"UserHierarchies\\\"][i][\\\"UsedSize\\\"];\\n    \\n    if (Model.AllHierarchies.Where(a => a.Name == hierarchyName && a.Table.Name == tableName).Count() == 1)\\n    {\\n        var obj = Model.Tables[tableName].Hierarchies[hierarchyName];\\n    \\n        obj.SetAnnotation(\\\"Vertipaq_UserHierarchySize\\\",usedSize);\\n    }\\n}\\n\\n// Add partition annotations\\nfor (int i=0; i<columnSegmentCount; i++)\\n{\\n    string tableName = (string)json[\\\"ColumnsSegments\\\"][i][\\\"TableName\\\"];\\n    string partitionName = (string)json[\\\"ColumnsSegments\\\"][i][\\\"PartitionName\\\"];\\n    string columnName = (string)json[\\\"ColumnsSegments\\\"][i][\\\"ColumnName\\\"];\\n    string segmentNumber = (string)json[\\\"ColumnsSegments\\\"][i][\\\"SegmentNumber\\\"];\\n    string tablePartitionNumber = (string)json[\\\"ColumnsSegments\\\"][i][\\\"TablePartitionNumber\\\"];\\n    string segmentRows = (string)json[\\\"ColumnsSegments\\\"][i][\\\"SegmentRows\\\"];\\n    int segmentNumberInt = Convert.ToInt32(segmentNumber);\\n    int tablePartitionNumberInt = Convert.ToInt32(tablePartitionNumber);\\n    long segmentRowsInt = Convert.ToInt64(segmentRows);\\n    \\n    var obj = Model.Tables[tableName].Partitions[partitionName];\\n    \\n    int s = 0;\\n    foreach (var t in Model.Tables.Where(a => a.Name == tableName).ToList())\\n    {\\n        foreach (var p in t.Partitions.Where(b => b.MetadataIndex < tablePartitionNumberInt))\\n        {\\n            s = s + Convert.ToInt32(p.GetAnnotation(\\\"Vertipaq_SegmentCount\\\"));\\n        }\\n    }\\n    \\n    obj.SetAnnotation(\\\"Vertipaq_SegmentCount\\\",(segmentNumberInt - s + 1).ToString());\\n    \\n    if (columnName.StartsWith(\\\"RowNumber-\\\"))\\n    {            \\n        long rc = Convert.ToInt64(obj.GetAnnotation(\\\"Vertipaq_RecordCount\\\"));\\n        obj.SetAnnotation(\\\"Vertipaq_RecordCount\\\",(segmentRowsInt + rc).ToString());\\n    }\\n}\\n\\n// Add Records per Segment\\nlong maxRPS = 8388608;\\nforeach (var t in Model.Tables.ToList())\\n{\\n    foreach (var p in t.Partitions.ToList())\\n    {\\n        long rc = Convert.ToInt64(p.GetAnnotation(\\\"Vertipaq_RecordCount\\\"));\\n        long sc = Convert.ToInt64(p.GetAnnotation(\\\"Vertipaq_SegmentCount\\\"));\\n        string rps = \\\"Vertipaq_RecordsPerSegment\\\";\\n        \\n        if (sc > 1)\\n        {\\n            p.SetAnnotation(rps,maxRPS.ToString());            \\n        }\\n        else if (sc == null || sc == 0)\\n        {\\n            p.SetAnnotation(rps,\\\"0\\\");\\n        }\\n        else\\n        {\\n            p.SetAnnotation(rps,(rc / sc).ToString());\\n        }\\n    }\\n}\\n\\n// Add model size annotation\\nstring ms = Model.Tables.Sum(a => Convert.ToInt64(a.GetAnnotation(\\\"Vertipaq_TableSize\\\"))).ToString();\\nModel.SetAnnotation(\\\"Vertipaq_ModelSize\\\",ms);\\n\\n// Percent of Table and Model\\nfloat modelSize = Convert.ToInt64(Model.GetAnnotation(\\\"Vertipaq_ModelSize\\\"));\\n\\nforeach (var t in Model.Tables.ToList())\\n{\\n    string tableName = t.Name;\\n    var obj = Model.Tables[tableName];\\n    \\n    float tableSize = Convert.ToInt64(obj.GetAnnotation(\\\"Vertipaq_TableSize\\\"));\\n    double tblpct = Math.Round(tableSize / modelSize,3);\\n        \\n    obj.SetAnnotation(\\\"Vertipaq_TableSizePctOfModel\\\",tblpct.ToString());\\n    \\n    foreach (var c in t.Columns.ToList())\\n    {\\n        string colName = c.Name;\\n        var col = Model.Tables[tableName].Columns[colName];\\n        \\n        float colSize = Convert.ToInt64(col.GetAnnotation(\\\"Vertipaq_ColumnSize\\\"));\\n        double colpctTbl = Math.Round(colSize / tableSize,3);\\n        double colpctModel = Math.Round(colSize / modelSize,3);\\n        \\n        col.SetAnnotation(\\\"Vertipaq_ColumnSizePctOfTable\\\",colpctTbl.ToString());\\n        col.SetAnnotation(\\\"Vertipaq_ColumnSizePctOfModel\\\",colpctModel.ToString());\\n    }\\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    }
  ]
}