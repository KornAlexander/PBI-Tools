    ,{  "Id": 1,
      "Name": "1. Measure Create\\1. Add From Column\\1. All columns ending with key or ID: Set Summarize By to None",
      "Enabled": "true",
      "Execute": "// Change SummarizeBy to None for All ID and Key columns ***********************************************************\n\n    foreach (var table in Model.Tables)\n    {\n        foreach (var column in table.Columns)\n        {\n            if (column.Name.EndsWith(\"Key\") || column.Name.EndsWith(\"ID\"))\n            {\n                column.SummarizeBy = AggregateFunction.None;\n            }\n        }\n    }\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 2,
      "Name": "1. Measure Create\\1. Add From Column\\2. Selected Measures based on Summarize By Property",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\n// Ask the user if they want to add the new measure to the current table\nDialogResult dialogResult = MessageBox.Show(\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\", \"Select Target Table\", MessageBoxButtons.YesNo);\n\nstring measuresTableName = Selected.Columns.First().Table.Name;\nif (dialogResult == DialogResult.No)\n{\n    // Ask for the name of the measure table if the user selects \"No\"\n    measuresTableName = Interaction.InputBox(\"Provide the name of the measure table\", \"Name of Measure Table\", \"Measure\");\n\n    // Check if the provided table exists\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Create a SUM measure for every currently selected column and hide the column\nforeach(var c in Selected.Columns)\n{\n    if (c.SummarizeBy.ToString().Equals(\"None\", StringComparison.OrdinalIgnoreCase))\n    {\n        continue;\n    }\n\n    // Use the target table determined by user selection or default \"Measure\" table\n    var measuresTable = Model.Tables[measuresTableName];\n    var newMeasure = measuresTable.AddMeasure(\n        /*\"Sum_\" +*/ c.Name,                            // Name\n        /*\"SUM(\"*/ c.SummarizeBy.ToString().ToUpper() + \"(\"+ c.DaxObjectFullName + \")\",         // DAX expression\n        c.Table.Name                                // Display Folder\n    );\n    \n    // Set the format string on the new measure:\n    newMeasure.FormatString = \"0.0\";\n\n    // Provide some documentation:\n    newMeasure.Description = \"This measure is the sum of column \" + c.DaxObjectFullName;\n\n    // Hide the base column:\n    c.IsHidden = true;\n}\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Id": 3,
      "Name": "1. Measure Create\\1. Add From Column\\3. Add Explicit Measure Auto-Create ALL Columns",
      "Enabled": "true",
      "Execute": "// Title: Auto-create explicit measures from all columns in all tables that have qualifying aggregation functions assigned \r\n//  \r\n// Author: Tom Martens, twitter.com/tommartens68\r\n// \r\n// This script, when executed, will loop through all the tables and creates explicit measure for all the columns with qualifying\r\n// aggregation functions.\r\n// The qualifying aggregation functions are SUM, COUNT, MIN, MAX, AVERAGE.\r\n// This script can create a lot of measures, as by default the aggregation function for columns with a numeric data type is SUM.\r\n// So, it is a good idea to check all columns for the proper aggregation type, e.g. the aggregation type of id columns \r\n// should be set to None, as it does not make any sense to aggregate id columns.\r\n// An annotation:CreatedThrough is created with a value:CreateExplicitMeasures this will help to identify the measures created\r\n// using this script.\r\n// What is missing, the list below shows what might be coming in subsequent iterations of the script:\r\n// - the base column property hidden is not set to true\r\n// - no black list is used to prevent the creation of unwanted measures\r\n\r\n// ***************************************************************************************************************\r\n//the following variables are allowing controling the script\r\nvar overwriteExistingMeasures = 0; // 1 overwrites existing measures, 0 preserves existing measures\r\n\r\nvar measureNameTemplate = \"{0} ({1}) \";\r\n//\"{0} ({1}) - {2}\"; // String.Format is used to create the measure name. \r\n//{0} will be replaced with the columnname (c.Name), {1} will be replaced with the aggregation function, and last but not least\r\n//{2} will be replaced with the tablename (t.Name). Using t.Name is necessary to create a distinction between measure names if\r\n//columns with the same name exist in different tables.\r\n//Assuming the column name inside the table \"Fact Sale\" is \"Sales revenue\" and the aggregation function is SUM \r\n//the measure name will be: \"Sales revenue (Sum) - Fact Sale\"\r\n\r\n//store aggregation function that qualify for measure creation to the hashset aggFunctions\r\nvar aggFunctions = new HashSet<AggregateFunction>{\r\n    AggregateFunction.Default, //remove this line, if you do not want to mess up your measures list by automatically created measures for all the columns that have the Default AggregateFunction assigned\r\n    AggregateFunction.Sum,\r\n    AggregateFunction.Count,\r\n    AggregateFunction.Min,\r\n    AggregateFunction.Max,\r\n    AggregateFunction.Average\r\n};\r\n\r\n//You have to be aware that by default this script will just create measures using the aggregate functions \"Sum\" or \"Count\" if\r\n//the column has the aggregate function AggregateFunction.Default assigned, this is checked further down below.\r\n//Also, if a column has the Default AggregateFunction assigned and is of the DataType\r\n//DataType.Automatic, DataType.Unknown, or DataType.Variant, no measure is created automatically, this is checked further down below.\r\n//dictDataTypeAggregateFunction = new Dictionary<DataType, string>();\r\n//see this article for all the available data types: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.datatype?view=analysisservices-dotnet\r\n//Of course you can change the aggregation function that will be used for different data types,\r\n//as long as you are using \"Sum\" and \"Count\"\r\n//Please be careful, if you change the aggregation function you might end up with multiplemeasures\r\nvar dictDataTypeAggregateFunction = new Dictionary<DataType, AggregateFunction>();\r\ndictDataTypeAggregateFunction.Add( DataType.Binary , AggregateFunction.Count ); //adding a key/value pair(s) to the dictionary using the Add() method\r\ndictDataTypeAggregateFunction.Add( DataType.Boolean , AggregateFunction.Count );\r\ndictDataTypeAggregateFunction.Add( DataType.DateTime , AggregateFunction.Count );\r\ndictDataTypeAggregateFunction.Add( DataType.Decimal , AggregateFunction.Sum );\r\ndictDataTypeAggregateFunction.Add( DataType.Double , AggregateFunction.Sum );\r\ndictDataTypeAggregateFunction.Add( DataType.Int64 , AggregateFunction.Sum );\r\ndictDataTypeAggregateFunction.Add( DataType.String , AggregateFunction.Count );\r\n\r\n// ***************************************************************************************************************\r\n//all the stuff below this line should not be altered \r\n//of course this is not valid if you have to fix my errors, make the code more efficient, \r\n//or you have a thorough understanding of what you are doing\r\n\r\n//store all the existing measures to the list listOfMeasures\r\nvar listOfMeasures = new List<string>();\r\nforeach( var m in Model.AllMeasures ) {\r\n    listOfMeasures.Add( m.Name );\r\n}\r\n\r\n//loop across all tables\r\nforeach( var t in Model.Tables ) {\r\n    \r\n    //loop across all columns of the current table t\r\n    foreach( var c in t.Columns ) {\r\n        \r\n        var currAggFunction = c.SummarizeBy; //cache the aggregation function of the current column c\r\n        var useAggFunction = AggregateFunction.Sum;\r\n        var theMeasureName = \"\"; // Name of the new Measure\r\n        var posInListOfMeasures = 0; //check if the new measure already exists <> -1\r\n        \r\n        if( aggFunctions.Contains(currAggFunction) ) //check if the current aggregation function qualifies for measure aggregation\r\n        {\r\n            //check if the current aggregation function is Default\r\n            if( currAggFunction == AggregateFunction.Default )\r\n            {\r\n                // check if the datatype of the column is considered for measure creation\r\n                if( dictDataTypeAggregateFunction.ContainsKey( c.DataType ) )\r\n                {\r\n                    \r\n                    //some kind of sanity check\r\n                    if( c.DataType == DataType.Automatic || c.DataType == DataType.Unknown || c.DataType == DataType.Variant )\r\n                    {\r\n                        Output(\"No measure will be created for columns with the data type: \" + c.DataType.ToString() + \" (\" + c.DaxObjectFullName + \")\");\r\n                        continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n                    }\r\n                  \r\n                    //cache the aggregation function from the dictDataTypeAggregateFunction\r\n                    useAggFunction = dictDataTypeAggregateFunction[ c.DataType ];\r\n                    \r\n                    //some kind of sanity check\r\n                    if( useAggFunction != AggregateFunction.Count && useAggFunction != AggregateFunction.Sum ) \r\n                    {    \r\n                        Output(\"No measure will be created for the column: \" + c.DaxObjectFullName);\r\n                        continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n                    }\r\n                    theMeasureName = String.Format( measureNameTemplate , c.Name , useAggFunction.ToString() , t.Name ); // Name of the new Measure\r\n                    posInListOfMeasures = listOfMeasures.IndexOf( theMeasureName ); //check if the new measure already exists <> -1\r\n                    \r\n                } else {\r\n                   \r\n                    continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n                }\r\n                        \r\n            } else {\r\n                \r\n                useAggFunction = currAggFunction;    \r\n                theMeasureName = String.Format( measureNameTemplate , c.Name , useAggFunction.ToString() , t.Name ); // Name of the new Measure\r\n                posInListOfMeasures = listOfMeasures.IndexOf( theMeasureName ); //check if the new measure already exists <> -1\r\n                \r\n            }\r\n            \r\n            //sanity check\r\n            if(theMeasureName == \"\")\r\n            {\r\n                continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n            }\r\n            \r\n            // create the measure\r\n            if( ( posInListOfMeasures == -1 || overwriteExistingMeasures == 1 )) \r\n            {    \r\n                if( overwriteExistingMeasures == 1 ) \r\n                {\r\n                    foreach( var m in Model.AllMeasures.Where( m => m.Name == theMeasureName ).ToList() ) \r\n                    {\r\n                        m.Delete();\r\n                    }\r\n                }\r\n                \r\n                var newMeasure = t.AddMeasure\r\n                (\r\n                    theMeasureName                                                                      // Name of the new Measure\r\n                    , \"\" + useAggFunction.ToString().ToUpper() + \"(\" + c.DaxObjectFullName + \")\"        // DAX expression\r\n                );\r\n                \r\n                newMeasure.SetAnnotation( \"CreatedThrough\" , \"CreateExplicitMeasures\" ); // flag the measures created through this script\r\n                \r\n            }\r\n        }    \r\n    }        \r\n}",
      "Tooltip": "This adds for selected Tables all explicit sum measures",
      "ValidContexts": "Model, Table"
    },
    {
      "Id": 4,
      "Name": "1. Measure Create\\2. Time: PY\\1. Y-1",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nvar newMeasures = new List<Measure>();\n\n// Find the table with the data category \"Time\"\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \"Time\");\n\nif (CalendarTable == null)\n{\n    string tableName = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"Calendar\");\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\n\n    if (CalendarTable == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n\n// Checking for Date Column otherwise prompt for user input\nstring DateColumn = null;\n// Check if there is a column in the CalendarTable with IsKey = true\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\nif (keyColumn != null)\n{\n    DateColumn = keyColumn.Name;\n}\nelse\n{\n    // If no key column found, prompt the user for input\n    DateColumn = Interaction.InputBox(\"Provide the name of the date column name\", \"Column Name\", \"Date\");\n}\n\n\n\n\n// Ask the user if they want to add the new measure to the current table\nDialogResult dialogResult = MessageBox.Show(\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\", \"Select Target Table\", MessageBoxButtons.YesNo);\n\nstring measuresTableName = null;\nif (dialogResult == DialogResult.No)\n{\n    // Ask for the name of the measure table if the user selects \"No\"\n    measuresTableName = Interaction.InputBox(\"Provide the name of the measure table\", \"Name of Measure Table\", \"Measure\");\n\n    // Check if the provided table exists\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\nforeach (var selectedMeasure in Selected.Measures)\n{\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" PY\";\n    \n    string newExpression1 = \n        \"CALCULATE(\" +\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" \n        +\"SAMEPERIODLASTYEAR(\"+CalendarTable.Name +\"[\"+DateColumn+\"]))\";\n\n    // Add the new measure based on the user's choice\n    Measure newMeasure1;\n    if (dialogResult == DialogResult.Yes)\n    {\n        // Add measure to the current table (selectedMeasure.Table)\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\n    }\n    else\n    {\n        // Add measure to the user-specified table\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n    }\n\n    // Set the format and add to the list\n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    // Set the DisplayFolder to the current DisplayFolder + \"PY\"\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \"PY\" : selectedMeasure.DisplayFolder + @\"\\PY\";\n\n    newMeasures.Add(newMeasure1);\n    // Format the DAX of the new measure\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\n\n}\n\n\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 5,
      "Name": "1. Measure Create\\2. Time: PY\\2. Δ Y-1",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nvar newMeasures = new List<Measure>();\n\n// Find the table with the data category \"Time\"\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \"Time\");\n\nif (CalendarTable == null)\n{\n    string tableName = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"Calendar\");\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\n\n    if (CalendarTable == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Checking for Date Column otherwise prompt for user input\nstring DateColumn = null;\n// Check if there is a column in the CalendarTable with IsKey = true\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\nif (keyColumn != null)\n{\n    DateColumn = keyColumn.Name;\n}\nelse\n{\n    // If no key column found, prompt the user for input\n    DateColumn = Interaction.InputBox(\"Provide the name of the date column name\", \"Column Name\", \"Date\");\n}\n\n\n// Ask the user if they want to add the new measure to the current table\nDialogResult dialogResult = MessageBox.Show(\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\", \"Select Target Table\", MessageBoxButtons.YesNo);\n\nstring measuresTableName = null;\nif (dialogResult == DialogResult.No)\n{\n    // Ask for the name of the measure table if the user selects \"No\"\n    measuresTableName = Interaction.InputBox(\"Provide the name of the measure table\", \"Name of Measure Table\", \"Measure\");\n\n    // Check if the provided table exists\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\nforeach (var selectedMeasure in Selected.Measures)\n{\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" Δ PY\";\n    \n    string newExpression1 = \n        \"[\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY]\";\n\n    // Add the new measure based on the user's choice\n    Measure newMeasure1;\n    if (dialogResult == DialogResult.Yes)\n    {\n        // Add measure to the current table (selectedMeasure.Table)\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\n    }\n    else\n    {\n        // Add measure to the user-specified table\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n    }\n\n    // Set the format and add to the list\n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \"PY\" : selectedMeasure.DisplayFolder + @\"\\PY\";\n    newMeasures.Add(newMeasure1);\n    // Format the DAX of the new measure\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\n\n}\n\n\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 6,
      "Name": "1. Measure Create\\2. Time: PY\\3. Δ Y-1%",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nvar newMeasures = new List<Measure>();\n\n// Find the table with the data category \"Time\"\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \"Time\");\n\nif (CalendarTable == null)\n{\n    string tableName = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"Calendar\");\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\n\n    if (CalendarTable == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Checking for Date Column otherwise prompt for user input\nstring DateColumn = null;\n// Check if there is a column in the CalendarTable with IsKey = true\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\nif (keyColumn != null)\n{\n    DateColumn = keyColumn.Name;\n}\nelse\n{\n    // If no key column found, prompt the user for input\n    DateColumn = Interaction.InputBox(\"Provide the name of the date column name\", \"Column Name\", \"Date\");\n}\n\n\n// Ask the user if they want to add the new measure to the current table\nDialogResult dialogResult = MessageBox.Show(\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\", \"Select Target Table\", MessageBoxButtons.YesNo);\n\nstring measuresTableName = null;\nif (dialogResult == DialogResult.No)\n{\n    // Ask for the name of the measure table if the user selects \"No\"\n    measuresTableName = Interaction.InputBox(\"Provide the name of the measure table\", \"Name of Measure Table\", \"Measure\");\n\n    // Check if the provided table exists\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\nforeach (var selectedMeasure in Selected.Measures)\n{\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" Δ PY %\";\n    \n    string newExpression1 = \n        \"DIVIDE([\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY], [\"+selectedMeasure.Name+\"])\";\n\n    // Add the new measure based on the user's choice\n    Measure newMeasure1;\n    if (dialogResult == DialogResult.Yes)\n    {\n        // Add measure to the current table (selectedMeasure.Table)\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\n    }\n    else\n    {\n        // Add measure to the user-specified table\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n    }\n\n    // Set the format and add to the list\n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \"PY\" : selectedMeasure.DisplayFolder + @\"\\PY\";\n    newMeasures.Add(newMeasure1);\n    // Format the DAX of the new measure\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\n\n}\n\n\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 7,
      "Name": "1. Measure Create\\2. Time: PY\\4. ALL Y-1",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nvar newMeasures = new List<Measure>();\n\n// Find the table with the data category \"Time\"\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \"Time\");\n\nif (CalendarTable == null)\n{\n    string tableName = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"Calendar\");\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\n\n    if (CalendarTable == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Checking for Date Column otherwise prompt for user input\nstring DateColumn = null;\n// Check if there is a column in the CalendarTable with IsKey = true\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\nif (keyColumn != null)\n{\n    DateColumn = keyColumn.Name;\n}\nelse\n{\n    // If no key column found, prompt the user for input\n    DateColumn = Interaction.InputBox(\"Provide the name of the date column name\", \"Column Name\", \"Date\");\n}\n\n\n// Ask the user if they want to add the new measure to the current table\nDialogResult dialogResult = MessageBox.Show(\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\", \"Select Target Table\", MessageBoxButtons.YesNo);\n\nstring measuresTableName = null;\nif (dialogResult == DialogResult.No)\n{\n    // Ask for the name of the measure table if the user selects \"No\"\n    measuresTableName = Interaction.InputBox(\"Provide the name of the measure table\", \"Name of Measure Table\", \"Measure\");\n\n    // Check if the provided table exists\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\nforeach (var selectedMeasure in Selected.Measures)\n{\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" PY\";\n    string newExpression1 = \n        \"CALCULATE(\" +\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" \n        +\"SAMEPERIODLASTYEAR(\"+CalendarTable.Name +\"[\"+DateColumn+\"]))\";\n\n    string newMeasureName2 = selectedMeasure.Name + \" Δ PY\";\n    string newExpression2 = \n        \"[\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY]\";\n\n    string newMeasureName3 = selectedMeasure.Name + \" Δ PY %\";\n    string newExpression3 = \n        \"DIVIDE([\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY], [\"+selectedMeasure.Name+\"])\";\n\n    // Add the new measure based on the user's choice\n    Measure newMeasure1;\n    Measure newMeasure2;\n    Measure newMeasure3;\n    if (dialogResult == DialogResult.Yes)\n    {\n        // Add measure to the current table (selectedMeasure.Table)\n        newMeasure1 = selectedMeasure.Table.AddMeasure(newMeasureName1, newExpression1);\n        newMeasure2 = selectedMeasure.Table.AddMeasure(newMeasureName2, newExpression2);\n        newMeasure3 = selectedMeasure.Table.AddMeasure(newMeasureName3, newExpression3);\n    }\n    else\n    {\n        // Add measure to the user-specified table\n        var measuresTable = Model.Tables.FirstOrDefault(table => table.Name == measuresTableName);\n        newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n        newMeasure2 = measuresTable.AddMeasure(newMeasureName2, newExpression2);\n        newMeasure3 = measuresTable.AddMeasure(newMeasureName3, newExpression3);\n    }\n\n    // Set the format and add to the list\n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasure1.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \"PY\" : selectedMeasure.DisplayFolder + @\"\\PY\";\n    newMeasure2.FormatString = selectedMeasure.FormatString;\n    newMeasure2.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \"PY\" : selectedMeasure.DisplayFolder + @\"\\PY\";\n    newMeasure3.FormatString = selectedMeasure.FormatString;\n    newMeasure3.DisplayFolder = string.IsNullOrEmpty(selectedMeasure.DisplayFolder) ? \"PY\" : selectedMeasure.DisplayFolder + @\"\\PY\";\n\n    newMeasures.Add(newMeasure1);\n    newMeasures.Add(newMeasure2);\n    newMeasures.Add(newMeasure3);\n\n    // Format the DAX of the new measure\n    FormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\n\n}\n\n\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 8,
      "Name": "1. Measure Create\\3. Time: Other\\M-1",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\n    \nforeach (var selectedMeasure in Selected.Measures)\n    {\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n    var Kalendartable = \"Calendar\";\n    var MonthColumn = \"Month (MMM)\";\n    var RelativMonth = \"Relative Month\";\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" M-1\";\n    \n    string newExpression1 = \n        \"IF(DISTINCTCOUNT(\"+Kalendartable+\"[\"+MonthColumn+\"])=1,[\"+selectedMeasure.Name+\"]\"\n        +\",CALCULATE(\" +\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" \n        +Kalendartable+\"[\"+RelativMonth+\"]=-1))\";\n\n    // Create the new measure in the same table as the selected measure\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n\n    // Set the display folder for the new measure\n    //newMeasure1.DisplayFolder = \"Just Created \" + selectedMeasure.Name;\n    \n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasures.Add(newMeasure1);\n    \n}\n\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 9,
      "Name": "1. Measure Create\\3. Time: Other\\Measure: YTD",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\n   \n foreach (var selectedMeasure in Selected.Measures)\n    {\n    // Variables to use and getting the measure table\n    var measuresTable = Model.Tables[\"Measure\"];\n    var Kalendartable = \"Calendar\";\n    var MonthColumn = \"Month (MMM)\";\n    var RelativMonth = \"Relative Month\";\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" YTD\";\n    \n    string newExpression1 = \n            \"CALCULATE([\"+selectedMeasure.Name+\"],ALL('\"+Kalendartable+\"'),'\"+Kalendartable+\"'[\"+RelativMonth+\"]<0,'\"+Kalendartable+\"'[\"+RelativMonth+\"]>-13)\";\n        \n    // Create the new measure in the same table as the selected measure\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n\n    // Set the display folder for the new measure\n    //newMeasure1.DisplayFolder =  Get.selectedMeasure.DisplayFolder;\n    \n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasures.Add(newMeasure1);\n\n}\n\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\n//FormatDax(Model.AllMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 10,
      "Name": "1. Measure Create\\4. Replace Text in Measure",
      "Enabled": "true",
      "Execute": "// Iterate over each measure in the selected measures to replace occurrences of a specific text\r\nforeach (var measure in Selected.Measures)\r\n{\r\n    const string textToReplace = \"Text_To_Replace\";\r\n    const string replacementText = \"Text_Instead\";\r\n\r\n    // Replace all occurrences of the text in the measure's name\r\n    string updatedName = measure.Name.Replace(textToReplace, replacementText);\r\n\r\n    // Update the measure's name\r\n    measure.Name = updatedName;\r\n}\r\n\r\n// Optionally, apply other updates or process further\r\n",
      "Tooltip": "This adds for selected Tables all explicit sum measures",
      "ValidContexts": "Model, Table, Measure"
    },
    {
      "Id": 11,
      "Name": "1. Measure Create\\5. Add Explicit Measures: Card",
      "Enabled": "true",
      "Execute": "    foreach (var selectedMeasure in Selected.Measures)\r\n    {\r\n    // Get the selected measure\r\n    var measuresTable = Model.Tables[\"Measure\"];\r\n\r\n    // Define the new measure name and expression\r\n    string newMeasureName1 = selectedMeasure.Name + \" M-1\";\r\n    string newMeasureName2 = selectedMeasure.Name + \" M-2\";\r\n    string newMeasureName3 = selectedMeasure.Name + \" M-13\";\r\n    string newMeasureName4 = selectedMeasure.Name + \" Δ Delta M-2\";\r\n    string newMeasureName5 = selectedMeasure.Name + \" Δ Delta M-2 %\";\r\n    string newMeasureName6 = selectedMeasure.Name + \" Δ Delta M-13\";\r\n    string newMeasureName7 = selectedMeasure.Name + \" Δ Delta M-13 %\";\r\n    string newMeasureName8 = selectedMeasure.Name + \" Reference 1 Δ Vormonat\";\r\n    string newMeasureName9 = selectedMeasure.Name + \" Reference 2 Δ Vorjahr\";\r\n    string newMeasureName10 = selectedMeasure.Name + \" Sparkline SVG\";\r\n    string newMeasureName11 = selectedMeasure.Name + \" Color Δ PM\";\r\n    string newMeasureName12 = selectedMeasure.Name + \" Color Δ LY\";\r\n    \r\n    string newExpression1 = \r\n        \"IF(ISFILTERED(Kalender[Monat (MMM)]),[\"+selectedMeasure.Name+\"]\"\r\n        +\",CALCULATE(\" +\r\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" +\r\n        \"Kalender[Relativer Monat #]=-1))\";\r\n    string newExpression2 = \r\n        \"CALCULATE(\" +\r\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" +\r\n        \"Kalender[Relativer Monat #]=-2)\";\r\n    string newExpression3 = \r\n        \"CALCULATE(\" +\r\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" +\r\n        \"Kalender[Relativer Monat #]=-13)\";\r\n    \r\n    string newExpression4 = \r\n        \"IF( ISFILTERED(Kalender[Monat (MMM)])\"+\r\n        \",[\"+selectedMeasure.Name+\"]\"\r\n        +\"-CALCULATE(\"+\"[\"+selectedMeasure.Name+\"]\"+\",PREVIOUSMONTH(Kalender[Datum]))\"+\r\n        \",[\"+newMeasureName1+\"]-[\"+newMeasureName2+\"])\";\r\n    string newExpression5 = \r\n        \"IF( ISFILTERED(Kalender[Monat (MMM)])\"+\r\n        \",[\"+newMeasureName4+\"]/CALCULATE(\"+\"[\"+selectedMeasure.Name+\"]\"+\",PREVIOUSMONTH(Kalender[Datum]))\"+\r\n        \",[\"+newMeasureName4+\"]/[\"+newMeasureName1+\"])\";\r\n\r\n    //string newExpression6 =  \"[\"+newMeasureName1+\"]-[\"+newMeasureName3+\"]\";\r\n    //string newExpression7 =  \"[\"+newMeasureName6+\"]/[\"+newMeasureName1+\"]\";\r\n    \r\n    string newExpression6 = \r\n        \"IF( ISFILTERED(Kalender[Monat (MMM)])\"+\r\n        \",\"+\"[\"+selectedMeasure.Name+\"]\"\r\n        +\"-CALCULATE(\"+\"[\"+selectedMeasure.Name+\"]\"+\",SAMEPERIODLASTYEAR(Kalender[Datum]))\"+\r\n        \",[\"+newMeasureName1+\"]-[\"+newMeasureName3+\"])\";\r\n    string newExpression7 = \r\n        \"IF( ISFILTERED(Kalender[Monat (MMM)])\"+\r\n        \",[\"+newMeasureName6+\"]/CALCULATE(\"+\"[\"+selectedMeasure.Name+\"]\"+\",SAMEPERIODLASTYEAR(Kalender[Datum]))\"+\r\n        \",[\"+newMeasureName6+\"]/[\"+newMeasureName1+\"])\";\r\n    \r\n    string newExpression8 = \"var _sign_icon = IF([\" + newMeasureName4 + \"] > 0, \\\"▲ +\\\", \\\"▼ -\\\" & UNICHAR(127))\\n\" +\r\n                            \"var _sign_plusminus = IF([\" + newMeasureName4 + \"] > 0, \\\" | +\\\", \\\" | - \\\")\\n\" +\r\n                            \"var _valprct = ABS([\" + newMeasureName5 + \"])\\n\" +\r\n                            \"var _valdiff = ABS([\" + newMeasureName4 + \"])\\n\" +\r\n                            \"RETURN _sign_icon & FORMAT(_valprct, \\\"#.0%\\\") & _sign_plusminus & FORMAT(_valdiff, \\\"#,0\\\")\";\r\n    string newExpression9 = \"var _sign_icon = IF([\" + newMeasureName6 + \"] > 0, \\\"▲ +\\\", \\\"▼ -\\\" & UNICHAR(127))\\n\" +\r\n                            \"var _sign_plusminus = IF([\" + newMeasureName6 + \"] > 0, \\\" | +\\\", \\\" | - \\\")\\n\" +\r\n                            \"var _valprct = ABS([\" + newMeasureName7 + \"])\\n\" +\r\n                            \"var _valdiff = ABS([\" + newMeasureName6 + \"])\\n\" +\r\n                            \"RETURN _sign_icon & FORMAT(_valprct, \\\"#.0%\\\") & _sign_plusminus & FORMAT(_valdiff, \\\"#,0\\\")\";\r\n    \r\n    string newExpression10 =\r\n    \"VAR LineColour = \\\"%23808080\\\"\\n\" +\r\n    \"VAR PointColour = \\\"white\\\"\\n\" +\r\n    \"VAR Defs = \" +\r\n        \"\\\"<defs><linearGradient id='grad' x1='0' y1='25' x2='0' y2='50' gradientUnits='userSpaceOnUse'>\" +\r\n        \"<stop stop-color='%23808080' offset='0' />\" +\r\n        \"<stop stop-color='%23808080' offset='0.3' />\" +\r\n        \"<stop stop-color='white' offset='1' />\" +\r\n        \"</linearGradient></defs>\\\"\\n\" +\r\n    \"VAR XMinDate = MIN('Kalender'[MonatKey #])\\n\" +\r\n    \"VAR XMaxDate = MAX('Kalender'[MonatKey #])\\n\" +\r\n    \"VAR YMinValue = MINX(Values(Kalender[MonatKey #]),[\"+selectedMeasure.Name+\"])\\n\" +\r\n    \"VAR YMaxValue = MAXX(Values(Kalender[MonatKey #]),[\"+selectedMeasure.Name+\"])\\n\" +\r\n    \"VAR SparklineTable = ADDCOLUMNS(\\n\" +\r\n    \"    SUMMARIZE('Kalender',Kalender[MonatKey #]),\\n\" +\r\n    \"        \\\"X\\\",INT(150 * DIVIDE(Kalender[MonatKey #] - XMinDate, XMaxDate - XMinDate)),\\n\" +\r\n    \"        \\\"Y\\\",INT(50 * DIVIDE([\"+selectedMeasure.Name+\"] - YMinValue,YMaxValue - YMinValue)))\\n\" +\r\n    \"VAR Lines = CONCATENATEX(SparklineTable,[X] & \\\",\\\" & 50-[Y],\\\" \\\", Kalender[MonatKey #])\\n\" +\r\n    \"VAR LastSparkYValue = MAXX( FILTER(SparklineTable, Kalender[MonatKey #] = XMaxDate), [Y])\\n\" +\r\n    \"VAR LastSparkXValue = MAXX( FILTER(SparklineTable, Kalender[MonatKey #] = XMaxDate), [X])\\n\" +\r\n    \"VAR SVGImageURL = \\n\" +\r\n    \"    \\\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='-7 -7 164 64'>\\\" & Defs & \\n\" +\r\n    \"     \\\"<polyline fill='url(#grad)' fill-opacity='0.3' stroke='transparent' stroke-width='0' points=' 0 50 \\\" & Lines & \\n\" +\r\n    \"      \\\" 150 150 Z '/>\\\" &\\n\" +\r\n    \"    \\\"<polyline fill='transparent' stroke='\\\" & LineColour & \\\"' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' points=' \\\" & Lines & \\n\" +\r\n    \"      \\\" '/>\\\" &\\n\" +\r\n    \"    \\\"<circle cx='\\\"& LastSparkXValue & \\\"' cy='\\\" & 50 - LastSparkYValue & \\\"' r='4' stroke='\\\" & LineColour & \\\"' stroke-width='3' fill='\\\" & PointColour & \\\"' />\\\" &\\n\" +\r\n    \"    \\\"</svg>\\\"\\n\" +\r\n    \"RETURN SVGImageURL\";\r\n\r\n    string newExpression11 = \r\n    \"VAR MeasureToUse = [\" + newMeasureName4 + \"]\\n\" +\r\n    \"RETURN\\n\" +\r\n    \"IF (\\n\" +\r\n    \"    MeasureToUse < 0,\\n\" +\r\n    \"    \\\"#FF0000\\\",\\n\" +\r\n    \"    IF (\\n\" +\r\n    \"        MeasureToUse > 0,\\n\" +\r\n    \"        \\\"#92D050\\\"\\n\" +\r\n    \"    )\\n\" +\r\n    \")\";\r\n\r\n    string newExpression12 = \r\n    \"VAR MeasureToUse = [\" + newMeasureName6 + \"]\\n\" +\r\n    \"RETURN\\n\" +\r\n    \"IF (\\n\" +\r\n    \"    MeasureToUse < 0,\\n\" +\r\n    \"    \\\"#FF0000\\\",\\n\" +\r\n    \"    IF (\\n\" +\r\n    \"        MeasureToUse > 0,\\n\" +\r\n    \"        \\\"#92D050\\\"\\n\" +\r\n    \"    )\\n\" +\r\n    \")\";\r\n    \r\n    // Create the new measure in the same table as the selected measure\r\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\r\n    var newMeasure2 = measuresTable.AddMeasure(newMeasureName2, newExpression2);\r\n    var newMeasure3 = measuresTable.AddMeasure(newMeasureName3, newExpression3);\r\n    var newMeasure4 = measuresTable.AddMeasure(newMeasureName4, newExpression4);\r\n    var newMeasure5 = measuresTable.AddMeasure(newMeasureName5, newExpression5);\r\n    var newMeasure6 = measuresTable.AddMeasure(newMeasureName6, newExpression6);\r\n    var newMeasure7 = measuresTable.AddMeasure(newMeasureName7, newExpression7);\r\n    var newMeasure8 = measuresTable.AddMeasure(newMeasureName8, newExpression8);\r\n    var newMeasure9 = measuresTable.AddMeasure(newMeasureName9, newExpression9);\r\n    var newMeasure10 = measuresTable.AddMeasure(newMeasureName10, newExpression10);\r\n    var newMeasure11 = measuresTable.AddMeasure(newMeasureName11, newExpression11);\r\n    var newMeasure12 = measuresTable.AddMeasure(newMeasureName12, newExpression12);\r\n    \r\n    // Set the display folder for the new measure\r\n    newMeasure1.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure2.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure3.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure4.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure5.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure6.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure7.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure8.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure9.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure10.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure11.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    newMeasure12.DisplayFolder = \"Card \" + selectedMeasure.Name;\r\n    \r\n    newMeasure1.FormatString = selectedMeasure.FormatString;\r\n    newMeasure2.FormatString = selectedMeasure.FormatString;\r\n    newMeasure3.FormatString = selectedMeasure.FormatString;\r\n    newMeasure4.FormatString = selectedMeasure.FormatString;\r\n    newMeasure5.FormatString = selectedMeasure.FormatString;\r\n    newMeasure6.FormatString = selectedMeasure.FormatString;\r\n    newMeasure7.FormatString = selectedMeasure.FormatString;\r\n    newMeasure8.FormatString = selectedMeasure.FormatString;\r\n    newMeasure9.FormatString = selectedMeasure.FormatString;\r\n    newMeasure10.FormatString = selectedMeasure.FormatString;\r\n    newMeasure11.FormatString = selectedMeasure.FormatString;\r\n    newMeasure12.FormatString = selectedMeasure.FormatString;\r\n    \r\n}",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 12,
      "Name": "1. Measure Create\\6. Update Selected Measure",
      "Enabled": "true",
      "Execute": "var updatedMeasures = new List<Measure>();\n\nforeach (var selectedMeasure in Selected.Measures)\n{\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n\n    // Retrieve the previous DAX expression of the selected measure\n    var previousExpression = selectedMeasure.Expression;\n\n    // Define the new DAX expression by appending the new condition\n    string newExpression = \"(\"+previousExpression+ \")*( 0.3 + RAND())\";\n\n    // Update the existing measure with the new expression\n    selectedMeasure.Expression = newExpression;\n    updatedMeasures.Add(selectedMeasure);\n}\n\nFormatDax(updatedMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 13,
      "Name": "2. Measure Modify\\1. Format String Unit",
      "Enabled": "true",
      "Execute": "var updatedMeasures = new List<Measure>();\n    \nforeach (var selectedMeasure in Selected.Measures)\n    {\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n    var UnitTable = \"Einheit\";\n    var UnitColumn = \"Einheit\";\n    var UnitThousand = \"Tausend\";\n    var UnitMillion = \"Millionen\";\n\n    // Define the dynamic format string expression\n    string dynamicFormatString = \n        \"SWITCH(\" +\n        \"SELECTEDVALUE( \"+UnitTable+\"[\"+UnitColumn+\"] ), \" +\n        \"\\\"\"+UnitThousand+\"\\\", \\\"0,#\\\", \" +\n        \"\\\"\"+UnitMillion+\"\\\", \\\"#,0.#\\\", \" +\n        \"\\\"#,#\\\")\";\n\n    // Update the format string for the selected measure\n    selectedMeasure.FormatStringExpression = dynamicFormatString;\n    updatedMeasures.Add(selectedMeasure);\n    \n}\n\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 14,
      "Name": "2. Measure Modify\\2. Add Last Refresh Measure",
      "Enabled": "true",
      "Execute": "string tableNameEmptyMeasure = \"Measure\";\r\nstring tableNameLastRefresh = \"Last Refresh\";\r\nstring LastRefreshMeasureName = \"Last Refresh Measure\";\r\nstring columnNameLastRefresh = \"Last Refreshes\";\r\nstring measureDax = \"\\\"Last Refresh: \\\" & MAX('\" + tableNameLastRefresh + \"'[\" + columnNameLastRefresh + \"])\";\r\n\r\nvar table2 = Model.Tables[tableNameEmptyMeasure];\r\nvar measurelastrefresh = table2.AddMeasure(LastRefreshMeasureName, measureDax, \"Meta\");\r\n",
      "Tooltip": "",
      "ValidContexts": "Model, Table"
    },
    {
      "Id": 15,
      "Name": "2. Measure Modify\\3. Unit Dynamic FormatStringExpression",
      "Enabled": "true",
      "Execute": "var updatedMeasures = new List<Measure>();\n    \nforeach (var selectedMeasure in Selected.Measures)\n    {\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n    var UnitTable = \"Einheit\";\n    var UnitColumn = \"Einheit\";\n    var UnitThousand = \"Tausend\";\n    var UnitMillion = \"Millionen\";\n\n    // Define the dynamic format string expression\n    string dynamicFormatString = \n        \"SWITCH(\" +\n        \"SELECTEDVALUE( \"+UnitTable+\"[\"+UnitColumn+\"] ), \" +\n        \"\\\"\"+UnitThousand+\"\\\", \\\"0,#\\\", \" +\n        \"\\\"\"+UnitMillion+\"\\\", \\\"#,0.#\\\", \" +\n        \"\\\"#,#\\\")\";\n\n    // Update the format string for the selected measure\n    selectedMeasure.FormatStringExpression = dynamicFormatString;\n    updatedMeasures.Add(selectedMeasure);\n    \n}\n\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 16,
      "Name": "2. Measure Modify\\4. Format All Measures",
      "Enabled": "true",
      "Execute": "// Formats DAX of all Calculation Items of Calculation Groups\nFormatDax(Model.AllCalculationItems);\n\n// Formats DAX of all Measures\nFormatDax(Model.AllMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Model, Measure"
    },
    {
      "Id": 17,
      "Name": "2. Measure Modify\\5. All columns ending with ID or Key: Set IsAvailableInMDX to False",
      "Enabled": "true",
      "Execute": "\n\n// Set IsAvailableInMDX to false; ***********************************************************\n    foreach (var table in Model.Tables)\n    {\n        foreach (var column in table.Columns)\n        {\n            if (column.Name.EndsWith(\"Key\") || column.Name.EndsWith(\"ID\"))\n            {\n                column.IsAvailableInMDX = false;\n            }\n        }\n    }\n\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 18,
      "Name": "3. Calc Table\\1. Create Calc Calendar Table (TE3)",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nstring calctableCalendar = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"CalendarCalcTable\");\n\n\n\n    // Define the DAX expression for the calculated table\n    string tableExpression = @\"\nVAR all_dates = CALENDARAUTO()\nRETURN\n    ADDCOLUMNS(\n        all_dates,\n        \"\"DateKey\"\", VALUE(FORMAT([Date], \"\"YYYYMMDD\"\")),\n        \"\"Year\"\", YEAR([Date]),\n        \"\"Quarter\"\", QUARTER([Date]),\n        \"\"Month\"\", MONTH([Date]),\n        \"\"End of Month\"\", EOMONTH([Date], 0),\n        \"\"Week of Year\"\", WEEKNUM([Date]),\n        \"\"Weekday\"\", WEEKDAY([Date])\n    )\n\";\n\n    // Add the calculated table to the model\n    var table = Model.AddCalculatedTable(calctableCalendar, tableExpression);\n        table.DataCategory = \"Time\";\n\n    // Modify the existing \"Date\" column\n    var dateColumn = table.Columns[\"Date\"];\n    dateColumn.DataType = DataType.DateTime;\n    dateColumn.IsKey = true; // Ensure this is the key column",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 19,
      "Name": "3. Calc Table\\2. Create Empty Measure Table",
      "Enabled": "true",
      "Execute": "// ATTENTION FOR TE2 Users: Script needs modification AND needs to be run in 2 steps\n\n// First Step: Add Table\nvar table = Model.AddCalculatedTable(\"Measure\", \"{0}\"); \n\n// Second Step: JUST FOR TE2 Save Data Model Changes\n\n// Third Step: Hides the column, uncomment the next line and execute it separately\n//var table = Model.Tables[\"Measure\"]; //uncomment this line for TE2\ntable.Columns[0].IsHidden = true;",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 20,
      "Name": "4. Calc Group\\1. Units",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\n// Creates Calculation Group for Units *******************************************************************************\n// only sticked with k and mio because billion is not internationally usable. The German \"Billion\" is not the same as the English \"billion\"\n\nif (!Model.DiscourageImplicitMeasures)\n{\n    // Show message box\n    DialogResult dialogResult14 = MessageBox.Show(\n        text: \"We saw that discourageImplicitMeasures is not yet set to true.\\n\\nIf you proceed this will automaticaly disable implicit measures. Disabling implicit measures is generally recommended. \\n\\nWould you like to proceed?\",\n        caption: \"Discourage Implicit Measures\",\n        buttons: MessageBoxButtons.YesNo);\n\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\n    if (dialogResult14 == DialogResult.No)\n    {\n        return;\n    }\n}\n\n    // Add a new Units Calculation Group \n    try\n    {\n        var calcGroup = Model.AddCalculationGroup();\n        calcGroup.Name = Interaction.InputBox(\"Provide a name of the Units calculation group table and column Name\", \"Units Calc Group Names\", \"Unit\"); \n        calcGroup.Columns[\"Name\"].Name = calcGroup.Name;\n        // Define calculation item data\n        var calculationItemData = new[]\n        {\n    new { Name = \"Thousand\", Expression = string.Format(\"IF(ISNUMBER(SELECTEDMEASURE()),IF(NOT(CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"%\\\") ||CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"ratio\\\")),DIVIDE(SELECTEDMEASURE(), 1000),SELECTEDMEASURE()),SELECTEDMEASURE())\") },\n    new { Name = \"Million\", Expression = string.Format(\"IF(ISNUMBER(SELECTEDMEASURE()),IF(NOT(CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"%\\\") ||CONTAINSSTRING(SELECTEDMEASURENAME(), \\\"ratio\\\")),DIVIDE(SELECTEDMEASURE(), 1000000),SELECTEDMEASURE()),SELECTEDMEASURE())\") }\n}.Where(item => item != null).ToArray();\n\n        // Add calculation items to the Calculation Group\n        foreach (var itemData in calculationItemData)\n        {\n            var item = calcGroup.AddCalculationItem();\n            item.Name = itemData.Name;\n            item.Expression = itemData.Expression;\n        }\n    }\n    catch (Exception ex)\n    {\n        MessageBox.Show(\"Adding the calc group units was not fully successful, but the rest of the script was completed\\n\\nReason: \" + ex.Message);\n    }\n\n\n// Formats the DAX of all calculation items in calc groups. Those are not measures ************************************************************\n    FormatDax(Model.AllCalculationItems);\n\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 21,
      "Name": "4. Calc Group\\2. Time Intelligence",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nif (!Model.DiscourageImplicitMeasures)\n{\n    // Show message box\n    DialogResult dialogResult14 = MessageBox.Show(\n        text: \"We saw that discourageImplicitMeasures is not yet set to true.\\n\\nIf you proceed this will automaticaly disable implicit measures. Disabling implicit measures is generally recommended. \\n\\nWould you like to proceed?\",\n        caption: \"Discourage Implicit Measures\",\n        buttons: MessageBoxButtons.YesNo);\n\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\n    if (dialogResult14 == DialogResult.No)\n    {\n        return;\n    }\n}\n\n// Find the table with the data category \"Time\"\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \"Time\");\n\nif (CalendarTable == null)\n{\n    string tableName = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"Calendar\");\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\n\n    if (CalendarTable.Name == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Checking for Date Column otherwise prompt for user input\nstring DateColumn = null;\n// Check if there is a column in the CalendarTable with IsKey = true\nvar keyColumn = CalendarTable.Columns.FirstOrDefault(col => col.IsKey == true);\nif (keyColumn != null)\n{\n    DateColumn = keyColumn.Name;\n}\nelse\n{\n    // If no key column found, prompt the user for input\n    DateColumn = Interaction.InputBox(\"Provide the name of the date column name\", \"Column Name\", \"Date\");\n}\n\n\n// Creates Calculation Group for Time Intelligence *******************************************************************************\n    var TimeIntelligenceCalculationGroupName = Interaction.InputBox(\"Provide the name of the calculation group name\",\"Time Intelligence Calc Group Name\",\"Time Intelligence\");\n\n    DialogResult dialogResult4 = MessageBox.Show(text:\"Generate YTD Calc Items?\", caption:\"Calc Group: YTD\", buttons:MessageBoxButtons.YesNo);\n    bool GenerateYTD = (dialogResult4 == DialogResult.Yes);            \n\n    // Add a new Time Intellignce Calculation Group **************************************************\n    try\n    {\n        var calcGroup = Model.AddCalculationGroup();\n        calcGroup.Name = TimeIntelligenceCalculationGroupName;\n        calcGroup.Columns[\"Name\"].Name = TimeIntelligenceCalculationGroupName;\n        // Define calculation item data\n        var calculationItemData = new[]\n        {\n        new { Name = \"AC\", Expression = \"SELECTEDMEASURE()\" },\n        new { Name = \"Y-1\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0}))\", CalendarTable.Name, DateColumn) },\n        new { Name = \"Y-2\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0}))\", CalendarTable.Name, DateColumn) },\n        new { Name = \"Y-3\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -3, YEAR), ALL({0}))\", CalendarTable.Name, DateColumn) },\n        GenerateYTD ? new { Name = \"YTD\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0}))\", CalendarTable.Name, DateColumn) }: null,\n        GenerateYTD ? new { Name = \"YTD-1\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0}))\", CalendarTable.Name, DateColumn) }: null,\n        GenerateYTD ? new { Name = \"YTD-2\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0}))\", CalendarTable.Name, DateColumn) }: null,\n        new { Name = \"abs. AC vs Y-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN AC - Y1\", CalendarTable.Name, DateColumn) },\n        new { Name = \"abs. AC vs Y-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN AC - Y2\", CalendarTable.Name, DateColumn) },\n        GenerateYTD ? new { Name = \"abs. AC vs YTD-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN AC - Y1\", CalendarTable.Name, DateColumn) }: null,\n        GenerateYTD ? new { Name = \"abs. AC vs YTD-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN AC - Y2\", CalendarTable.Name, DateColumn) }: null,\n        new { Name = \"AC vs Y-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), SAMEPERIODLASTYEAR({0}[{1}]), ALL({0})) RETURN DIVIDE(AC - Y1, Y1)\", CalendarTable.Name, DateColumn) },\n        new { Name = \"AC vs Y-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD({0}[{1}], -2, YEAR), ALL({0})) RETURN DIVIDE(AC - Y2, Y2)\", CalendarTable.Name, DateColumn) },\n        GenerateYTD ? new { Name = \"AC vs YTD-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN DIVIDE(AC - Y1, Y1)\", CalendarTable.Name, DateColumn) }: null,\n        GenerateYTD ? new { Name = \"AC vs YTD-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN DIVIDE(AC - Y2, Y2)\", CalendarTable.Name, DateColumn) }: null,\n        new { Name = \"achiev. AC vs Y-1\", Expression = string.Format(\"VAR AC = SELECTEDMEASURE() VAR Y1 = CALCULATE(SELECTEDMEASURE(), SAMEPERIODLASTYEAR({0}[{1}]), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y1 - AC ), 0 ) / Y1 ) )\", CalendarTable.Name, DateColumn) },\n        new { Name = \"achiev. AC vs Y-2\", Expression = string.Format(\"VAR AC = SELECTEDMEASURE() VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD({0}[{1}], -2, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y2 - AC ), 0 ) / Y2 ) )\", CalendarTable.Name, DateColumn) },\n        GenerateYTD ? new { Name = \"achiev. AC vs YTD-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y1 - AC ), 0 ) / Y1 ) )\", CalendarTable.Name, DateColumn) }: null,\n        GenerateYTD ? new { Name = \"achiev. AC vs YTD-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y2 - AC ), 0 ) / Y2 ) )\", CalendarTable.Name, DateColumn) }: null\n  \n    }.Where(item => item != null).ToArray();\n        // Add calculation items to the Calculation Group\n        foreach (var itemData in calculationItemData)\n        {\n            var item = calcGroup.AddCalculationItem();\n            item.Name = itemData.Name;\n            item.Expression = itemData.Expression;\n        }\n    }\n    catch (Exception ex)\n    {\n        MessageBox.Show(\"Adding the calc group time intelligence was not fully successful, but the rest of the script was completed\\n\\nReason: \" + ex.Message);\n    }\n\n\n// Formats the DAX of all calculation items in calc groups. Those are not measures ************************************************************\nFormatDax(Model.AllCalculationItems);\n\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 22,
      "Name": "5. Power Query\\1. Implement Incremental Refresh",
      "Enabled": "true",
      "Execute": "// This script will automatically generate an Incremental Refresh policy for a selected table\n// It is generated based on the selected column\n// It requires input from the user with a dialogue pop-up box.\n// This script will automatically generate an Incremental Refresh policy for a selected table\n// It is generated based on the selected column\n// It requires input from the user with a dialogue pop-up box.\nusing System.Drawing;\nusing System.Windows.Forms;\n\n// Hide the 'Running Macro' spinbox\nScriptHelper.WaitFormVisible = false;\n\n// Initialize Variables\nTable _Table                = Model.Tables[0];\nstring _MExpression         = \"\";\nColumn _Column              = Model.AllColumns.ToList()[0];\nstring _ColumnName          = \"\";\nDataType _ColumnDataType    = DataType.DateTime;\n\ntry\n    {   \n        // Select a Table for which you will configure Incremental Refresh.\n        // The Refresh Policy will be enabled and configured for this table.\n        _Table = \n            Model.Tables.Where(\n\n                // Exclude tables that already have a refresh policy\n                t => \n                t.EnableRefreshPolicy != true && \n\n                // Include only 'Table' objects\n                t.ObjectType == ObjectType.Table && \n\n                // Exclude Calculated Tables\n                t.Columns[0].Type != ColumnType.CalculatedTableColumn && \n\n                // Exclude tables that have columns on the 'From' end of a Relationship\n                t.Columns.Any(c => Model.Relationships.Any(r => r.FromColumn == c) ) && \n\n                // Exclude tables that don't have a DateTime or Integer column\n                (\n                    t.Columns.Any(c => c.DataType == DataType.DateTime) || \n                    t.Columns.Any(c => c.DataType == DataType.Int64)\n                )\n            ).SelectTable(null,\"Select a Table for which you will configure Incremental Refresh:\");\n        \n        _MExpression = _Table.Partitions[0].Expression;\n    \n    try\n    {\n        // Select the column to apply the Refresh Policy. \n        // The M Expression will be modified using the name of this column.\n        _Column = \n            _Table.Columns.Where(\n\n                // Include only DateTime or Int columns\n                c => \n                c.DataType == DataType.DateTime || \n                c.DataType == DataType.Int64\n\n            ).SelectColumn(null, \"Select a DateTime or DateKey (Int) Column to apply the Refresh Policy.\");\n        \n        _ColumnName = _Column.DaxObjectName;\n        _ColumnDataType = _Column.DataType;\n    \n        try \n        {   // Test if 'RangeStart' exists\n            Model.Expressions.Contains(Model.Expressions[\"RangeStart\"]);\n            Info (\"RangeStart already exists!\");\n        }\n        catch\n        {\n            // Add RangeStart parameter\n            Model.AddExpression( \n                \"RangeStart\", \n                @\"\n            #datetime(2023, 01, 01, 0, 0, 0) meta\n            [\n                IsParameterQuery = true,\n                IsParameterQueryRequired = true,\n                Type = type datetime\n            ]\"\n            );\n        \n            // Success message for adding 'RangeStart'\n            Info ( \"Created 'RangeStart' M Parameter!\" );\n        }\n        \n        // Test if the RangeEnd parameter exists\n        try \n        {   // Test if 'RangeEnd' exists\n            Model.Expressions.Contains(Model.Expressions[\"RangeEnd\"]);\n            Info (\"RangeEnd already exists!\");\n        }\n        catch\n        {\n            // Add RangeEnd parameter\n            Model.AddExpression( \n                \"RangeEnd\", \n                @\"\n            #datetime(2023, 31, 01, 0, 0, 0) meta\n            [\n                IsParameterQuery = true,\n                IsParameterQueryRequired = true,\n                Type = type datetime\n            ]\"\n            );\n        \n            // Success message for adding 'RangeEnd'\n            Info ( \"Created 'RangeEnd' M Parameter!\" );\n        \n        }\n        \n        // Incremental Refresh Configuration\n        // Input box config\n        Font _fontConfig = new Font(\"Segoe UI\", 11);\n        \n        // Label for how long data should be stored\n        var storeDataLabel = new Label();\n        storeDataLabel.Text = \"Store data in the last:\";\n        storeDataLabel.Location = new Point(20, 20);\n        storeDataLabel.AutoSize = true;\n        storeDataLabel.Font = _fontConfig;\n        \n        // User input for how long data should be stored\n        var storeDataTextBox = new TextBox();\n        storeDataTextBox.Location = new Point(storeDataLabel.Location.X + TextRenderer.MeasureText(storeDataLabel.Text, storeDataLabel.Font).Width + 20, storeDataLabel.Location.Y);\n        storeDataTextBox.Size = new Size(100, 20);\n        storeDataTextBox.Text = \"3\";\n        storeDataTextBox.Font = _fontConfig;\n        \n        // User selection for how long data should be stored (granularity)\n        var storeDataComboBox = new ComboBox();\n        storeDataComboBox.Location = new Point(storeDataTextBox.Location.X + storeDataTextBox.Width + 20, storeDataLabel.Location.Y);\n        storeDataComboBox.Size = new Size(100, 20);\n        storeDataComboBox.DropDownStyle = ComboBoxStyle.DropDownList;\n        storeDataComboBox.Items.AddRange(new object[] { \"days\", \"months\", \"quarters\", \"years\" });\n        storeDataComboBox.SelectedIndex = 3;\n        storeDataComboBox.Font = _fontConfig;\n        \n        // Label for how much data should be refreshed\n        var refreshDataLabel = new Label();\n        refreshDataLabel.Text = \"Refresh data in the last:\";\n        refreshDataLabel.Location = new Point(20, storeDataLabel.Location.Y + storeDataLabel.Height + 15);\n        refreshDataLabel.AutoSize = true;\n        refreshDataLabel.Font = _fontConfig;\n        \n        // User input for how much data should be refreshed\n        var refreshDataTextBox = new TextBox();\n        refreshDataTextBox.Location = new Point(storeDataTextBox.Location.X, refreshDataLabel.Location.Y);\n        refreshDataTextBox.Size = new Size(100, 20);\n        refreshDataTextBox.Text = \"30\";\n        refreshDataTextBox.Font = _fontConfig;\n        \n        // User selection for how much data should be refreshed (Period)\n        var refreshDataComboBox = new ComboBox();\n        refreshDataComboBox.Location = new Point(storeDataComboBox.Location.X, refreshDataLabel.Location.Y);\n        refreshDataComboBox.Size = new Size(100, 20);\n        refreshDataComboBox.DropDownStyle = ComboBoxStyle.DropDownList;\n        refreshDataComboBox.Items.AddRange(new object[] { \"days\", \"months\", \"quarters\", \"years\" });\n        refreshDataComboBox.SelectedIndex = 0;\n        refreshDataComboBox.Font = _fontConfig;\n        \n        // User input to refresh full periods or not\n        var fullPeriodsCheckBox = new CheckBox();\n        fullPeriodsCheckBox.Text = \"Refresh only full periods\";\n        fullPeriodsCheckBox.Location = new Point(storeDataLabel.Location.X + 3, refreshDataLabel.Location.Y + refreshDataLabel.Height + 15);\n        fullPeriodsCheckBox.AutoSize = true;\n        fullPeriodsCheckBox.Font = _fontConfig;\n        \n        // Form OK button\n        var okButton = new Button();\n        okButton.Text = \"OK\";\n        okButton.Location = new Point(storeDataLabel.Location.X, fullPeriodsCheckBox.Location.Y + fullPeriodsCheckBox.Height + 15);\n        okButton.MinimumSize = new Size(80, 25);\n        okButton.AutoSize = true;\n        okButton.DialogResult = DialogResult.OK;\n        okButton.Font = _fontConfig;\n        \n        // Form cancel button\n        var cancelButton = new Button();\n        cancelButton.Text = \"Cancel\";\n        cancelButton.Location = new Point(okButton.Location.X + okButton.Width + 10, okButton.Location.Y);\n        cancelButton.MinimumSize = new Size(80, 25);\n        cancelButton.AutoSize = true;\n        cancelButton.DialogResult = DialogResult.Cancel;\n        cancelButton.Font = _fontConfig;\n        \n        // Adjust the Location of the storeDataLabel to align with the storeDataTextBox\n        storeDataLabel.Location = new Point(storeDataLabel.Location.X, storeDataLabel.Location.Y + 4);\n        refreshDataLabel.Location = new Point(refreshDataLabel.Location.X, refreshDataLabel.Location.Y + 4);\n        \n        // Form config\n        var form = new Form();\n        form.Text = \"Incremental Refresh configuration:\";\n        form.AutoSize = true;\n        form.MinimumSize = new Size(450, 0);\n        form.FormBorderStyle = FormBorderStyle.FixedDialog;\n        form.MaximizeBox = false;\n        form.MinimizeBox = false;\n        \n        // Open the dialogue in the center of the screen\n        form.StartPosition = FormStartPosition.CenterScreen;\n        \n        // Set the AutoScaleMode property to Dpi\n        form.AutoScaleMode = AutoScaleMode.Dpi;\n        \n        // Add controls to form specified above\n        form.Controls.Add(storeDataLabel);\n        form.Controls.Add(storeDataTextBox);\n        form.Controls.Add(storeDataComboBox);\n        form.Controls.Add(refreshDataLabel);\n        form.Controls.Add(refreshDataTextBox);\n        form.Controls.Add(refreshDataComboBox);\n        form.Controls.Add(fullPeriodsCheckBox);\n        form.Controls.Add(okButton);\n        form.Controls.Add(cancelButton);\n        \n        // Draw the form\n        var result = form.ShowDialog();\n        \n        // Get the values of the user input if entered\n        if (result == DialogResult.OK)\n        {\n            // Enables the refresh policy\n            _Table.EnableRefreshPolicy = true;\n            \n            var storeDataValue = storeDataTextBox.Text;\n            var storeDataComboBoxValue = storeDataComboBox.SelectedItem.ToString();\n            var refreshDataValue = refreshDataTextBox.Text;\n            var refreshDataComboBoxValue = refreshDataComboBox.SelectedItem.ToString();\n            var fullPeriodsChecked = fullPeriodsCheckBox.Checked;\n        \n            // Display the input values in a message box\n            var message = string.Format(\n                \"Store data in the last: {0} {1}\" + \n                \"\\nRefresh data in the last: {2} {3}\" + \n                \"\\nRefresh only full periods: {4}\",\n                storeDataTextBox.Text,\n                storeDataComboBox.SelectedItem.ToString(),\n                refreshDataTextBox.Text,\n                refreshDataComboBox.SelectedItem.ToString(),\n                fullPeriodsCheckBox.Checked);\n        \n            Info(message);\n        \n            // Convert StoreDataGranularity to correct TOM Property\n            RefreshGranularityType StoreDataGranularity = RefreshGranularityType.Day;\n            switch (storeDataComboBox.SelectedItem.ToString())\n            {\n                case \"years\":\n                    StoreDataGranularity = RefreshGranularityType.Year;\n                    break;\n            \n                case \"quarters\":\n                    StoreDataGranularity = RefreshGranularityType.Quarter;\n                    break;\n            \n                case \"months\":\n                    StoreDataGranularity = RefreshGranularityType.Month;\n                    break;\n            \n                case \"days\":\n                    StoreDataGranularity = RefreshGranularityType.Day;\n                    break; \n            \n                default:\n                    Error(\"Bad selection for Incremental Granularity.\");\n                    break;\n            }\n\n        \n            // Convert IncrementalGranularity to correct TOM Property\n            RefreshGranularityType IncrementalPeriodGranularity = RefreshGranularityType.Year;\n            switch (refreshDataComboBox.SelectedItem.ToString())\n            {\n                case \"years\":\n                    IncrementalPeriodGranularity = RefreshGranularityType.Year;\n                    break;\n        \n                case \"quarters\":\n                    IncrementalPeriodGranularity = RefreshGranularityType.Quarter;\n                    break;\n        \n                case \"months\":\n                    IncrementalPeriodGranularity = RefreshGranularityType.Month;\n                    break;\n        \n                case \"days\":\n                    IncrementalPeriodGranularity = RefreshGranularityType.Day;\n                    break; \n        \n                default:\n                    Error ( \"Bad selection for Incremental Granularity.\" );\n                    break;\n            }\n        \n            // Convert RefreshCompletePeriods checkbox to correct TOM property\n            int RefreshCompletePeriods;\n            if ( fullPeriodsCheckBox.Checked == true )\n            { \n            RefreshCompletePeriods = -1;\n            }\n            else\n            {\n            RefreshCompletePeriods = 0;\n            }\n        \n            // Set incremental window: period to be refreshed\n            _Table.IncrementalGranularity = IncrementalPeriodGranularity;\n        \n            // Default: 30 days - change # if you want\n            _Table.IncrementalPeriods = Convert.ToInt16(refreshDataTextBox.Text);\n        \n            // Only refresh complete days. Change to 0 if you don't want.\n            _Table.IncrementalPeriodsOffset = RefreshCompletePeriods;\n            \n            // Set rolling window: period to be archived\n            // Granularity = day, can change to month, quarter, year...\n            _Table.RollingWindowGranularity = StoreDataGranularity;\n        \n            // Keep data for 1 year. Includes 1 full year and current partial year \n            //    i.e. if it is Nov 2023, keeps data from Jan 1, 2022. \n            //    On Jan 1, 2024, it will drop 2022 automatically.\n            _Table.RollingWindowPeriods = Convert.ToInt16(storeDataTextBox.Text);\n            \n            // If the selected date column is an integer of type YYYYMMDD...\n            if ( _ColumnDataType == DataType.Int64 )\n            {\n                // Add DateTimeToInt Function\n                var _DateTimeToInt = \n                    Model.AddExpression( \n                        \"fxDateTimeToInt\", \n                        @\"(x as datetime) => Date.Year(x) * 10000 + Date.Month(x) * 100 + Date.Day(x)\"\n            );\n        \n            _DateTimeToInt.SetAnnotation(\"PBI_ResultType\", \"Function\");\n            _DateTimeToInt.Kind = ExpressionKind.M;\n        \n            // Source expression obtained from the original M partition\n            _Table.SourceExpression = \n        \n                // Gets expression before final \"in\" keyword\n                _MExpression.Split(\"\\nin\")[0].TrimEnd() +\n        \n                // Adds comma and newline\n                \",\\n\" +\n        \n                // Adds step called \"Incremental Refresh\" for filtering\n                @\"    #\"\"Incremental Refresh\"\" = Table.SelectRows( \" +\n        \n                // Gets name of last step (after \"in\" keyword)\n                _MExpression.Split(\"\\nin\")[1].TrimStart() +\n        \n                // Adds 'each' keyword\n                @\", each \" +\n        \n                // Bases incremental refresh on current column name\n                _ColumnName +\n        \n                // Greater than or equal to RangeStart\n                @\" >= fxDateTimeToInt ( #\"\"RangeStart\"\" ) and \" +\n        \n                // and\n                _ColumnName +\n        \n                // Less than RangeEnd\n                @\" < fxDateTimeToInt ( #\"\"RangeEnd\"\" ) )\" +\n        \n                // re-add 'in' keyword\n                \"\\nin\\n\" +\n        \n                // Reference final step just added\n                @\"    #\"\"Incremental Refresh\"\"\";\n            }\n        \n        \n            // Otherwise treat it like a normal date/datetime column\n            else\n            {\n                // Source expression obtained from the original M partition\n                _Table.SourceExpression = \n                    // Gets expression before final \"in\" keyword\n                    _MExpression.Split(\"\\nin\")[0].TrimEnd() +\n        \n                    // Adds comma and newline\n                    \",\\n\" +\n                    \n                    // Adds step called \"Incremental Refresh\" for filtering\n                    @\"    #\"\"Incremental Refresh\"\" = Table.SelectRows( \" +\n                    \n                    // Gets name of last step (after \"in\" keyword)\n                    _MExpression.Split(\"\\nin\")[1].TrimStart() +\n                    \n                    // Adds 'each' keyword\n                    @\", each \" +\n                    \n                    // Bases incremental refresh on current column name\n                    _ColumnName +\n                    \n                    // Greater than or equal to RangeStart\n                    @\" >= Date.From ( #\"\"RangeStart\"\" ) and \" +\n                    \n                    // and\n                    _ColumnName +\n                    \n                    // Less than RangeEnd\n                    @\" < Date.From ( #\"\"RangeEnd\"\" ) )\" +\n                    \n                    // re-add 'in' keyword\n                    \"\\nin\\n\" +\n                    \n                    // Reference final step just added\n                    @\"    #\"\"Incremental Refresh\"\"\";\n            }\n        \n            // Success message for Refresh Policy configuration\n            Info ( \n                \"Successfully configured the Incremental Refresh policy.\\n\" + \n                \"\\nSelect the table and right-click on 'Apply Refresh Policy...'\" + \n                \"\\nSelect & peform a 'Full Refresh' of all new policy partitons that are created.\" \n            );\n            }\n        else if (result == DialogResult.Cancel)\n        {\n            // if the user clicks the Cancel button, close the form and exit the script\n            form.Close();\n            Error ( \"Cancelled configuration! Ending script without changes.\" );\n            return;\n        }\n    }\n    catch\n    {\n        Error( \"No valid column selected! Ending script without changes.\" );\n    }\n    \n}\ncatch\n{\n    Error( \"No valid table selected! Ending script without changes.\" );\n}\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 23,
      "Name": "5. Power Query\\2. Create & Replace M Parameter",
      "Enabled": "true",
      "Execute": "// This script creates a new M Parameter as a 'Shared Expression'.\n// It will also find the default value in all M partitions and replace them with the parameter object name.\n//#r \"System.Drawing\"\n\nusing System.Drawing;\nusing System.Text.RegularExpressions;\nusing System.Windows.Forms;\n\n// Hide the 'Running Macro' spinbox\nScriptHelper.WaitFormVisible = false;\n\n// Initialize variables\nstring _ParameterName = \"New Parameter\";\nstring _ParameterValue = \"ParameterValue\";\n\n// WinForms prompt to get Parameter Name / Value input\nusing (Form prompt = new Form())\n{\n    Font formFont = new Font(\"Segoe UI\", 11); \n\n    // Prompt config\n    prompt.AutoSize = true;\n    prompt.MinimumSize = new Size(380, 120);\n    prompt.Text = \"Create New M Parameter\";\n    prompt.StartPosition = FormStartPosition.CenterScreen;\n\n    // Find: label\n    Label parameterNameLabel = new Label() { Text = \"Enter Name:\" };\n    parameterNameLabel.Location = new Point(20, 20);\n    parameterNameLabel.AutoSize = true;\n    parameterNameLabel.Font = formFont;\n\n    // Textbox for inputing the substring text\n    TextBox parameterNameBox = new TextBox();\n    parameterNameBox.Width = 200;\n    parameterNameBox.Location = new Point(parameterNameLabel.Location.X + parameterNameLabel.Width + 20, parameterNameLabel.Location.Y - 4);\n    parameterNameBox.SelectedText = \"New Parameter\";\n    parameterNameBox.Font = formFont;\n\n    // Replace: label\n    Label parameterValueLabel = new Label() { Text = \"Enter Value:\" };\n    parameterValueLabel.Location = new Point(parameterNameLabel.Location.X, parameterNameLabel.Location.Y + parameterNameLabel.Height + 20);\n    parameterValueLabel.AutoSize = true;\n    parameterValueLabel.Font = formFont;\n\n    // Textbox for inputting the substring text\n    TextBox parameterValueBox = new TextBox() { Left = parameterValueLabel.Right + 20, Top = parameterValueLabel.Location.Y - 4, Width = parameterNameBox.Width };\n    parameterValueBox.SelectedText = \"Parameter Value\";\n    parameterValueBox.Font = formFont;\n\n    // OK Button\n    Button okButton = new Button() { Text = \"Create\", Left = 20, Width = 75, Top = parameterValueBox.Location.Y + parameterValueBox.Height + 20 };\n    okButton.MinimumSize = new Size(75, 25);\n    okButton.AutoSize = true;\n    okButton.Font = formFont;\n\n    // Cancel Button\n    Button cancelButton = new Button() { Text = \"Cancel\", Left = okButton.Location.X + okButton.Width + 10, Top = okButton.Location.Y };\n    cancelButton.MinimumSize = new Size(75, 25);\n    cancelButton.AutoSize = true;\n    cancelButton.Font = formFont;\n\n    // Button actions\n    okButton.Click += (sender, e) => { _ParameterName = parameterNameBox.Text; _ParameterValue = parameterValueBox.Text; prompt.DialogResult = DialogResult.OK; };\n    cancelButton.Click += (sender, e) => { prompt.DialogResult = DialogResult.Cancel; };\n\n    prompt.AcceptButton = okButton;\n    prompt.CancelButton = cancelButton;\n\n    prompt.Controls.Add(parameterNameLabel);\n    prompt.Controls.Add(parameterNameBox);\n    prompt.Controls.Add(parameterValueLabel);\n    prompt.Controls.Add(parameterValueBox);\n    prompt.Controls.Add(okButton);\n    prompt.Controls.Add(cancelButton);\n\n    // The user clicked OK, so perform the find-and-replace logic\n    if (prompt.ShowDialog() == DialogResult.OK)\n    {\n\n        // Creates the parameter\n        Model.AddExpression( \n            _ParameterName, \n            @\"\n        \"\"\" + _ParameterValue +\n        @\"\"\" meta\n        [\n            IsParameterQuery = true,\n            IsParameterQueryRequired = true,\n            Type = type text\n        ]\"\n        );\n        \n        \n        // Informs the user that the parameter was successfully created\n        Info ( \n            \"Successfully created a new parameter: \" + @\"\"\"\" +\n            _ParameterName + @\"\"\"\" +\n            \"\\nDefault value: \" + @\"\"\"\" +\n            _ParameterValue + @\"\"\"\");\n        \n        \n        // Finds the parameter default value in M Partitions & replaces with the parameter name\n        string _Find = @\"\"\"\" + _ParameterValue + @\"\"\"\";\n        string _Replace = @\"#\"\"\" + _ParameterName + @\"\"\"\";\n        \n        int _NrMPartitions = 0;\n        int _NrReplacements = 0;\n        var _ReplacementsList = new List<string>();\n        \n        foreach ( var _Tables in Model.Tables )\n        {\n            foreach ( var _p in _Tables.Partitions )\n            {\n                if ( _p.SourceType == PartitionSourceType.M )\n                {\n                    if ( _p.Expression != _p.Expression.Replace( _Find, _Replace ) )\n                    {\n                        _p.Expression = _p.Expression.Replace( _Find, _Replace );\n        \n                        // Tracks which M partitions were replaced (and how many)\n                        _NrReplacements = _NrReplacements + 1;\n                        _ReplacementsList.Add( _p.Name );\n                    }\n        \n                // Counts the total # M Partitions\n                _NrMPartitions = _NrMPartitions + 1;\n                }\n            }\n        }\n        \n        \n        // Makes a bulleted list of all the M partitions that were replaced\n        string _ReplacedPartitions = \" • \" + String.Join(\"\\n • \", _ReplacementsList );\n        \n        \n        // Informs \n        //      - Whether the Find & Replace was successful\n        //      - How many M partitions were replaced\n        //      - Which M partitions had the Find & Replace done\n        Info (\n            \"Successfully replaced\\n\\n \" +\n            _Find + \n            \"\\n\\n with: \\n\\n\" + \n            _Replace + \n            \"\\n\\n in \" + \n            Convert.ToString(_NrReplacements) +\n            \" of \" +\n            Convert.ToString(_NrMPartitions) +  \n            \" M Partitions:\\n\" +\n            _ReplacedPartitions\n        );\n\n    }\n    else\n    {\n    Error ( \"Cancelled input! Ended script without changes.\");\n    }\n}\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 24,
      "Name": "6. Other\\1. Load BPA",
      "Enabled": "true",
      "Execute": "System.Net.WebClient w = new System.Net.WebClient(); \r\n\r\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\r\nstring url = \"https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json\";\r\nstring downloadLoc = path+@\"\\TabularEditor\\BPARules.json\";\r\nw.DownloadFile(url, downloadLoc);",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 25,
      "Name": "6. Other\\2. Check Discourage Implicit Measures",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nif (!Model.DiscourageImplicitMeasures)\n{\n    // Show message box\n    DialogResult dialogResult14 = MessageBox.Show(\n        text: \"Set DiscourageImplicitMeasures to true?\\n\\nThis is in general recommended and needed for calculation groups.\",\n        caption: \"Discourage Implicit Measures\",\n        buttons: MessageBoxButtons.YesNo);\n\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\n    if (dialogResult14 == DialogResult.Yes)\n    {\n        Model.DiscourageImplicitMeasures = true;\n    }\n}\nelse\n{\n    // Show message box indicating it is already set to true\n    MessageBox.Show(\n        text: \"DiscourageImplicitMeasures is already set to true.\",\n        caption: \"Discourage Implicit Measures\",\n        buttons: MessageBoxButtons.OK,\n        icon: MessageBoxIcon.Information);\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 26,
      "Name": "6. Other\\3. PBI-Pimp-Script",
      "Enabled": "true",
      "Execute": "// Author: Alexander Korn\r\n// Created on: 5. December 2023\r\n// Modified on 3. April 2024\r\n\r\n\r\n// *********Description***********\r\n// Script asks for and adds the following items:\r\n// 1. Add a new Calculation Group for \"Time Intelligence\" Measures\r\n// 2. Adding a Date Dimension Table, the table is automatically marked as date table\r\n// 2.1 Adding a Function for Date Dimension, credit Lars Schreiber\r\n// 2.2 Adding a calc table for dimension\r\n// 3. Adding an Empty Measure Table\r\n// 4. Adding a Last Refresh Table\r\n// 5. Formats the DAX of ALL calculation items in the model\r\n// 6. All Key and ID columns: Set Summarize By to \"None\"\r\n// 7. Adds Explicit Measures based on defined aggregation, credit Thomas Martens\r\n// 8. Adding a Calc Group for \"Units\"\r\n// 9. Checking for DiscourageImplicitMeasures and ask to set to true\r\n// 10. Load BPA into TE - needs TE reopen\r\n// Variables to fill in:\r\n//     - Calc Group Name,\r\n//     - Date Table Name\r\n//     - Date Column Name\r\n//     - If YTD / FY measures shall be created and what the cutoff date for the FY is\r\n\r\n\r\n#r \"Microsoft.VisualBasic\"\r\nusing Microsoft.VisualBasic;\r\nusing System.Windows.Forms;\r\n\r\n// *********Variables to Modify from User if needed***********\r\n// Here you can modify the names\r\nstring tableNameEmptyMeasure = \"Measure\";\r\nstring tableNameLastRefresh = \"Last Refresh\";\r\nstring calctableCalendar = \"CalendarCalcTable\";\r\nstring columnNameLastRefresh = \"Last Refreshes\";\r\nstring LastRefreshMeasureName = \"Last Refresh Measure\";\r\nvar FromYear = \"2018\";\r\nvar ToYear = \"2024\";\r\nvar TimeIntelligenceCalculationGroupName = \"Time Intelligence\";\r\nvar CalcGroupUnitsName = \"Units\";\r\n\r\n// Here you can modify if you need Fiscal Year Time Intelligence Calculation Items\r\nbool GenerateYTD = true;\r\nbool GenerateFiscalYear = false;\r\nstring fiscalYearEndDate = \"07/31\";\r\n\r\n// do not modify below this line\r\n// Script starts ***********************************************************\r\n\r\n//Variables\r\nbool addtables;\r\nbool GenerateEmptyMeasureTable = false;\r\nbool GenerateLastRefreshTable = false;\r\nbool GenerateDateDimensionTable = false;\r\nbool GenerateDateDimensionTable2 = false;\r\nbool GenerateDateDimensionTable3 = false;\r\n\r\n\r\n// Checking if adding tables is possible otherwise prompt user ****************\r\n// normally this part is just skipped and not visible to the the user\r\ntry\r\n{\r\n    // Define the table name\r\n    string tableName = \"TestingTable\";\r\n    // Create a new table in the model\r\n    Table table = Model.AddTable(tableName);\r\n    // delete the table if adding was successful\r\n    var tableToDelete = Model.Tables[tableName];\r\n    tableToDelete.Delete();\r\n    addtables = true;\r\n}\r\ncatch (Exception ex)\r\n{\r\n    addtables = false;\r\n    DialogResult dialogResult = MessageBox.Show(text: \"Important Disclaimer: You are executing this script at your own risk!\\n\\nWarning: Adding tables will not be successful, except calculated tables. \\n\\nInstead of directly opening your model from an open instance of Power BI Desktop please save the model.bim file locally and reopen it afterwards.\\n\\nYou can still continue to run the script to apply other fixes. \\n\\nError message: \" + ex.Message, caption: \"Adding Tables Unsuccessful\", buttons: MessageBoxButtons.OKCancel);\r\n    if (dialogResult == DialogResult.Cancel)\r\n    {\r\n        return; // Cancel the script\r\n    }\r\n}\r\n\r\n// This is the first prompt to the user *****************************************************************************\r\nif (addtables)\r\n{\r\n    DialogResult dialogResult10 = MessageBox.Show(text: \"You are executing this script at your own risk!\\n\\nPlease make sure to save and reopen the model.bim file from the .pbix. The model.bim from the Power BI Project folder is currently not supported.\\n\\nThe following parameters can be defined directly within the script: \\n-Names for Tables \\n-Names for Calc Groups \\n-Time Intelligence Details \\n\\nDo you would like to proceed?\", caption: \"Important Disclaimer\", buttons: MessageBoxButtons.OKCancel);\r\n    if (dialogResult10 == DialogResult.Cancel)\r\n    {\r\n        return; // Cancel the script\r\n    }\r\n}\r\nDialogResult dialogResult18 = MessageBox.Show(text: \"Add Empty Measure table?\\n\\nThis will add just an empty table, used as container for all measures with subfolders. Either as power query table or as calculated table\", caption: \"Empty Measure Table\", buttons: MessageBoxButtons.YesNo);\r\nGenerateEmptyMeasureTable = (dialogResult18 == DialogResult.Yes);\r\n\r\n\r\n\r\nDialogResult dialogResult17 = MessageBox.Show(text: \"Set IsAvailableInMDX to False for all all columns ending with 'ID' or 'Key'? \\n\\nThis is a best practice to reduce memory. Please be aware that those column will not be available in Excel and will not work for DAX calculation like DISCTINCTCOUNT.\", caption: \"MDXAvailable False\", buttons: MessageBoxButtons.YesNo);\r\nbool MagicSauce = (dialogResult17 == DialogResult.Yes);\r\n\r\nDialogResult dialogResult15 = MessageBox.Show(text: \"Change the current aggregation to 'none' for all columns ending with 'Key' or 'ID'?\\n\\nThis is a best practice, but also helpful if you want to add explicit measures for all non key columns in a following step within this script.\", caption: \"Aggregation Key Columns\", buttons: MessageBoxButtons.YesNo);\r\nbool KeyColumnsAggregation = (dialogResult15 == DialogResult.Yes);\r\n\r\nDialogResult dialogResult13 = MessageBox.Show(text: \"Add Explicit Measures based on current aggregation?\\n\\nMake sure to use the correct aggregation for all of your columns. \\nProperty name to modify: Summarize By\", caption: \"Explicit Measure creation\", buttons: MessageBoxButtons.YesNo);\r\nbool ExplicitMeasure = (dialogResult13 == DialogResult.Yes);\r\n\r\n// This portion is only run if adding tables was possible **********************************\r\nif (addtables)\r\n{\r\n    DialogResult dialogResult1 = MessageBox.Show(text: \"Add Last Refresh table?\\n\\nThis also adds a measure which you can use in your report to display when the last refresh happend. \\nThis simple approach does not work if you have incremental refresh / multiple partitions set up.\", caption: \"Last Refresh Table\", buttons: MessageBoxButtons.YesNo);\r\n    GenerateLastRefreshTable = (dialogResult1 == DialogResult.Yes);\r\n\r\n    DialogResult dialogResult2 = MessageBox.Show(text: \"Add Date Dimension table? \\n\\nThe table is automatically marked as date table. \\nBasis is a Power Query Script\", caption: \"PQ: Calendar Dimension \", buttons: MessageBoxButtons.YesNo);\r\n    GenerateDateDimensionTable = (dialogResult2 == DialogResult.Yes);\r\n\r\n    DialogResult dialogResult20 = MessageBox.Show(text: \"Add Lars Schreiber's function for a calendar dimension table? \\n\\nThis adds a function for an ultimate calendar dimension. Just go afterwards to your power query and fill in the parameters for your calendar table. \\nDon't forget to mark the table as calendar table afterwards\", caption: \"Lars' PQ Function: Calendar Dimension\", buttons: MessageBoxButtons.YesNo);\r\n    GenerateDateDimensionTable2 = (dialogResult20 == DialogResult.Yes);\r\n\r\n}\r\n\r\nDialogResult dialogResult21 = MessageBox.Show(text: \"Add Date Dimension with Calculated Table? \\n\\nThis adds a calculuated table for a date dimension. \\n\\nWARNING: If you have birthdates or similar very old dates in your data model than this calculated table will cause problems. Make sure to mark the table as calendar table afterwards\", caption: \"Calculated Table: Calendar Dimension\", buttons: MessageBoxButtons.YesNo);\r\nGenerateDateDimensionTable3 = (dialogResult21 == DialogResult.Yes);\r\n\r\n// Getting the names of the calendar table and date column, this is also run if adding tables is not possible, because it is needed for the time intelligence calc group ************\r\nstring Table;\r\n\r\nif (addtables)\r\n{\r\n    Table = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"Calendar\");\r\n}\r\nelse\r\n{\r\n    Table = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"CalendarCalcTable\");\r\n}\r\nvar Column = Interaction.InputBox(\"Provide the name of the date column name\", \"Column Name\", \"Date\");\r\n\r\n\r\n// Asking the user if calc groups and formatting shall be applied ****************************************************************************************\r\nDialogResult dialogResult0 = MessageBox.Show(text: \"Add Time Intelligence Calc Group?\\n\\nThis calculation group will immediately provide the possibility for all measures to have various time intelligence calculation items for example measures like Delta to previous year (Y-1) as absolut, percent and of 100%\", caption: \"Time Intelligence Calculation Group\", buttons: MessageBoxButtons.YesNo);\r\nbool GenerateCalcGroupTimeInt = (dialogResult0 == DialogResult.Yes);\r\n\r\nDialogResult dialogResult12 = MessageBox.Show(text: \"Add Units Calculation Group for thousands and millions?\\n\\nThis simply divides the 'Selectedmeasure()' by 1k and 1mio with 'DIVIDE'.\", caption: \"Units Calculation Group\", buttons: MessageBoxButtons.YesNo);\r\nbool GenerateCalcGroupUnits = (dialogResult12 == DialogResult.Yes);\r\n\r\nDialogResult dialogResult5 = MessageBox.Show(text: \"Format ALL calculation items for the calculation groups? This is not formatting measures.\", caption: \"Format DAX calc items\", buttons: MessageBoxButtons.YesNo);\r\nbool FormatDAXCalcItems = (dialogResult5 == DialogResult.Yes);\r\n\r\nDialogResult dialogResult6 = MessageBox.Show(text: \"Format ALL DAX measures? \\n\\nThis is formatting ALL measures, therefore if you apply this script to an existing model and you have a lot of measures this can be a rather big impact.\", caption: \"Format ALL measures\", buttons: MessageBoxButtons.YesNo);\r\nbool FormatDAX = (dialogResult6 == DialogResult.Yes);\r\n\r\nDialogResult dialogResult16 = MessageBox.Show(text: \"Load BPA into TE? \\n\\nThis loads initially or updates all rules into Tabular Editor for the Best Practice Analyzer (BPA). The BPA is superpowerful tool to optimize your data model even further.\\n\\nYou will need to REOPEN Tabular Editor for this part to be applied.\", caption: \"Load BPA\", buttons: MessageBoxButtons.YesNo);\r\nbool LoadBPA = (dialogResult16 == DialogResult.Yes);\r\n\r\n\r\n// This portion is skipped if DiscourageImplicitMeasure is already set to true, otherwise the user is asked to change it*************************************************************\r\n// This being set to true is needed for calculation groups to work.\r\n\r\nif (!Model.DiscourageImplicitMeasures)\r\n{\r\n    // Show message box\r\n    DialogResult dialogResult14 = MessageBox.Show(\r\n        text: \"Set DiscourageImplicitMeasures to true?\\n\\nThis is in general recommended and needed for calculation groups.\",\r\n        caption: \"Discourage Implicit Measures\",\r\n        buttons: MessageBoxButtons.YesNo);\r\n\r\n    // If user clicks Yes, set DiscourageImplicitMeasures to true\r\n    if (dialogResult14 == DialogResult.Yes)\r\n    {\r\n        Model.DiscourageImplicitMeasures = true;\r\n    }\r\n}\r\n\r\n// Show the result of all of the previous selection *************************************************************************************************************************\r\n{\r\n    DialogResult dialogResult11 = MessageBox.Show(text:\r\n    \"Tables:\" +\r\n    \"\\n1. Create Last Refresh Table: \" + GenerateLastRefreshTable +\r\n    \"\\n   with name: \" + tableNameLastRefresh +\r\n    \"\\n2. Create Empty Measure Table: \" + GenerateEmptyMeasureTable +\r\n    \"\\n   with name: \" + tableNameEmptyMeasure +\r\n    \"\\n3. Create Date Dimension Table: \" + GenerateDateDimensionTable +\r\n    \"\\n  3.1 Date Dimension Table Name: '\" + Table + \"'\" +\r\n    \"\\n  3.2 Date Dimension Column Name: '\" + Column + \"'\" +\r\n    \"\\n  3.3 CalendarFunction added: \" + GenerateDateDimensionTable2 +\r\n    \"\\n  3.4 Calendar Calc Table added: \" + GenerateDateDimensionTable3 +\r\n\r\n    \"\\n\\nCalculation Groups:\" +\r\n    \"\\n4. Time Intelligence Calc Group: \" + GenerateCalcGroupTimeInt +\r\n    \"\\n   with name: \" + TimeIntelligenceCalculationGroupName +\r\n    \"\\n  4.1 YTD items: \" + GenerateYTD +\r\n    \"\\n  4.2 FiscalYear items: \" + GenerateFiscalYear +\r\n    \"\\n  4.3 FiscalYear cutoff date: \" + fiscalYearEndDate +\r\n    \"\\n5. Units Calc Group: \" + GenerateCalcGroupUnits +\r\n    \"\\n   with name: \" + CalcGroupUnitsName +\r\n\r\n    \"\\n\\nMeasures:\" +\r\n    \"\\n6. Create all Explicit Measures: \" + ExplicitMeasure +\r\n    \"\\n7. Format all Measures: \" + FormatDAX +\r\n    \"\\n8. Format all Calculation Items: \" + FormatDAXCalcItems +\r\n\r\n    \"\\n\\nOther:\" +\r\n    \"\\n9. Remove Aggregation for Key Columns: \" + KeyColumnsAggregation +\r\n    \"\\n10. Set AVAILABLEMDX to False: \" + MagicSauce +\r\n    \"\\n11. Load BPA: \" + LoadBPA\r\n\r\n\r\n    , caption: \"Summary of Selected Parameters\", buttons: MessageBoxButtons.OKCancel);\r\n    if (dialogResult11 == DialogResult.Cancel)\r\n    {\r\n        return; // Cancel the script\r\n    }\r\n}\r\n\r\n\r\n// Adding an empty measure table *********************************************************** \r\nif (GenerateEmptyMeasureTable)\r\n{\r\n    if (addtables)\r\n    {\r\n        try\r\n        {\r\n\r\n            // Create a new table in the model\r\n            Table table = Model.AddTable(tableNameEmptyMeasure);\r\n            // Add the \"Name of Measure\" column to the table\r\n            DataColumn column1 = table.AddDataColumn();\r\n            column1.Name = \"Name of Measure\";\r\n            column1.DataType = DataType.String;\r\n            column1.SourceColumn = \"Name of Measure\";\r\n            column1.IsHidden = true; // Hide the column\r\n            column1.SummarizeBy = AggregateFunction.None;\r\n            // Add the \"Description\" column to the table\r\n            DataColumn column2 = table.AddDataColumn();\r\n            column2.Name = \"Description\";\r\n            column2.DataType = DataType.String;\r\n            column2.SourceColumn = \"Description\";\r\n            column2.IsHidden = true; // Hide the column\r\n            column2.SummarizeBy = AggregateFunction.None;\r\n\r\n            if (!Model.Tables.Any(t => t.Name == tableNameEmptyMeasure))\r\n            {\r\n                throw new InvalidOperationException(\"Empty measure table does not exist in the model.\");\r\n            }\r\n\r\n            string mExpression = @\"\r\n    let\r\n        Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"\"i44FAA==\"\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"\"Name of Measure\"\" = _t, Description = _t])\r\n    in\r\n        Source\";\r\n\r\n\r\n            // Update existing partition\r\n            var partition = table.Partitions.First();\r\n            partition.Expression = mExpression;\r\n            partition.Mode = ModeType.Import; // Set the refresh policy to Import\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            MessageBox.Show(\"Adding Empty Measure table was not successful but the rest of the script was completed\\n\\nReason: \" + ex.Message);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // Assuming 'Model' represents your current Tabular Model context\r\n        // and 'Measure' is the name of the calculated table you've created.\r\n\r\n        // First, ensure the calculated table 'Measure' is added to the model. \r\n        // If it already exists, this code assumes it's being updated.\r\n        var table = Model.Tables[\"Measure\"]; // Get the table by name.\r\n\r\n        // Check if the table exists; if not, create it.\r\n        if (table == null)\r\n        {\r\n            table = Model.AddCalculatedTable(\"Measure\",\r\n                \"DATATABLE(\\\"MeasureName\\\", STRING, \\\"Description\\\", STRING, {{\\\"\\\",\\\"\\\"}})\");\r\n        }\r\n\r\n        // Now, iterate over all columns in the table and hide them.\r\n        foreach (var column in table.Columns)\r\n        {\r\n            column.IsHidden = true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Change SummarizeBy to None for All ID and Key columns ***********************************************************\r\nif (KeyColumnsAggregation)\r\n{\r\n    foreach (var table in Model.Tables)\r\n    {\r\n        foreach (var column in table.Columns)\r\n        {\r\n            if (column.Name.EndsWith(\"Key\") || column.Name.EndsWith(\"ID\"))\r\n            {\r\n                column.SummarizeBy = AggregateFunction.None;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Set IsAvailableInMDX to false; ***********************************************************\r\nif (MagicSauce)\r\n{\r\n    foreach (var table in Model.Tables)\r\n    {\r\n        foreach (var column in table.Columns)\r\n        {\r\n            if (column.Name.EndsWith(\"Key\") || column.Name.EndsWith(\"ID\"))\r\n            {\r\n                column.IsAvailableInMDX = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Create Explicit Measures for all tables for all columns with summarize by in the empty measure folder. ******************\r\nif (ExplicitMeasure)\r\n{\r\n    // Title: Auto-create explicit measures from all columns in all tables that have qualifying aggregation functions assigned \r\n    // Author of this part: Tom Martens, twitter.com/tommartens68\r\n    // Edited on 24/01/04 by: Alexander Korn (e.g. moving all measures to the empty measure table, creating one if has not been previously created, hiding all columns) \r\n    //  \r\n    // This script, when executed, will loop through all the tables and creates explicit measure for all the columns with qualifying\r\n    // aggregation functions.\r\n    // The qualifying aggregation functions are SUM, COUNT, MIN, MAX, AVERAGE.\r\n    // This script can create a lot of measures, as by default the aggregation function for columns with a numeric data type is SUM.\r\n    // So, it is a good idea to check all columns for the proper aggregation type, e.g. the aggregation type of id columns \r\n    // should be set to None, as it does not make any sense to aggregate id columns.\r\n    // An annotation:CreatedThrough is created with a value:CreateExplicitMeasures this will help to identify the measures created\r\n    // using this script.\r\n    // What is missing, the list below shows what might be coming in subsequent iterations of the script:\r\n    // - the base column property hidden is not set to true\r\n    // - no black list is used to prevent the creation of unwanted measures\r\n\r\n    // ***************************************************************************************************************\r\n    //the following variables are allowing controling the script\r\n    var overwriteExistingMeasures = 0; // 1 overwrites existing measures, 0 preserves existing measures\r\n\r\n    var measureNameTemplate = \"{0}\";\r\n    //\"{0} ({1}) - {2}\"; // String.Format is used to create the measure name. \r\n    //{0} will be replaced with the columnname (c.Name), {1} will be replaced with the aggregation function, and last but not least\r\n    //{2} will be replaced with the tablename (t.Name). Using t.Name is necessary to create a distinction between measure names if\r\n    //columns with the same name exist in different tables.\r\n    //Assuming the column name inside the table \"Fact Sale\" is \"Sales revenue\" and the aggregation function is SUM \r\n    //the measure name will be: \"Sales revenue (Sum) - Fact Sale\"\r\n\r\n    //store aggregation function that qualify for measure creation to the hashset aggFunctions\r\n    var aggFunctions = new HashSet<AggregateFunction>{\r\n    AggregateFunction.Default, //remove this line, if you do not want to mess up your measures list by automatically created measures for all the columns that have the Default AggregateFunction assigned\r\n    AggregateFunction.Sum,\r\n    AggregateFunction.Count,\r\n    AggregateFunction.Min,\r\n    AggregateFunction.Max,\r\n    AggregateFunction.Average\r\n};\r\n\r\n    //You have to be aware that by default this script will just create measures using the aggregate functions \"Sum\" or \"Count\" if\r\n    //the column has the aggregate function AggregateFunction.Default assigned, this is checked further down below.\r\n    //Also, if a column has the Default AggregateFunction assigned and is of the DataType\r\n    //DataType.Automatic, DataType.Unknown, or DataType.Variant, no measure is created automatically, this is checked further down below.\r\n    //dictDataTypeAggregateFunction = new Dictionary<DataType, string>();\r\n    //see this article for all the available data types: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.datatype?view=analysisservices-dotnet\r\n    //Of course you can change the aggregation function that will be used for different data types,\r\n    //as long as you are using \"Sum\" and \"Count\"\r\n    //Please be careful, if you change the aggregation function you might end up with multiplemeasures\r\n    var dictDataTypeAggregateFunction = new Dictionary<DataType, AggregateFunction>();\r\n    dictDataTypeAggregateFunction.Add(DataType.Binary, AggregateFunction.Count); //adding a key/value pair(s) to the dictionary using the Add() method\r\n    dictDataTypeAggregateFunction.Add(DataType.Boolean, AggregateFunction.Count);\r\n    dictDataTypeAggregateFunction.Add(DataType.DateTime, AggregateFunction.Count);\r\n    dictDataTypeAggregateFunction.Add(DataType.Decimal, AggregateFunction.Sum);\r\n    dictDataTypeAggregateFunction.Add(DataType.Double, AggregateFunction.Sum);\r\n    dictDataTypeAggregateFunction.Add(DataType.Int64, AggregateFunction.Sum);\r\n    dictDataTypeAggregateFunction.Add(DataType.String, AggregateFunction.Count);\r\n\r\n    // ***************************************************************************************************************\r\n    //all the stuff below this line should not be altered \r\n    //of course this is not valid if you have to fix my errors, make the code more efficient, \r\n    //or you have a thorough understanding of what you are doing\r\n\r\n    //store all the existing measures to the list listOfMeasures\r\n    var listOfMeasures = new List<string>();\r\n    foreach (var m in Model.AllMeasures)\r\n    {\r\n        listOfMeasures.Add(m.Name);\r\n    }\r\n\r\n    // Check if the \"Measure\" table exists, if not, create it\r\n    Table measureTable;\r\n    if (!Model.Tables.Any(t => t.Name == tableNameEmptyMeasure))\r\n    {\r\n        measureTable = Model.AddTable(tableNameEmptyMeasure);\r\n    }\r\n    else\r\n    {\r\n        measureTable = Model.Tables.First(t => t.Name == tableNameEmptyMeasure);\r\n    }\r\n\r\n    //loop across all tables\r\n    foreach (var t in Model.Tables)\r\n    {\r\n\r\n        //loop across all columns of the current table t\r\n        foreach (var c in t.Columns)\r\n        {\r\n\r\n            var currAggFunction = c.SummarizeBy; //cache the aggregation function of the current column c\r\n            var useAggFunction = AggregateFunction.Sum;\r\n            var theMeasureName = \"\"; // Name of the new Measure\r\n            var posInListOfMeasures = 0; //check if the new measure already exists <> -1\r\n\r\n            if (aggFunctions.Contains(currAggFunction)) //check if the current aggregation function qualifies for measure aggregation\r\n            {\r\n                //check if the current aggregation function is Default\r\n                if (currAggFunction == AggregateFunction.Default)\r\n                {\r\n                    // check if the datatype of the column is considered for measure creation\r\n                    if (dictDataTypeAggregateFunction.ContainsKey(c.DataType))\r\n                    {\r\n\r\n                        //some kind of sanity check\r\n                        if (c.DataType == DataType.Automatic || c.DataType == DataType.Unknown || c.DataType == DataType.Variant)\r\n                        {\r\n                            Output(\"No measure will be created for columns with the data type: \" + c.DataType.ToString() + \" (\" + c.DaxObjectFullName + \")\");\r\n                            continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n                        }\r\n\r\n                        //cache the aggregation function from the dictDataTypeAggregateFunction\r\n                        useAggFunction = dictDataTypeAggregateFunction[c.DataType];\r\n\r\n                        //some kind of sanity check\r\n                        if (useAggFunction != AggregateFunction.Count && useAggFunction != AggregateFunction.Sum)\r\n                        {\r\n                            Output(\"No measure will be created for the column: \" + c.DaxObjectFullName);\r\n                            continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n                        }\r\n                        theMeasureName = String.Format(measureNameTemplate, c.Name, useAggFunction.ToString(), t.Name); // Name of the new Measure\r\n                        posInListOfMeasures = listOfMeasures.IndexOf(theMeasureName); //check if the new measure already exists <> -1\r\n\r\n                    }\r\n                    else\r\n                    {\r\n\r\n                        continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n                    }\r\n\r\n                }\r\n                else\r\n                {\r\n\r\n                    useAggFunction = currAggFunction;\r\n                    theMeasureName = String.Format(measureNameTemplate, c.Name, useAggFunction.ToString(), t.Name); // Name of the new Measure\r\n                    posInListOfMeasures = listOfMeasures.IndexOf(theMeasureName); //check if the new measure already exists <> -1\r\n                }\r\n\r\n                //sanity check\r\n                if (theMeasureName == \"\")\r\n                {\r\n                    continue; //moves to the next item in the foreach loop, the next colum in the current table\r\n                }\r\n\r\n                // create the measure\r\n                if ((posInListOfMeasures == -1 || overwriteExistingMeasures == 1))\r\n                {\r\n                    if (overwriteExistingMeasures == 1)\r\n                    {\r\n                        foreach (var m in Model.AllMeasures.Where(m => m.Name == theMeasureName).ToList())\r\n                        {\r\n                            m.Delete();\r\n                        }\r\n                    }\r\n\r\n                    var newMeasure = measureTable.AddMeasure\r\n                    (\r\n                        theMeasureName                                                                      // Name of the new Measure\r\n                        , \"\" + useAggFunction.ToString().ToUpper() + \"(\" + c.DaxObjectFullName + \")\"        // DAX expression\r\n                        , t.DaxObjectFullName.Replace(\"'\", \"\") + c.DisplayFolder\r\n                    );\r\n\r\n                    c.IsHidden = true;\r\n                    newMeasure.SetAnnotation(\"CreatedThrough\", \"CreateExplicitMeasures\"); // flag the measures created through this script\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Creates Calculation Group for Units *******************************************************************************\r\n// only sticked with k and mio because billion in English is trillion in other languages such as German\r\n\r\nif (GenerateCalcGroupUnits)\r\n{\r\n    // Add a new Units Calculation Group \r\n    try\r\n    {\r\n        var calcGroup = Model.AddCalculationGroup();\r\n        calcGroup.Name = CalcGroupUnitsName;\r\n        calcGroup.Columns[\"Name\"].Name = CalcGroupUnitsName;\r\n        // Define calculation item data\r\n        var calculationItemData = new[]\r\n        {\r\n    new { Name = \"number\", Expression = \"SELECTEDMEASURE()\" },\r\n    new { Name = \"k\", Expression = \"DIVIDE(SELECTEDMEASURE(), 1000)\" },\r\n    new { Name = \"mio\", Expression = \"DIVIDE(SELECTEDMEASURE(), 1000000)\" }\r\n}.Where(item => item != null).ToArray();\r\n\r\n        // Add calculation items to the Calculation Group\r\n        foreach (var itemData in calculationItemData)\r\n        {\r\n            var item = calcGroup.AddCalculationItem();\r\n            item.Name = itemData.Name;\r\n            item.Expression = itemData.Expression;\r\n        }\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        MessageBox.Show(\"Adding the calc group units was not fully successful, but the rest of the script was completed\\n\\nReason: \" + ex.Message);\r\n    }\r\n\r\n}\r\n\r\n\r\n// Creates Calculation Group for Time Intelligence *******************************************************************************\r\nif (GenerateCalcGroupTimeInt)\r\n{\r\n    /* Uncomment here if you want input boxes for the following four variables, already defined all the way at the beginning as text within this script\r\n    var TimeIntelligenceCalculationGroupName = Interaction.InputBox(\"Provide the name of the calculation group name\",\"Calc group\",\"Time Intelligence\");\r\n\r\n    DialogResult dialogResult3 = MessageBox.Show(text:\"Generate Fiscal Year Calc Items?\", caption:\"Calc Group: Fiscal Year\", buttons:MessageBoxButtons.YesNo);\r\n    bool GenerateFiscalYear = (dialogResult3 == DialogResult.Yes);\r\n\r\n    if (GenerateFiscalYear)\r\n    {fiscalYearEndDate = Interaction.InputBox(\"Enter the fiscal year end date (MM/DD):\", \"Fiscal Year End Date\", fiscalYearEndDate);}\r\n\r\n    DialogResult dialogResult4 = MessageBox.Show(text:\"Generate YTD Calc Items?\", caption:\"Calc Group: YTD\", buttons:MessageBoxButtons.YesNo);\r\n    bool GenerateYTD = (dialogResult4 == DialogResult.Yes);            \r\n    */\r\n\r\n    // Add a new Time Intellignce Calculation Group **************************************************\r\n    try\r\n    {\r\n        var calcGroup = Model.AddCalculationGroup();\r\n        calcGroup.Name = TimeIntelligenceCalculationGroupName;\r\n        calcGroup.Columns[\"Name\"].Name = TimeIntelligenceCalculationGroupName;\r\n        // Define calculation item data\r\n        var calculationItemData = new[]\r\n        {\r\n        new { Name = \"AC\", Expression = \"SELECTEDMEASURE()\" },\r\n        new { Name = \"Y-1\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0}))\", Table, Column) },\r\n        new { Name = \"Y-2\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0}))\", Table, Column) },\r\n        new { Name = \"Y-3\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -3, YEAR), ALL({0}))\", Table, Column) },\r\n        GenerateYTD ? new { Name = \"YTD\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0}))\", Table, Column) }: null,\r\n        GenerateYTD ? new { Name = \"YTD-1\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0}))\", Table, Column) }: null,\r\n        GenerateYTD ? new { Name = \"YTD-2\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0}))\", Table, Column) }: null,\r\n        new { Name = \"abs. AC vs Y-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN AC - Y1\", Table, Column) },\r\n        new { Name = \"abs. AC vs Y-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN AC - Y2\", Table, Column) },\r\n        GenerateYTD ? new { Name = \"abs. AC vs YTD-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN AC - Y1\", Table, Column) }: null,\r\n        GenerateYTD ? new { Name = \"abs. AC vs YTD-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN AC - Y2\", Table, Column) }: null,\r\n        new { Name = \"AC vs Y-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), SAMEPERIODLASTYEAR({0}[{1}]), ALL({0})) RETURN DIVIDE(AC - Y1, Y1)\", Table, Column) },\r\n        new { Name = \"AC vs Y-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD({0}[{1}], -2, YEAR), ALL({0})) RETURN DIVIDE(AC - Y2, Y2)\", Table, Column) },\r\n        GenerateYTD ? new { Name = \"AC vs YTD-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN DIVIDE(AC - Y1, Y1)\", Table, Column) }: null,\r\n        GenerateYTD ? new { Name = \"AC vs YTD-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN DIVIDE(AC - Y2, Y2)\", Table, Column) }: null,\r\n        new { Name = \"achiev. AC vs Y-1\", Expression = string.Format(\"VAR AC = SELECTEDMEASURE() VAR Y1 = CALCULATE(SELECTEDMEASURE(), SAMEPERIODLASTYEAR({0}[{1}]), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y1 - AC ), 0 ) / Y1 ) )\", Table, Column) },\r\n        new { Name = \"achiev. AC vs Y-2\", Expression = string.Format(\"VAR AC = SELECTEDMEASURE() VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD({0}[{1}], -2, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y2 - AC ), 0 ) / Y2 ) )\", Table, Column) },\r\n        GenerateYTD ? new { Name = \"achiev. AC vs YTD-1\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -1, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y1 - AC ), 0 ) / Y1 ) )\", Table, Column) }: null,\r\n        GenerateYTD ? new { Name = \"achiev. AC vs YTD-2\", Expression = string.Format(\"VAR AC = TOTALYTD(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"12/31\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"12/31\\\"), -2, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y2 - AC ), 0 ) / Y2 ) )\", Table, Column) }: null,\r\n        GenerateFiscalYear ? new { Name = \"FYTD\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"{2}\\\"), ALL({0}))\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"FYTD-1\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -1, YEAR), ALL({0}))\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"FYTD-2\", Expression = string.Format(\"CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -2, YEAR), ALL({0}))\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"abs. AC vs FYTD-1\", Expression = string.Format(\"VAR AC = CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"{2}\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -1, YEAR), ALL({0})) RETURN AC - Y1\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"abs. AC vs FYTD-2\", Expression = string.Format(\"VAR AC = CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"{2}\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -2, YEAR), ALL({0})) RETURN AC - Y2\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"AC vs FYTD-1\", Expression = string.Format(\"VAR AC = CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"{2}\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -1, YEAR), ALL({0})) RETURN DIVIDE(AC - Y1, Y1)\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"AC vs FYTD-2\", Expression = string.Format(\"VAR AC = CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"{2}\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -2, YEAR), ALL({0})) RETURN DIVIDE(AC - Y2, Y2)\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"achiev. AC vs FYTD-1\", Expression = string.Format(\"VAR AC = CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"{2}\\\"), ALL({0})) VAR Y1 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -1, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y1 - AC ), 0 ) / Y1 ) )\", Table, Column, fiscalYearEndDate) } : null,\r\n        GenerateFiscalYear ? new { Name = \"achiev. AC vs FYTD-2\", Expression = string.Format(\"VAR AC = CALCULATE(SELECTEDMEASURE(), DATESYTD({0}[{1}], \\\"{2}\\\"), ALL({0})) VAR Y2 = CALCULATE(SELECTEDMEASURE(), DATEADD(DATESYTD({0}[{1}], \\\"{2}\\\"), -2, YEAR), ALL({0})) RETURN 1 - ( ( IFERROR( ( Y2 - AC ), 0 ) / Y2 ) )\", Table, Column, fiscalYearEndDate) } : null\r\n    }.Where(item => item != null).ToArray();\r\n        // Add calculation items to the Calculation Group\r\n        foreach (var itemData in calculationItemData)\r\n        {\r\n            var item = calcGroup.AddCalculationItem();\r\n            item.Name = itemData.Name;\r\n            item.Expression = itemData.Expression;\r\n        }\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        MessageBox.Show(\"Adding the calc group time intelligence was not fully successful, but the rest of the script was completed\\n\\nReason: \" + ex.Message);\r\n    }\r\n}\r\n\r\n// Formats the DAX of all calculation items in calc groups. Those are not measures ************************************************************\r\nif (FormatDAXCalcItems)\r\n{\r\n    // DAX Formatting all Measures\r\n    FormatDax(Model.AllCalculationItems);\r\n}\r\n\r\n// Formats the DAX of all measures.  *************************************************************************************************************************\r\nif (FormatDAX)\r\n{\r\n    // DAX Formatting all Measures\r\n    FormatDax(Model.AllMeasures);\r\n}\r\n\r\n\r\n// Creates a last Refresh Table *******************************************************************************************************\r\nif (GenerateLastRefreshTable)\r\n{\r\n    try\r\n    {\r\n        // Script adds a Last Refresh Table:\r\n        // Create a new table in the model\r\n        Table table = Model.AddTable(tableNameLastRefresh);\r\n\r\n        string measureDax = \"\\\"Last Refresh: \\\" & MAX('\" + tableNameLastRefresh + \"'[\" + columnNameLastRefresh + \"])\";\r\n\r\n\r\n        // Add the \"Column1\" column to the table\r\n        DataColumn column1 = table.AddDataColumn();\r\n        column1.Name = \"Column1\";\r\n        column1.DataType = DataType.String;\r\n        column1.SourceColumn = \"Column1\";\r\n        column1.IsHidden = true; // Hide the column\r\n                                 // Check if the table exists in the model\r\n        if (!Model.Tables.Any(t => t.Name == tableNameLastRefresh))\r\n        {\r\n            throw new InvalidOperationException(\"Table Last Refresh does not exist in the model.\");\r\n        }\r\n        // Define the M expression\r\n        string mExpression = @\"\r\n    let\r\n    #\"\"Today\"\" = #table({\"\"\" + columnNameLastRefresh + @\"\"\"}, {{DateTime.From(DateTime.LocalNow())}})\r\n    in\r\n        #\"\"Today\"\" \";\r\n        // Update existing partition\r\n        var partition = table.Partitions.First();\r\n        partition.Expression = mExpression;\r\n        partition.Mode = ModeType.Import; // Set the refresh policy to Import\r\n\r\n        // Creates a last Refresh Measure ****************************************************************************\r\n        var table2 = Model.Tables[tableNameEmptyMeasure];\r\n        var measurelastrefresh = table2.AddMeasure(LastRefreshMeasureName, measureDax, \"Meta\");\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        MessageBox.Show(\"Adding the Last Refresh table was not successful but the rest of the script was completed\\n\\nReason: \" + ex.Message);\r\n    }\r\n}\r\n\r\n\r\n// Creates a Date Dimension table *******************************************************************************\r\nif (GenerateDateDimensionTable)\r\n{\r\n    try\r\n    {\r\n        // Script adds a Date Dimension Table:\r\n        // Create a new table in the model\r\n        Table table = Model.AddTable(Table);\r\n        table.DataCategory = \"Time\";\r\n        // Add columns with specified names and data types, including SourceColumn\r\n        DataColumn dateColumn = table.AddDataColumn();\r\n        dateColumn.Name = Column;\r\n        dateColumn.DataType = DataType.DateTime;\r\n        dateColumn.IsKey = true;\r\n        dateColumn.SourceColumn = \"Date\";\r\n        DataColumn yearColumn = table.AddDataColumn();\r\n        yearColumn.Name = \"Year\";\r\n        yearColumn.DataType = DataType.Int64;\r\n        yearColumn.SourceColumn = \"Year\";\r\n        DataColumn monthColumn = table.AddDataColumn();\r\n        monthColumn.Name = \"Month\";\r\n        monthColumn.DataType = DataType.Int64;\r\n        monthColumn.SourceColumn = \"Month\";\r\n        DataColumn dayColumn = table.AddDataColumn();\r\n        dayColumn.Name = \"Day\";\r\n        dayColumn.DataType = DataType.Int64;\r\n        dayColumn.SourceColumn = \"Day\";\r\n        DataColumn dayNameColumn = table.AddDataColumn();\r\n        dayNameColumn.Name = \"DayName\";\r\n        dayNameColumn.DataType = DataType.String;\r\n        dayNameColumn.SourceColumn = \"DayName\";\r\n        DataColumn monthNameColumn = table.AddDataColumn();\r\n        monthNameColumn.Name = \"MonthName\";\r\n        monthNameColumn.DataType = DataType.String;\r\n        monthNameColumn.SourceColumn = \"MonthName\";\r\n        DataColumn quarterColumn = table.AddDataColumn();\r\n        quarterColumn.Name = \"Quarter\";\r\n        quarterColumn.DataType = DataType.Int64;\r\n        quarterColumn.SourceColumn = \"Quarter\";\r\n        DataColumn weekOfYearColumn = table.AddDataColumn();\r\n        weekOfYearColumn.Name = \"WeekOfYear\";\r\n        weekOfYearColumn.DataType = DataType.Int64;\r\n        weekOfYearColumn.SourceColumn = \"WeekOfYear\";\r\n        DataColumn yearMonthColumn = table.AddDataColumn();\r\n        yearMonthColumn.Name = \"YearMonth\";\r\n        yearMonthColumn.DataType = DataType.String;\r\n        yearMonthColumn.SourceColumn = \"YearMonth\";\r\n        DataColumn yearMonthCodeColumn = table.AddDataColumn();\r\n        yearMonthCodeColumn.Name = \"YearMonth Code\";\r\n        yearMonthCodeColumn.DataType = DataType.String;\r\n        yearMonthCodeColumn.SourceColumn = \"YearMonth Code\";\r\n\r\n        // Check if the table exists in the model\r\n        if (!Model.Tables.Any(t => t.Name == Table))\r\n        {\r\n            throw new InvalidOperationException(\"Table Date Dimension does not exist in the model.\");\r\n        }\r\n        // Define the M expression\r\n        string mExpression = @\"\r\n    let\r\n        // configurations start\r\n        Today=Date.From(DateTime.LocalNow()), // today's date\r\n        FromYear =\" + FromYear + @\", // set the start year of the date dimension. dates start from 1st of January of this year\r\n        ToYear=\" + ToYear + @\", // set the end year of the date dimension. dates end at 31st of December of this year\r\n        StartofFiscalYear=7, // set the month number that is start of the financial year. example; if fiscal year start is July, value is 7\r\n        firstDayofWeek=Day.Monday, // set the week's start day, values: Day.Monday, Day.Sunday....\r\n        // configuration end\r\n        FromDate=#date(FromYear,1,1),\r\n        ToDate=#date(ToYear,12,31),\r\n        Source=List.Dates(\r\n            FromDate,\r\n            Duration.Days(ToDate-FromDate)+1,\r\n            #duration(1,0,0,0)\r\n        ),\r\n        #\"\"Converted to Table\"\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\r\n        #\"\"Renamed Columns\"\" = Table.RenameColumns(#\"\"Converted to Table\"\",{{\"\"Column1\"\", \"\"Date\"\"}}),\r\n        #\"\"Changed Type\"\" = Table.TransformColumnTypes(#\"\"Renamed Columns\"\",{{\"\"Date\"\", type date}}),\r\n        #\"\"Added Custom\"\" = Table.AddColumn(#\"\"Changed Type\"\", \"\"Custom\"\", each [\r\n            Year = Date.Year([Date]),\r\n            StartOfYear = Date.StartOfYear([Date]),\r\n            EndOfYear = Date.EndOfYear([Date]),\r\n            Month = Date.Month([Date]),\r\n            StartOfMonth = Date.StartOfMonth([Date]),\r\n            EndOfMonth = Date.EndOfMonth([Date]),\r\n            DaysInMonth = Date.DaysInMonth([Date]),\r\n            Day = Date.Day([Date]),\r\n            DayName = Date.DayOfWeekName([Date]),\r\n            DayOfWeek = Date.DayOfWeek([Date], firstDayofWeek),\r\n            DayOfYear = Date.DayOfYear([Date]),\r\n            MonthName = Date.MonthName([Date]),\r\n            Quarter = Date.QuarterOfYear([Date]),\r\n            StartOfQuarter = Date.StartOfQuarter([Date]),\r\n            EndOfQuarter = Date.EndOfQuarter([Date]),\r\n            WeekOfYear = Date.WeekOfYear([Date], firstDayofWeek),\r\n            WeekOfMonth = Date.WeekOfMonth([Date], firstDayofWeek),\r\n            StartOfWeek = Date.StartOfWeek([Date], firstDayofWeek),\r\n            EndOfWeek = Date.EndOfWeek([Date], firstDayofWeek)\r\n        ]),\r\n        #\"\"Expanded Custom\"\" = Table.ExpandRecordColumn(#\"\"Added Custom\"\", \"\"Custom\"\", {\"\"Year\"\", \"\"StartOfYear\"\", \"\"EndOfYear\"\", \"\"Month\"\", \"\"StartOfMonth\"\", \"\"EndOfMonth\"\", \"\"DaysInMonth\"\", \"\"Day\"\", \"\"DayName\"\", \"\"DayOfWeek\"\", \"\"DayOfYear\"\", \"\"MonthName\"\", \"\"Quarter\"\", \"\"StartOfQuarter\"\", \"\"EndOfQuarter\"\", \"\"WeekOfYear\"\", \"\"WeekOfMonth\"\", \"\"StartOfWeek\"\", \"\"EndOfWeek\"\"}, {\"\"Year\"\", \"\"StartOfYear\"\", \"\"EndOfYear\"\", \"\"Month\"\", \"\"StartOfMonth\"\", \"\"EndOfMonth\"\", \"\"DaysInMonth\"\", \"\"Day\"\", \"\"DayName\"\", \"\"DayOfWeek\"\", \"\"DayOfYear\"\", \"\"MonthName\"\", \"\"Quarter\"\", \"\"StartOfQuarter\"\", \"\"EndOfQuarter\"\", \"\"WeekOfYear\"\", \"\"WeekOfMonth\"\", \"\"StartOfWeek\"\", \"\"EndOfWeek\"\"}),\r\n        FiscalMonthBaseIndex=13-StartofFiscalYear,\r\n        adjustedFiscalMonthBaseIndex=if(FiscalMonthBaseIndex>=12 or FiscalMonthBaseIndex<0) then 0 else FiscalMonthBaseIndex,\r\n        #\"\"Added CustomA\"\" = Table.AddColumn(#\"\"Expanded Custom\"\", \"\"FiscalBaseDate\"\", each Date.AddMonths([Date],adjustedFiscalMonthBaseIndex)),\r\n        #\"\"Changed Type2\"\" = Table.TransformColumnTypes(#\"\"Added CustomA\"\",{{\"\"FiscalBaseDate\"\", type date}}),\r\n        #\"\"Added CustomB\"\" = Table.AddColumn(#\"\"Changed Type2\"\", \"\"Custom2\"\", each [\r\n            Fiscal Year = Date.Year([FiscalBaseDate]),\r\n            Fiscal Quarter = Date.QuarterOfYear([FiscalBaseDate]),\r\n            Fiscal Month = Date.Month([FiscalBaseDate]),\r\n            YearMonth = Date.ToText([Date], \"\"yyyy MMM\"\"),\r\n            YearMonth Code = Date.ToText([Date], \"\"yyyyMM\"\")\r\n        ]),\r\n        #\"\"Expanded Custom2\"\" = Table.ExpandRecordColumn(#\"\"Added CustomB\"\", \"\"Custom2\"\", {\"\"Fiscal Year\"\", \"\"Fiscal Quarter\"\", \"\"Fiscal Month\"\", \"\"Age\"\", \"\"Month Offset\"\", \"\"Year Offset\"\", \"\"Quarter Offset\"\", \"\"YearMonth\"\", \"\"YearMonth Code\"\"}, {\"\"Fiscal Year\"\", \"\"Fiscal Quarter\"\", \"\"Fiscal Month\"\", \"\"Age\"\", \"\"Month Offset\"\", \"\"Year Offset\"\", \"\"Quarter Offset\"\", \"\"YearMonth\"\", \"\"YearMonth Code\"\"}),\r\n        #\"\"Extracted Days\"\" = Table.TransformColumns(#\"\"Expanded Custom2\"\",{{\"\"Age\"\", Duration.Days, Int64.Type}}),\r\n        #\"\"Renamed Columns1\"\" = Table.RenameColumns(#\"\"Extracted Days\"\",{{\"\"Age\"\", \"\"Day Offset\"\"}}),\r\n        #\"\"Changed Type1\"\" = Table.TransformColumnTypes(#\"\"Renamed Columns1\"\",{{\"\"StartOfYear\"\", type date}, {\"\"EndOfYear\"\", type date}, {\"\"StartOfMonth\"\", type date}, {\"\"EndOfMonth\"\", type date}, {\"\"StartOfQuarter\"\", type date}, {\"\"EndOfQuarter\"\", type date}, {\"\"StartOfWeek\"\", type date}, {\"\"EndOfWeek\"\", type date}}),\r\n        #\"\"Removed Other Columns\"\" = Table.SelectColumns(#\"\"Changed Type1\"\",{\"\"Date\"\", \"\"Year\"\", \"\"Month\"\", \"\"Day\"\", \"\"DayName\"\", \"\"MonthName\"\", \"\"Quarter\"\", \"\"WeekOfYear\"\", \"\"YearMonth\"\", \"\"YearMonth Code\"\"}),\r\n    #\"\"Renamed Columns2\"\" = Table.RenameColumns(#\"\"Extracted Days\"\",{{\"\"Date\"\", \"\"\" + Column + @\"\"\"}})\r\n    in\r\n        #\"\"Renamed Columns2\"\" \";\r\n\r\n\r\n        // Update existing partition\r\n        var partition = table.Partitions.First();\r\n        partition.Expression = mExpression;\r\n        partition.Mode = ModeType.Import; // Set the refresh policy to Import\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        MessageBox.Show(\"Adding the Date Dimension Table was not successful but the rest of the script was completed\\n\\nReason: \" + ex.Message);\r\n    }\r\n}\r\n\r\n//Load or Update BPA Rules into Tabular Editor\r\nif (LoadBPA)\r\n{\r\n    System.Net.WebClient w = new System.Net.WebClient();\r\n\r\n    string path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\r\n    string url = \"https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json\";\r\n    string downloadLoc = path + @\"\\TabularEditor\\BPARules.json\";\r\n    w.DownloadFile(url, downloadLoc);\r\n}\r\n\r\nif (GenerateDateDimensionTable3)\r\n{// Define the name of the calculated table\r\n    string tableName = calctableCalendar;\r\n\r\n    // Define the DAX expression for the calculated table\r\n    string tableExpression = @\"\r\nVAR all_dates = CALENDARAUTO()\r\nRETURN\r\n    ADDCOLUMNS(\r\n        all_dates,\r\n        \"\"DateKey\"\", VALUE(FORMAT([Date], \"\"YYYYMMDD\"\")),\r\n        \"\"Year\"\", YEAR([Date]),\r\n        \"\"Quarter\"\", QUARTER([Date]),\r\n        \"\"Month\"\", MONTH([Date]),\r\n        \"\"End of Month\"\", EOMONTH([Date], 0),\r\n        \"\"Week of Year\"\", WEEKNUM([Date]),\r\n        \"\"Weekday\"\", WEEKDAY([Date])\r\n    )\r\n\";\r\n\r\n    // Add the calculated table to the model\r\n    var table = Model.AddCalculatedTable(tableName, tableExpression);\r\n\r\n}\r\n\r\n\r\nif (GenerateDateDimensionTable2)\r\n{\r\n    try\r\n    {\r\n        // Define the name of the table\r\n        string expressionName = \"CalendarFunction\";\r\n\r\n        // Check if the table with the name 'CalendarFunction' already exists in the model\r\n        if (Model.Expressions.Any(e => e.Name == expressionName))\r\n        {\r\n            throw new InvalidOperationException(\"Function already exists in the model.\");\r\n        }\r\n\r\n\r\n\r\n\r\n        // Define the M expression as a string - Replace this with your actual Power Query M script\r\n        string mExpression = @\"\r\nlet\r\n    \r\nfn = (StartYear, YearsIntoFuture, optional Culture, optional StartFiscalYear, optional WeekStart) =>\r\n\r\nlet\r\n/*\r\nYearsIntoFuture = 2,\r\nStartYear = 2017, \r\nCulture = \"\"de-de\"\", \r\nStartFiscalYear = \"\"Feb\"\",\r\nWeekStart = \"\"Tue\"\", \r\n*/\r\n    Today = Date.From(DateTime.LocalNow()),\r\n    EndYear = Date.Year(Date.From(DateTime.LocalNow())) + YearsIntoFuture, \r\n    StartFiscYear = if StartFiscalYear = null then \"\"Jan\"\" else StartFiscalYear,\r\n    GetStartDay = if StartFiscYear = \"\"Jan\"\" then #date(StartYear,1,1) else Date.FromText(\"\"01.\"\"&StartFiscYear &Number.ToText(StartYear)),\r\n    GetEndDay = if StartFiscYear = \"\"Jan\"\" then #date(EndYear,12,31) else Date.EndOfMonth( Date.AddMonths( Date.AddYears( Date.FromText(\"\"01.\"\"&StartFiscYear &Number.ToText(EndYear)), 1), -1) ),\r\n    GetCultureDefaultGermany = if Culture = null then \"\"de-de\"\" else Culture, \r\n    DayCount = Duration.Days(Duration.From(GetEndDay - GetStartDay)) + 1, \r\n    GetListOfDates = List.Dates(GetStartDay,DayCount,#duration(1,0,0,0)), \r\n    TableFromList = Table.FromList(GetListOfDates, Splitter.SplitByNothing()),    \r\n    ChangedType = Table.TransformColumnTypes(TableFromList,{{\"\"Column1\"\", type date}}), \r\n    Date = Table.Buffer( Table.RenameColumns(ChangedType,{{\"\"Column1\"\", \"\"Date\"\"}}) ),\r\n    #\"\"AddFull date Description\"\" = Table.AddColumn(Date, \"\"Full Date Description\"\", each Date.ToText([Date], \"\"dd. MMMM yyyy\"\", Culture), type text),\r\n    \r\n    //================================================\r\n    DetermineWeekStart = \r\n        if WeekStart = null then \r\n          1 \r\n        else  \r\n            List.Select( {\r\n              [Day=\"\"Mo\"\", WeekStart= Day.Monday],\r\n              [Day=\"\"Tu\"\", WeekStart= Day.Tuesday],\r\n              [Day=\"\"We\"\", WeekStart= Day.Wednesday],\r\n              [Day=\"\"Th\"\", WeekStart= Day.Thursday],\r\n              [Day=\"\"Fr\"\", WeekStart= Day.Friday],\r\n              [Day=\"\"Sa\"\", WeekStart= Day.Saturday],\r\n              [Day=\"\"Su\"\", WeekStart= Day.Sunday]\r\n              }, each _[Day] = WeekStart ){0}[WeekStart] ,\r\n    //================================================\r\n    \r\n    AddWeekDaySort = Table.AddColumn(#\"\"AddFull date Description\"\", \"\"Day of Week #\"\", each Date.DayOfWeek([Date], DetermineWeekStart) + 1, Int64.Type),\r\n    AddMonthDaySort = Table.AddColumn(AddWeekDaySort, \"\"Day of Month #\"\", each Date.Day([Date]), Int64.Type),\r\n    #\"\"Day of Year added\"\" = Table.AddColumn(AddMonthDaySort, \"\"Day of Year #\"\", each Date.DayOfYear([Date]), Int64.Type),\r\n    AddDayKey = Table.AddIndexColumn(#\"\"Day of Year added\"\", \"\"DayKey #\"\", 1, 1, Int64.Type),\r\n    AddDayName = Table.AddColumn(AddDayKey, \"\"Name of the Day (DDDD)\"\", each Date.DayOfWeekName([Date], Culture), type text),\r\n    AddDaysName2digits = Table.AddColumn(AddDayName, \"\"Name of the Day (DD)\"\", each Date.ToText([Date],\"\"ddd\"\", Culture), type text),\r\n    AddDaysName1digit = Table.AddColumn(AddDaysName2digits, \"\"Name of the Day (D)\"\", each Text.Start(Date.DayOfWeekName([Date], Culture),1) & Text.Repeat(Character.FromNumber(8203), [#\"\"Day of Week #\"\"]), type text),\r\n    WT_WE_flag = Table.AddColumn(AddDaysName1digit, \"\"Weekday_Flag\"\", each if [#\"\"Day of Week #\"\"] < 6 then \"\"Weekday\"\" else \"\"Weekend\"\", type text),\r\n    AddWeekOfYear = Table.AddColumn(WT_WE_flag, \"\"Week #\"\", each Date.WeekOfYear([Date]), Int64.Type),\r\n    #\"\"Week Start added\"\" = Table.AddColumn(AddWeekOfYear, \"\"Week Start\"\", each Date.StartOfWeek([Date]), type date),\r\n    #\"\"Weekend added\"\" = Table.AddColumn(#\"\"Week Start added\"\", \"\"Week End\"\", each Date.EndOfWeek([Date]), type date),\r\n    AddYearWeek = Table.AddColumn(#\"\"Weekend added\"\", \"\"YearWeek #\"\", each Date.Year([Date])*100+[#\"\"Week #\"\"], Int64.Type),\r\n    TableWeekKey = /*List.Distinct(#\"\"Changed Type4\"\"[YearWeek])*/ Table.AddIndexColumn(Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(List.Sort(List.Distinct(AddYearWeek[#\"\"YearWeek #\"\"]),Order.Ascending), Splitter.SplitByNothing(), null, null, ExtraValues.Error),{{\"\"Column1\"\", \"\"YearWeek\"\"}}),{{\"\"YearWeek\"\", Int64.Type}}), \"\"WeekKey #\"\", 1, 1),\r\n    AddWeekKey = Table.NestedJoin(AddYearWeek,{\"\"YearWeek #\"\"},TableWeekKey,{\"\"YearWeek\"\"},\"\"WK\"\",JoinKind.LeftOuter),\r\n    #\"\"Expanded WK\"\" = Table.ExpandTableColumn(AddWeekKey, \"\"WK\"\", {\"\"WeekKey #\"\"}, {\"\"WeekKey #\"\"}),\r\n    RemovedYearWeek = Table.RemoveColumns(#\"\"Expanded WK\"\",{\"\"YearWeek #\"\"}),\r\n    AddKW_Year = Table.AddColumn(RemovedYearWeek, \"\"Week Year\"\", each \"\"KW\"\"&Text.PadStart(Number.ToText([#\"\"Week #\"\"]),2,\"\"0\"\") &\"\" \"\"&Number.ToText(Date.Year([Date])), type text),\r\n    AddYear_KW = Table.AddColumn(AddKW_Year, \"\"Year Week\"\", each Number.ToText(Date.Year([Date])) &\"\" \"\"&\"\"KW\"\"&Text.PadStart(Number.ToText([#\"\"Week #\"\"]),2,\"\"0\"\"), type text),\r\n    fnGetIsoWeekNumber = (MyDate as date) =>\r\n      //Source --> https://blogs.office.com/en-us/2009/06/30/week-numbers-in-excel/\r\n    let\r\n      //MyDate = #date(2016,1,3),\r\n      Part1 = Number.From(MyDate) - Number.From(#date(Date.Year(Date.From(Number.From(MyDate) - (Date.DayOfWeek(Date.AddDays(MyDate,-1), Day.Sunday) + 1) + 4)),1,3)),\r\n      Part2 = Date.DayOfWeek(#date(Date.Year(Date.From(Number.From(MyDate) - (Date.DayOfWeek(Date.AddDays(MyDate,-1), Day.Sunday) +1) + 4)),1,3), Day.Sunday)+1 + 5,\r\n      ISOWeekNumber = Number.IntegerDivide(Part1 + Part2, 7)\r\n    in\r\n      ISOWeekNumber,\r\n    AddIsoWeek = Table.AddColumn(AddYear_KW, \"\"IsoKW #\"\", each fnGetIsoWeekNumber([Date]), Int64.Type),\r\n    AddIsoYear = Table.AddColumn(AddIsoWeek,\"\"IsoYear #\"\",each Date.Year(Date.AddDays([Date],3 - Date.DayOfWeek([Date], 1))), Int64.Type),\r\n    AddIsoYear_IsoKW = Table.AddColumn(AddIsoYear, \"\"IsoYear IsoKW\"\", each Text.From([#\"\"IsoYear #\"\"]) &  \"\" KW\"\" & Text.PadStart(Text.From([#\"\"IsoKW #\"\"]),2,\"\"0\"\") , type text),\r\n    AddIsoKW_IsoYear = Table.AddColumn(AddIsoYear_IsoKW, \"\"IsoKW IsoYear\"\", each \"\"KW\"\" & Text.PadStart(Text.From([#\"\"IsoKW #\"\"]),2,\"\"0\"\") &\"\" \"\"&Text.From([#\"\"IsoYear #\"\"]), type text),\r\n    GetIsoCalendarWeekKey = Table.AddIndexColumn( Table.Distinct( Table.SelectColumns(AddIsoKW_IsoYear, {\"\"IsoYear IsoKW\"\"}), {\"\"IsoYear IsoKW\"\"}), \"\"IsoKWKey #\"\", 1, 1),\r\n    AddIsoCalendarWeekKey = Table.AddJoinColumn(AddIsoKW_IsoYear, {\"\"IsoYear IsoKW\"\"}, GetIsoCalendarWeekKey, {\"\"IsoYear IsoKW\"\"}, \"\"NEW\"\"),\r\n    ExpandIsoCalendarWeekKey = Table.ExpandTableColumn(AddIsoCalendarWeekKey, \"\"NEW\"\", {\"\"IsoKWKey #\"\"}, {\"\"IsoKWKey #\"\"}),\r\n    AddMonthSort = Table.AddColumn(ExpandIsoCalendarWeekKey, \"\"Month #\"\", each Date.Month([Date]), Int64.Type),\r\n    AddMonthName = Table.AddColumn(AddMonthSort, \"\"Month (MMMM)\"\", each Date.MonthName([Date], Culture), type text),\r\n    AddMonthName3digits = Table.AddColumn(AddMonthName, \"\"Month (MMM)\"\", each Date.ToText([Date], \"\"MMM\"\", Culture), type text),\r\n    AddMonthName1digit = Table.AddColumn(AddMonthName3digits, \"\"Month (M)\"\", each Text.Start(Date.MonthName([Date], Culture),1) & Text.Repeat(Character.FromNumber(8203), [#\"\"Month #\"\"]), type text),\r\n    AddMonthNameShort_Year = Table.AddColumn(AddMonthName1digit, \"\"Month (MMM) Year\"\", each [#\"\"Month (MMM)\"\"] &\"\" \"\"& Number.ToText(Date.Year([Date])), type text),\r\n#\"\"Add Year Month (MMM)\"\" = Table.AddColumn(AddMonthNameShort_Year, \"\"Year Month (MMM)\"\", each Number.ToText(Date.Year([Date])) &\"\" \"\"&[#\"\"Month (MMM)\"\"], type text),\r\nAddYearMonth = Table.TransformColumnTypes(Table.AddColumn(#\"\"Add Year Month (MMM)\"\", \"\"YearMonth #\"\", each Date.Year([Date])*100 + [#\"\"Month #\"\"]),{{\"\"YearMonth #\"\", Int64.Type}}),\r\nTableYearMonth = Table.AddIndexColumn(Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(List.Sort(List.Distinct(AddYearMonth[#\"\"YearMonth #\"\"]),Order.Ascending), Splitter.SplitByNothing(), null, null, ExtraValues.Error),{{\"\"Column1\"\", \"\"YearMonth\"\"}}),{{\"\"YearMonth\"\", Int64.Type}}), \"\"YearMonthKey\"\", 1, 1),\r\n#\"\"Merged Queries\"\" = Table.NestedJoin(AddYearMonth,{\"\"YearMonth #\"\"},TableYearMonth,{\"\"YearMonth\"\"},\"\"MK\"\",JoinKind.LeftOuter),\r\n#\"\"Expanded MK\"\" = Table.ExpandTableColumn(#\"\"Merged Queries\"\", \"\"MK\"\", {\"\"YearMonthKey\"\"}, {\"\"MonthKey #\"\"}),\r\n#\"\"Removed Columns1\"\" = Table.RemoveColumns(#\"\"Expanded MK\"\",{\"\"YearMonth #\"\"}),\r\nAddSoM = Table.AddColumn(#\"\"Removed Columns1\"\", \"\"StartOfMonth\"\", each Date.StartOfMonth([Date]), type date),\r\nAddEoM = Table.AddColumn(AddSoM, \"\"EndOfMonth\"\", each Date.EndOfMonth([Date]), type date),\r\nAddQuarter = Table.AddColumn(AddEoM, \"\"Quarter #\"\", each Date.QuarterOfYear([Date]), Int64.Type),\r\nAddQuarterName = Table.AddColumn(AddQuarter, \"\"Quarter\"\", each \"\"Q\"\" & Number.ToText([#\"\"Quarter #\"\"]), type text),\r\nAddQuarter_Year = Table.AddColumn(AddQuarterName, \"\"Quarter Year\"\", each \"\"Q\"\"&Number.ToText([#\"\"Quarter #\"\"]) &\"\"-\"\"&Number.ToText(Date.Year([Date])), type text),\r\nAddYear_Quarter = Table.AddColumn(AddQuarter_Year, \"\"Year Quarter\"\", each Number.ToText(Date.Year([Date])) & \"\"-Q\"\" & Number.ToText([#\"\"Quarter #\"\"]), type text),\r\nAddYearQuarter = Table.AddColumn(AddYear_Quarter, \"\"Year Quarter #\"\", each Date.Year([Date]) * 100 + [#\"\"Quarter #\"\"], Int64.Type),\r\nTableYearQuarter = Table.AddIndexColumn(Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(List.Sort(List.Distinct(#\"\"AddYearQuarter\"\"[#\"\"Year Quarter #\"\"]),Order.Ascending), Splitter.SplitByNothing(), null, null, ExtraValues.Error),{{\"\"Column1\"\", \"\"YearQuarter\"\"}}),{{\"\"YearQuarter\"\", Int64.Type}}), \"\"QuarterKey\"\", 1, 1),\r\nGetQuarterKey = Table.NestedJoin(AddYearQuarter,{\"\"Year Quarter #\"\"},TableYearQuarter,{\"\"YearQuarter\"\"},\"\"QK\"\",JoinKind.LeftOuter),\r\nAddQuarterKey = Table.ExpandTableColumn(GetQuarterKey, \"\"QK\"\", {\"\"QuarterKey\"\"}, {\"\"QuarterKey #\"\"}),\r\n#\"\"Removed Columns\"\" = Table.RemoveColumns(AddQuarterKey,{\"\"Year Quarter #\"\"}),\r\nAddHalfYearSort = Table.TransformColumnTypes(Table.AddColumn(#\"\"Removed Columns\"\", \"\"HalfYear #\"\", each if Date.Month([Date]) < 7 then 1 else 2),{{\"\"HalfYear #\"\", Int64.Type}}),\r\nAddHalfYearName = Table.AddColumn(AddHalfYearSort, \"\"HalfYear\"\", each \"\"HJ \"\" & Number.ToText([#\"\"HalfYear #\"\"]), type text),\r\nAddHalfYear_Year = Table.AddColumn(AddHalfYearName, \"\"HalfYear Year\"\", each \"\"HJ \"\"&Number.ToText([#\"\"HalfYear #\"\"])&\"\"-\"\"&Number.ToText(Date.Year([Date])), type text),\r\n#\"\"Added Custom Column3\"\" = Table.AddColumn(AddHalfYear_Year, \"\"Year HalfYear\"\", each Number.ToText(Date.Year([Date]))&\"\"-\"\"& \"\"HJ \"\"&Number.ToText([#\"\"HalfYear #\"\"]), type text),\r\nAddYearHalfYear = Table.TransformColumnTypes(Table.AddColumn(#\"\"Added Custom Column3\"\", \"\"YearHalfYear #\"\", each Date.Year([Date])*100+[#\"\"HalfYear #\"\"]),{{\"\"YearHalfYear #\"\", Int64.Type}}),\r\nTableYearHalfYear = Table.AddIndexColumn(Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(List.Sort(List.Distinct(AddYearHalfYear[#\"\"YearHalfYear #\"\"]),Order.Ascending), Splitter.SplitByNothing(), null, null, ExtraValues.Error),{{\"\"Column1\"\", \"\"YearHalfYear\"\"}}),{{\"\"YearHalfYear\"\", Int64.Type}}), \"\"HalfYearKey\"\", 1, 1),\r\nGetHalfYearKey = Table.NestedJoin(AddYearHalfYear,{\"\"YearHalfYear #\"\"},TableYearHalfYear,{\"\"YearHalfYear\"\"},\"\"HYK\"\",JoinKind.LeftOuter),\r\nAddHalfYearKey = Table.ExpandTableColumn(GetHalfYearKey, \"\"HYK\"\", {\"\"HalfYearKey\"\"}, {\"\"HalfYearKey #\"\"}),\r\n#\"\"Removed Columns4\"\" = Table.RemoveColumns(AddHalfYearKey,{\"\"YearHalfYear #\"\"}),\r\nAddYear = Table.AddColumn(#\"\"Removed Columns4\"\", \"\"Year #\"\", each Date.Year([Date]), Int64.Type),\r\nAddYearKey = Table.AddColumn(AddYear, \"\"YearKey #\"\", each [#\"\"Year #\"\"] - List.Min(AddYear[#\"\"Year #\"\"]) + 1, Int64.Type),\r\nIsLeapYear = Table.Buffer( Table.TransformColumnTypes(Table.AddColumn(AddYearKey, \"\"LeapYear\"\", each Number.From( Date.IsLeapYear( [Date] ))),{{\"\"LeapYear\"\", Int64.Type}}) ),\r\n\r\nfnKeysTodayRecord =\r\n  let\r\n  FilterTableToToday = Table.SelectRows(IsLeapYear, each _[Date] = Today),\r\n  Output = \r\n    [\r\n      TodayDayKey = FilterTableToToday[#\"\"DayKey #\"\"]{0}, \r\n      TodayWeekKey = FilterTableToToday[#\"\"WeekKey #\"\"]{0},\r\n      TodayIsoWeekKey = FilterTableToToday[#\"\"IsoKW #\"\"]{0},\r\n      TodayMonthKey = FilterTableToToday[#\"\"MonthKey #\"\"]{0},\r\n      TodayQuarterKey = FilterTableToToday[#\"\"QuarterKey #\"\"]{0},\r\n      TodayHalfYearKey = FilterTableToToday[#\"\"HalfYearKey #\"\"]{0},\r\n      TodayYearKey = FilterTableToToday[#\"\"YearKey #\"\"]{0}\r\n    ]\r\n  in\r\n  Output, \r\nAddRelativeDay = Table.AddColumn(IsLeapYear, \"\"Relative Day #\"\", each [#\"\"DayKey #\"\"] - fnKeysTodayRecord[TodayDayKey], Int64.Type),\r\nAddRelativeWeek = Table.AddColumn(AddRelativeDay, \"\"Relative Week #\"\", each [#\"\"WeekKey #\"\"] - fnKeysTodayRecord[TodayWeekKey], Int64.Type),\r\nAddRelativeIsoWeek = Table.AddColumn(AddRelativeWeek, \"\"Relative IsoWeek #\"\", each [#\"\"IsoKW #\"\"] - fnKeysTodayRecord[TodayIsoWeekKey], Int64.Type),\r\nAddRelativeMonth = Table.AddColumn(AddRelativeIsoWeek, \"\"Relative Month #\"\", each [#\"\"MonthKey #\"\"] - fnKeysTodayRecord[TodayMonthKey], Int64.Type),\r\nAddRelativeQuarter = Table.AddColumn(AddRelativeMonth, \"\"Relative Quarter #\"\", each [#\"\"QuarterKey #\"\"] - fnKeysTodayRecord[TodayQuarterKey], Int64.Type),\r\nAddRelativeHalfYear = Table.AddColumn(AddRelativeQuarter, \"\"Relative HalfYear #\"\", each [#\"\"HalfYearKey #\"\"] - fnKeysTodayRecord[TodayHalfYearKey], Int64.Type),\r\nAddRelativeYear = Table.AddColumn(AddRelativeHalfYear, \"\"Relative Year #\"\", each [#\"\"YearKey #\"\"] - fnKeysTodayRecord[TodayYearKey], Int64.Type),\r\n\r\n//2Go-Detection\r\nListGetWeek2Go = List.Buffer( Table.SelectRows(AddRelativeYear, each [#\"\"Relative Week #\"\"] = 0 and [Date] > Today)[Date] ),\r\nListGetIsoWeek2Go = List.Buffer( Table.SelectRows(AddRelativeYear, each [#\"\"Relative IsoWeek #\"\"] = 0 and [Date] > Today)[Date] ),\r\nListGetMonth2Go = List.Buffer( Table.SelectRows(AddRelativeYear, each [#\"\"Relative Month #\"\"] = 0 and [Date] > Today)[Date] ),\r\nListGetQuarter2Go = List.Buffer( Table.SelectRows(AddRelativeYear, each [#\"\"Relative Quarter #\"\"] = 0 and [Date] > Today)[Date] ),\r\nListGetHalfYear2Go = List.Buffer( Table.SelectRows(AddRelativeYear, each [#\"\"Relative HalfYear #\"\"] = 0 and [Date] > Today)[Date] ),\r\nListGetYear2Go = List.Buffer( Table.SelectRows(AddRelativeYear, each [#\"\"Relative Year #\"\"] = 0 and [Date] > Today)[Date] ),\r\n\r\nAddCol_Week2Go = Table.AddColumn( AddRelativeYear, \"\"Week 2 Go\"\", each Number.From( List.Contains(ListGetWeek2Go, [Date]) ), Int64.Type),\r\nAddCol_IsoWeek2Go = Table.AddColumn( AddCol_Week2Go, \"\"IsoWeek 2 Go\"\", each Number.From( List.Contains(ListGetIsoWeek2Go, [Date]) ), Int64.Type),\r\nAddCol_Month2Go = Table.AddColumn( AddCol_IsoWeek2Go, \"\"Month 2 Go\"\", each Number.From( List.Contains(ListGetMonth2Go, [Date]) ), Int64.Type),\r\nAddCol_Quarter2Go = Table.AddColumn(AddCol_Month2Go, \"\"Quarter 2 Go\"\", each Number.From(List.Contains(ListGetQuarter2Go, [Date])), Int64.Type),\r\nAddCol_HalfYear2Go = Table.AddColumn(AddCol_Quarter2Go, \"\"Half Year 2 Go\"\", each Number.From(List.Contains(ListGetHalfYear2Go, [Date])), Int64.Type),\r\nAddCol_Year2Go = Table.AddColumn(AddCol_HalfYear2Go, \"\"Year 2 Go\"\", each Number.From(List.Contains(ListGetYear2Go, [Date])), Int64.Type),\r\n//==============================================================================Fiscal Year Calculations=================================================================\r\nGetStartMonthNumberFiscalYear = List.PositionOf({\"\"Jan\"\", \"\"Feb\"\", \"\"Mar\"\", \"\"Apr\"\", \"\"May\"\", \"\"Jun\"\", \"\"Jul\"\", \"\"Aug\"\", \"\"Sep\"\", \"\"Oct\"\", \"\"Nov\"\", \"\"Dec\"\"}, StartFiscalYear) + 1,\r\n\r\nAddFiscalYear = Table.AddColumn(AddCol_Year2Go, \"\"Fiscal Year #\"\", each if Date.Month([Date]) < GetStartMonthNumberFiscalYear then Date.Year([Date]) else Date.Year([Date]) + 1, Int64.Type),\r\n#\"\"Added Custom Column\"\" = Table.AddColumn(AddFiscalYear, \"\"Fiscal Year\"\", each if Date.Month([Date]) < GetStartMonthNumberFiscalYear then \"\"FY \"\" & Number.ToText(Date.Year([Date])) else \"\"FY \"\" & Number.ToText(Date.Year([Date]) + 1), type text),\r\n#\"\"AddFiscalMonth#\"\" = Table.AddColumn(#\"\"Added Custom Column\"\", \"\"Fiscal Month #\"\", each if (Date.Month([Date]) >= GetStartMonthNumberFiscalYear) then Date.Month([Date]) - GetStartMonthNumberFiscalYear +1 \r\nelse \r\nDate.Month([Date])+13-GetStartMonthNumberFiscalYear, Int64.Type),\r\nAddFiscalMonth_MMMM = Table.AddColumn(#\"\"AddFiscalMonth#\"\", \"\"Fiscal Month (MMMM)\"\", each Date.MonthName([Date]), type text),\r\nAdd_FiscalMonth_MMM = Table.AddColumn(AddFiscalMonth_MMMM, \"\"Fiscal Month (MMM)\"\", each Date.ToText([Date], \"\"MMM\"\", Culture), type text),\r\nAddFiscalMonth_MM = Table.AddColumn(Add_FiscalMonth_MMM, \"\"Fiscal Month (M)\"\", each Text.Start(Date.MonthName([Date], Culture),1) & Text.Repeat(Character.FromNumber(8203), [#\"\"Month #\"\"]), type text),\r\nAdd_FiscalQuarter = Table.TransformColumnTypes(Table.AddColumn(AddFiscalMonth_MM, \"\"Fiscal Quarter #\"\", each Number.RoundUp([#\"\"Fiscal Month #\"\"]/3, 0)), {{\"\"Fiscal Quarter #\"\", Int64.Type}}),\r\n#\"\"Added Custom Column1\"\" = Table.AddColumn(Add_FiscalQuarter, \"\"Fiscal Quarter\"\", each \"\"FQ \"\" & Number.ToText([#\"\"Fiscal Quarter #\"\"]), type text),\r\n#\"\"Added Custom Column2\"\" = Table.AddColumn(#\"\"Added Custom Column1\"\", \"\"Fiscal Quarter Fiscal Year\"\", each [Fiscal Quarter]&\"\"-FY \"\"&Number.ToText([#\"\"Fiscal Year #\"\"]), type text),\r\nAddFiscalYearQuarterName = Table.AddColumn(#\"\"Added Custom Column2\"\", \"\"Fiscal Year Fiscal Quarter\"\", each \"\"FY \"\"&Text.From([#\"\"Fiscal Year #\"\"]) &\"\"-FQ\"\" & Text.From([#\"\"Fiscal Quarter #\"\"]), type text),\r\nAddFiscalYearQuarter = Table.AddColumn(AddFiscalYearQuarterName, \"\"Fiscal_YearQuarter\"\", each [#\"\"Fiscal Year #\"\"] * 100 + [#\"\"Fiscal Quarter #\"\"], Int64.Type),\r\nTableFiscalYearQuarter = Table.AddIndexColumn(Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(List.Sort(List.Distinct(#\"\"AddFiscalYearQuarter\"\"[#\"\"Fiscal_YearQuarter\"\"]), Order.Ascending), Splitter.SplitByNothing(), null, null, ExtraValues.Error), {{\"\"Column1\"\", \"\"Fiscal_YearQuarter\"\"}}), {{\"\"Fiscal_YearQuarter\"\", Int64.Type}}), \"\"Fiscal_QuarterKey\"\", 1, 1),\r\nGetFiscalYearQuarterKey = Table.NestedJoin(AddFiscalYearQuarter,{\"\"Fiscal_YearQuarter\"\"},TableFiscalYearQuarter,{\"\"Fiscal_YearQuarter\"\"},\"\"FYQ\"\",JoinKind.LeftOuter),\r\n#\"\"Expanded FYQ\"\" = Table.ExpandTableColumn(GetFiscalYearQuarterKey, \"\"FYQ\"\", {\"\"Fiscal_QuarterKey\"\"}, {\"\"FiscalQuarterKey #\"\"}),\r\n#\"\"Removed Columns2\"\" = Table.RemoveColumns(#\"\"Expanded FYQ\"\",{\"\"Fiscal_YearQuarter\"\"}),\r\nAddFiscalHalfYear = Table.TransformColumnTypes(Table.AddColumn(#\"\"Removed Columns2\"\", \"\"Fiscal Half Year #\"\", each if [#\"\"Fiscal Month #\"\"] < 7 then 1 else 2), {{\"\"Fiscal Half Year #\"\", Int64.Type}}),\r\nAddFiscalHalfYearName = Table.AddColumn(AddFiscalHalfYear, \"\"Fiscal Half Year\"\", each \"\"FHY \"\" & Number.ToText([#\"\"Fiscal Half Year #\"\"]), type text),\r\nAddFiscalYearHalfYearName = Table.AddColumn(AddFiscalHalfYearName, \"\"Fiscal Year Fiscal Half Year\"\", each \"\"FY \"\" &Text.From([#\"\"Fiscal Year #\"\"]) & \"\"-FHY\"\" & Text.From([#\"\"Fiscal Half Year #\"\"]), type text),\r\n#\"\"Added Custom Column4\"\" = Table.AddColumn(AddFiscalYearHalfYearName, \"\"Fiscal Half Year Fiscal Year\"\", each \"\"FHY \"\" & Text.From([#\"\"Fiscal Half Year #\"\"])&\"\"-FY \"\" &Text.From([#\"\"Fiscal Year #\"\"]), type text),\r\nAddFiscalYearHalfYear = Table.AddColumn(#\"\"Added Custom Column4\"\", \"\"Fiscal_YearHalfYear\"\", each [#\"\"Fiscal Year #\"\"] * 100 + [#\"\"Fiscal Half Year #\"\"], Int64.Type),\r\nTableFiscalYearHalfYear = Table.AddIndexColumn(Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(List.Sort(List.Distinct(#\"\"AddFiscalYearHalfYear\"\"[Fiscal_YearHalfYear]),Order.Ascending), Splitter.SplitByNothing(), null, null, ExtraValues.Error),{{\"\"Column1\"\", \"\"Fiscal_YearHalfYear\"\"}}),{{\"\"Fiscal_YearHalfYear\"\", Int64.Type}}), \"\"Fiscal_HalfYearKey\"\", 1, 1),\r\nGetFiscalYearHalfYearKey = Table.NestedJoin(AddFiscalYearHalfYear,{\"\"Fiscal_YearHalfYear\"\"},TableFiscalYearHalfYear,{\"\"Fiscal_YearHalfYear\"\"},\"\"FYHY\"\",JoinKind.LeftOuter),\r\n#\"\"Expanded FYHY\"\" = Table.ExpandTableColumn(GetFiscalYearHalfYearKey, \"\"FYHY\"\", {\"\"Fiscal_HalfYearKey\"\"}, {\"\"FiscalHalfYearKey #\"\"}),\r\nAddFiscalYearKey = Table.AddColumn(#\"\"Expanded FYHY\"\", \"\"FiscalYearKey #\"\", each [#\"\"Fiscal Year #\"\"] - List.Min(#\"\"Expanded FYHY\"\"[#\"\"Fiscal Year #\"\"]) + 1, Int64.Type),\r\n#\"\"Removed Columns3\"\" = Table.RemoveColumns(AddFiscalYearKey,{\"\"Fiscal_YearHalfYear\"\"}),\r\n\r\n\r\nfnKeysTodayRecordFiscal =\r\n      let\r\n      TableFilterToday = Table.SelectRows(#\"\"Removed Columns3\"\", each _[Date] = Today),\r\n      Output = \r\n        [\r\n          FiscalQuarterKeyToday = TableFilterToday[#\"\"FiscalQuarterKey #\"\"]{0},\r\n          FiscalHalfYearKeyToday = TableFilterToday[#\"\"FiscalHalfYearKey #\"\"]{0},\r\n          FiscalYearKeyToday = TableFilterToday[#\"\"FiscalYearKey #\"\"]{0}\r\n        ]\r\n      in\r\n      Output,\r\n\r\n  //Relative Fiscal Units\r\n   AddRelativeFiscalQuarter = Table.AddColumn(#\"\"Removed Columns3\"\", \"\"Relative Fiscal Quarter #\"\", each [#\"\"FiscalQuarterKey #\"\"] - fnKeysTodayRecordFiscal[FiscalQuarterKeyToday], Int64.Type),\r\n    AddRelativeFiscalHalfYear = Table.AddColumn(AddRelativeFiscalQuarter, \"\"Relative Fiscal Half Year #\"\", each [#\"\"FiscalHalfYearKey #\"\"] - fnKeysTodayRecordFiscal[FiscalHalfYearKeyToday], Int64.Type),\r\n    AddRelativeFiscalYear = Table.AddColumn(AddRelativeFiscalHalfYear, \"\"Relative Fiscal Year #\"\", each [#\"\"FiscalYearKey #\"\"] - fnKeysTodayRecordFiscal[FiscalYearKeyToday], Int64.Type),\r\n\r\n    //2Go-Determination\r\n    ListGetFiscalQuarter2Go = List.Buffer(Table.SelectRows(AddRelativeFiscalYear, each [#\"\"Relative Fiscal Quarter #\"\"] = 0 and [Date] > Today)[Date]),\r\n    ListGetFiscalHalfYear2Go = List.Buffer(Table.SelectRows(AddRelativeFiscalYear, each [#\"\"Relative Fiscal Half Year #\"\"] = 0 and [Date] > Today)[Date]),\r\n    ListGetFiscalYear2Go = List.Buffer(Table.SelectRows(AddRelativeFiscalYear, each [#\"\"Relative Fiscal Year #\"\"] = 0 and [Date] > Today)[Date]),\r\n\r\n    AddCol_FiscalQuarter2Go = Table.AddColumn(AddRelativeFiscalYear, \"\"Fiscal Quarter 2 Go\"\", each Number.From(List.Contains(ListGetFiscalQuarter2Go, [Date])), Int64.Type),\r\n    AddCol_FiscalHalfYear2Go = Table.AddColumn(AddCol_FiscalQuarter2Go, \"\"Fiscal Half Year 2 Go\"\", each Number.From(List.Contains(ListGetFiscalHalfYear2Go, [Date])), Int64.Type),\r\n    AddCol_FiscalYear2Go = Table.AddColumn(AddCol_FiscalHalfYear2Go, \"\"Fiscal Year 2 Go\"\", each Number.From(List.Contains(ListGetFiscalYear2Go, [Date])), Int64.Type),\r\n\r\n    //==============================================================================Fiscal Year Calculations=================================================================\r\n    Output = if StartFiscalYear = \"\"Jan\"\" then AddCol_Year2Go else AddCol_FiscalYear2Go\r\nin\r\n    Output\r\n\r\n  ,\r\n    fnType = type function(\r\n              StartYear as number,\r\n              YearsIntoTheFuture as number, \r\n              optional Culture as (type text meta [Documentation.AllowedValues={\"\"de-de\"\", \"\"en-US\"\", \"\"fr-FR\"\", \"\"es-ES\"\"}]), \r\n              optional StartFiscalYear as (type text meta[Documentation.AllowedValues={\"\"Jan\"\", \"\"Feb\"\", \"\"Mar\"\", \"\"Apr\"\", \"\"May\"\", \"\"Jun\"\", \"\"Jul\"\", \"\"Aug\"\", \"\"Sep\"\", \"\"Oct\"\", \"\"Nov\"\", \"\"Dec\"\"}]),\r\n              optional WeekStart as (type text meta[Documentation.AllowedValues={\"\"Mo\"\", \"\"Tu\"\", \"\"We\"\", \"\"Th\"\", \"\"Fr\"\", \"\"Sa\"\", \"\"Su\"\"}])\r\n               ) as table meta [\r\n                                Documentation.Name=\"\"fnCalendar (by Lars Schreiber --> ssbi-blog.de)\"\",\r\n                                Documentation.LongDescription=\"\"This function creates a calendar table, based on the suggestions of the Kimball Group.\"\",\r\n                                Documentation.Author=\"\"Lars Schreiber, ssbi-blog.de\"\",\r\n                                Documentation.Examples=\r\n                                    {[\r\n                                        Description = \"\"Returns a calendar table starting in 2019 and automatically expanding by one year into the future from the current year.\"\",\r\n                                        Code = \"\"fnCalendar(2019, 1, null, null, null)\"\",\r\n                                        Result =\"\"\"\"\r\n                                        \r\n                                    ],[\r\n                                        Description = \"\"Returns a calendar table starting in 2019 and automatically expanding by one year into the future from the current year. It includes additional columns that follow the logic of a fiscal year that starts in July and ends in June of the following year.\"\",\r\n                                        Code = \"\"fnCalendar(2019, 1, null, Jul, null)\"\",\r\n                                        Result =\"\"\"\"\r\n                                        \r\n                                    ]} \r\n                                ]\r\nin\r\nValue.ReplaceType(fn, fnType)\";\r\n\r\n\r\n        // Create a new table in the model\r\n        NamedExpression Namedexpression = Model.AddExpression(expressionName, mExpression);\r\n        Namedexpression.Expression = mExpression;\r\n\r\n        Namedexpression.Kind = ExpressionKind.M;\r\n\r\n\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        MessageBox.Show(\"Adding the DateFunction table was not successful but the rest of the script was completed.\\n\\nReason: {ex.Message}\");\r\n    }\r\n}",
      "Tooltip": "",
      "ValidContexts": "Model, Table"
    },
    {
      "Id": 27,
      "Name": "6. Other\\4. Backup All MacroAction.json Files to Desktop",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.IO;\nusing System.Windows.Forms;\n\n// Get the path to Local AppData and Desktop directories\nstring localAppDataPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\nstring desktopPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Desktop);\n\n// Get the current timestamp for the backup file name\nstring timestamp = DateTime.Now.ToString(\"yyyyMMddHHmmss\");\n\n// Show a message box to ask the user for confirmation\nDialogResult result = MessageBox.Show(\"Do you want to backup the MacroActions.json files?\", \"Backup Confirmation\", MessageBoxButtons.YesNo, MessageBoxIcon.Question);\n\n// If the user confirms, proceed with the backup\nif (result == DialogResult.Yes)\n{\n    // Look for folders containing \"TabularEditor\" in LocalAppData\n    string[] folders = Directory.GetDirectories(localAppDataPath, \"*TabularEditor*\", SearchOption.TopDirectoryOnly);\n\n    int filesCopied = 0; // Counter to track how many files are copied\n\n    foreach (string folder in folders)\n    {\n        // Check if MacroActions.json exists in the folder\n        string macroActionsPath = Path.Combine(folder, \"MacroActions.json\");\n        if (File.Exists(macroActionsPath))\n        {\n            // Create a new file name with folder name and timestamp\n            string folderName = new DirectoryInfo(folder).Name;\n            string newFileName = folderName + \"_MacroActionsBackup_\" + timestamp + \".json\";\n            string newFilePath = Path.Combine(desktopPath, newFileName);\n\n            // Copy the file to the desktop with the new name\n            File.Copy(macroActionsPath, newFilePath, true);\n\n            // Count the number of successful copies\n            filesCopied++;\n        }\n    }\n\n    // Show a message box with the result of the operation\n    if (filesCopied > 0)\n    {\n        Interaction.MsgBox($\"{filesCopied} MacroActions.json file(s) backed up successfully!\", MsgBoxStyle.Information, \"Backup Completed\");\n    }\n    else\n    {\n        Interaction.MsgBox(\"No MacroActions.json files found to back up.\", MsgBoxStyle.Exclamation, \"Backup Completed\");\n    }\n}\nelse\n{\n    Interaction.MsgBox(\"Backup canceled.\", MsgBoxStyle.Information, \"Operation Canceled\");\n}\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 28,
      "Name": "Archive\\1.2 Measure: Y-1 Simple With fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\n    \nforeach (var selectedMeasure in Selected.Measures)\n    {\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n    var Kalendartable = \"Datum\";\n    var DateColumn = \"Datum\";\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" PY\";\n    \n    string newExpression1 = \n        \"CALCULATE(\" +\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" \n        +\"SAMEPERIODLASTYEAR(\"+Kalendartable+\"[\"+DateColumn+\"]))\";\n\n    // Create the new measure in the same table as the selected measure\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n\n    // Set the display folder for the new measure\n    //newMeasure1.DisplayFolder = \"Just Created \" + selectedMeasure.Name;\n    \n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasures.Add(newMeasure1);\n    \n}\n\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 29,
      "Name": "Archive\\1.2 Measure: Δ Y-1 Simple  With fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\n    \nforeach (var selectedMeasure in Selected.Measures)\n    {\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n    var Kalendartable = \"Datum\";\n    var DateColumn = \"Datum\";\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" Δ PY\";\n    \n    string newExpression1 = \n        \"[\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY]\";\n\n    // Create the new measure in the same table as the selected measure\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n\n    // Set the display folder for the new measure\n    //newMeasure1.DisplayFolder = \"Just Created \" + selectedMeasure.Name;\n    \n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasures.Add(newMeasure1);\n    \n}\n\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 30,
      "Name": "Archive\\1.2 Measure: Δ Y-1% Simple  With fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\n    \nforeach (var selectedMeasure in Selected.Measures)\n    {\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n    var Kalendartable = \"Datum\";\n    var DateColumn = \"Datum\";\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" Δ PY %\";\n    \n    string newExpression1 = \n        \"DIVIDE([\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY], [\"+selectedMeasure.Name+\"])\";\n\n    // Create the new measure in the same table as the selected measure\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n\n    // Set the display folder for the new measure\n    //newMeasure1.DisplayFolder = \"Just Created \" + selectedMeasure.Name;\n    \n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasures.Add(newMeasure1);\n    \n}\n\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 31,
      "Name": "Archive\\1.1 Measure: Selected SUM Simple in Measure Table",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\n// Ask the user if they want to add the new measure to the current table\nDialogResult dialogResult = MessageBox.Show(\"Do you want to add the new measure to the current table? (Click 'No' to add it to a custom table)\", \"Select Target Table\", MessageBoxButtons.YesNo);\n\nstring measuresTableName = Selected.Columns.First().Table.Name;\nif (dialogResult == DialogResult.No)\n{\n    // Ask for the name of the measure table if the user selects \"No\"\n    measuresTableName = Interaction.InputBox(\"Provide the name of the measure table\", \"Name of Measure Table\", \"Measure\");\n\n    // Check if the provided table exists\n    if (Model.Tables.FirstOrDefault(table => table.Name == measuresTableName) == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Create a SUM measure for every currently selected column and hide the column\nforeach(var c in Selected.Columns)\n{\n    // Use the target table determined by user selection or default \"Measure\" table\n    var measuresTable = Model.Tables[measuresTableName];\n    var newMeasure = measuresTable.AddMeasure(\n        /*\"Sum_\" +*/ c.Name,                            // Name\n        \"SUM(\" + c.DaxObjectFullName + \")\",         // DAX expression\n        c.Table.Name                                // Display Folder\n    );\n    \n    // Set the format string on the new measure:\n    newMeasure.FormatString = \"0.0\";\n\n    // Provide some documentation:\n    newMeasure.Description = \"This measure is the sum of column \" + c.DaxObjectFullName;\n\n    // Hide the base column:\n    c.IsHidden = true;\n}\n",
      "Tooltip": "This adds for selected Tables all explicit sum measures",
      "ValidContexts": "Measure"
    },
    {
      "Id": 32,
      "Name": "Archive\\1.1 Measure: Selected SUM Simple in Current Table",
      "Enabled": "true",
      "Execute": "// Creates a SUM measure for every currently selected column and hide the column.\nforeach(var c in Selected.Columns)\n{\n    var newMeasure = c.Table.AddMeasure(\n        \"NameToReplace\" + c.Name,                    // Name\n        \"SUM(\" + c.DaxObjectFullName + \")\",    // DAX expression\n        \"ENTERHERE_DisplayFolderName\"                        // Display Folder\n    );\n    \n    // Set the format string on the new measure:\n    newMeasure.FormatString = \"0.0\";\n\n    // Provide some documentation:\n    newMeasure.Description = \"This measure is the sum of column \" + c.DaxObjectFullName;\n\n    // Hide the base column:\n    c.IsHidden = true;\n}",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Id": 33,
      "Name": "Archive\\1.2 Measure: All Y-1 Simple with fixed Variable",
      "Enabled": "true",
      "Execute": "var newMeasures = new List<Measure>();\n    \nforeach (var selectedMeasure in Selected.Measures)\n    {\n    // Get the selected measure\n    var measuresTable = Model.Tables[\"Measure\"];\n    var Kalendartable = \"Datum\";\n    var DateColumn = \"Datum\";\n\n    // Define the new measure name and expression\n    string newMeasureName1 = selectedMeasure.Name + \" PY\";\n    string newMeasureName2 = selectedMeasure.Name + \" Δ PY\";\n    string newMeasureName3 = selectedMeasure.Name + \" Δ PY %\";\n    \n    string newExpression1 = \n        \"CALCULATE(\" +\n        \"[\"+selectedMeasure.Name+\"]\" + \", \" \n        +\"SAMEPERIODLASTYEAR(\"+Kalendartable+\"[\"+DateColumn+\"]))\";\n    string newExpression2 = \n        \"[\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY]\";\n    string newExpression3 = \n        \"DIVIDE([\"+selectedMeasure.Name+\"] - \" + \"[\"+selectedMeasure.Name+\" PY], [\"+selectedMeasure.Name+\"])\";\n\n\n    // Create the new measure in the same table as the selected measure\n    var newMeasure1 = measuresTable.AddMeasure(newMeasureName1, newExpression1);\n    var newMeasure2 = measuresTable.AddMeasure(newMeasureName2, newExpression2);\n    var newMeasure3 = measuresTable.AddMeasure(newMeasureName3, newExpression3);\n    \n    // Set the display folder for the new measure\n    //newMeasure1.DisplayFolder = \"Just Created \" + selectedMeasure.Name;\n    \n    newMeasure1.FormatString = selectedMeasure.FormatString;\n    newMeasures.Add(newMeasure1);\n    newMeasures.Add(newMeasure2);\n    newMeasures.Add(newMeasure3);\n}\n\nFormatDax(newMeasures, shortFormat: true, skipSpaceAfterFunctionName: true);",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 34,
      "Name": "3. Calc Table\\1. Create Calc Calendar Table (TE2)\\2. Mark as Date Table",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\n// Find the table with the data category \"Time\"\nvar CalendarTable = Model.Tables.FirstOrDefault(table => table.DataCategory == \"Time\");\n\nif (CalendarTable == null)\n{\n    string tableName = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"Calendar\");\n    CalendarTable = Model.Tables.FirstOrDefault(table => table.Name == tableName);\n\n    if (CalendarTable == null)\n    {\n        MessageBox.Show(\"The table you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Check if a column named \"Date\" exists in the CalendarTable\nstring dateColumnName = \"Date\";\nvar dateColumn = CalendarTable.Columns.FirstOrDefault(col => col.Name == dateColumnName);\n\nif (dateColumn == null)\n{\n    // If no \"Date\" column is found, prompt the user for input\n    dateColumnName = Interaction.InputBox(\"The 'Date' column was not found. Provide the name of the date column.\", \"Column Name\", \"Date\");\n    dateColumn = CalendarTable.Columns.FirstOrDefault(col => col.Name == dateColumnName);\n\n    if (dateColumn == null)\n    {\n        MessageBox.Show(\"The column you provided does not exist in the model.\");\n        return;\n    }\n}\n\n// Modify the found column (or user-provided column)\ndateColumn.DataType = DataType.DateTime;\ndateColumn.IsKey = true; // Ensure this is the key column\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 35,
      "Name": "3. Calc Table\\1. Create Calc Calendar Table (TE2)\\1. Create Table",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\nusing System.Windows.Forms;\n\nstring calctableCalendar = Interaction.InputBox(\"Provide the name of the date dimension table\", \"Table Name\", \"CalendarCalcTable\");\n\n\n\n    // Define the DAX expression for the calculated table\n    string tableExpression = @\"\nVAR all_dates = CALENDARAUTO()\nRETURN\n    ADDCOLUMNS(\n        all_dates,\n        \"\"DateKey\"\", VALUE(FORMAT([Date], \"\"YYYYMMDD\"\")),\n        \"\"Year\"\", YEAR([Date]),\n        \"\"Quarter\"\", QUARTER([Date]),\n        \"\"Month\"\", MONTH([Date]),\n        \"\"End of Month\"\", EOMONTH([Date], 0),\n        \"\"Week of Year\"\", WEEKNUM([Date]),\n        \"\"Weekday\"\", WEEKDAY([Date])\n    )\n\";\n\n    // Add the calculated table to the model\n    var table = Model.AddCalculatedTable(calctableCalendar, tableExpression);\n        table.DataCategory = \"Time\";\n\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 36,
      "Name": "7. Official TE Library\\Create Field Parameters with Selected Columns\\Measures",
      "Enabled": "true",
      "Execute": "// Before running the script, select the measures or columns that you\n// would like to use as field parameters (hold down CTRL to select multiple\n// objects). Also, you may change the name of the field parameter table\n// below. NOTE: If used against Power BI Desktop, you must enable unsupported\n// features under File > Preferences (TE2) or Tools > Preferences (TE3).\nvar name = \"Parameter\";\n\nif(Selected.Columns.Count == 0 && Selected.Measures.Count == 0) throw new Exception(\"No columns or measures selected!\");\n\n// Construct the DAX for the calculated table based on the current selection:\nvar objects = Selected.Columns.Any() ? Selected.Columns.Cast<ITabularTableObject>() : Selected.Measures;\nvar dax = \"{\\n    \" + string.Join(\",\\n    \", objects.Select((c,i) => string.Format(\"(\\\"{0}\\\", NAMEOF('{1}'[{0}]), {2})\", c.Name, c.Table.Name, i))) + \"\\n}\";\n\n// Add the calculated table to the model:\nvar table = Model.AddCalculatedTable(name, dax);\n\n// In TE2 columns are not created automatically from a DAX expression, so \n// we will have to add them manually:\nvar te2 = table.Columns.Count == 0;\nvar nameColumn = te2 ? table.AddCalculatedTableColumn(name, \"[Value1]\") : table.Columns[\"Value1\"] as CalculatedTableColumn;\nvar fieldColumn = te2 ? table.AddCalculatedTableColumn(name + \" Fields\", \"[Value2]\") : table.Columns[\"Value2\"] as CalculatedTableColumn;\nvar orderColumn = te2 ? table.AddCalculatedTableColumn(name + \" Order\", \"[Value3]\") : table.Columns[\"Value3\"] as CalculatedTableColumn;\n\nif(!te2) {\n    // Rename the columns that were added automatically in TE3:\n    nameColumn.IsNameInferred = false;\n    nameColumn.Name = name;\n    fieldColumn.IsNameInferred = false;\n    fieldColumn.Name = name + \" Fields\";\n    orderColumn.IsNameInferred = false;\n    orderColumn.Name = name + \" Order\";\n}\n// Set remaining properties for field parameters to work\n// See: https://twitter.com/markbdi/status/1526558841172893696\nnameColumn.SortByColumn = orderColumn;\nnameColumn.GroupByColumns.Add(fieldColumn);\nfieldColumn.SortByColumn = orderColumn;\nfieldColumn.SetExtendedProperty(\"ParameterMetadata\", \"{\\\"version\\\":3,\\\"kind\\\":2}\", ExtendedPropertyType.Json);\nfieldColumn.IsHidden = true;\norderColumn.IsHidden = true;\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Id": 37,
      "Name": "7. Official TE Library\\Count Rows in Table",
      "Enabled": "true",
      "Execute": "// This script counts rows in a selected table and displays the result in a pop-up info box.\n// It does not write any changes to this model.\n//\n// Use this script when you want to check whether a table was loaded or how many rows it has.\n//\n// Get table name\nstring _TableName = \n    Selected.Table.DaxObjectFullName;\n\n// Count table rows\nstring _dax = \n    \"{ FORMAT( COUNTROWS (\" + _TableName + \"), \\\"#,##0\\\" ) }\";\n\n// Evaluate DAX\nstring _TableRows = \n    Convert.ToString(EvaluateDax( _dax ));\n\n// Return output in pop-up\nInfo ( \"Number of rows in \" + _TableName + \": \" + _TableRows);\n",
      "Tooltip": "If you want to see how many rows are loaded to a table, or quickly check if the table has been loaded, at all. This script requires connection to a remote model or connection via Workspace Mode.",
      "ValidContexts": "Table"
    },
    {
      "Id": 38,
      "Name": "7. Official TE Library\\Edit Hidden Partitions",
      "Enabled": "true",
      "Execute": "Selected.Table.Partitions[0].Output();\n",
      "Tooltip": "Calculated Tables, Calculation Groups and Field Parameters do not have partitions displayed in Tabular Editor. This is on purpose as these should/can not generally be edited. The partition's properties can however still be accessed and edited with bellow script snippet.",
      "ValidContexts": "Table"
    },
    {
      "Id": 39,
      "Name": "7. Official TE Library\\Create M Parameter",
      "Enabled": "true",
      "Execute": "// This script creates a new M parameter in the 'Shared Expressions' of a model.\n//\n// Create a new shared expression called \"New Parameter\"\nModel.AddExpression( \n    \"New Parameter\", \n    @\"\n\"\"Parameter Text\"\" meta\n[\n\tIsParameterQuery = true,\n\tIsParameterQueryRequired = true,\n\tType = type text\n]\"\n);\n\n// Provides an output informing how to configure and use the parameter\nInfo ( \n    \"Created a new Shared Expression called 'New Parameter', which is an M Parameter template.\" + \n    \"\\n------------------------------------------------------\\n\" + \n    \"To configure:\" +\n    \"\\n------------------------------------------------------\\n    \" + \n    \"1. Replace the text 'New Parameter' with the desired parameter value\\n    \" +\n    \"2. Set the data type appropriately\\n    \" +\n    \"3. Replace any values found in the M partitions with the parameter reference.\" );\n",
      "Tooltip": "If you want to create a new dynamic M Parameter to use in Power Query queries (M Partitions or Shared Expressions).",
      "ValidContexts": "Model"
    },
    {
      "Id": 40,
      "Name": "7. Official TE Library\\Format Numeric Measures",
      "Enabled": "true",
      "Execute": "// This script is meant to format all measures with a default formatstring\nforeach (var ms in Selected.Measures) {\n//Don't set format string on hidden measures\n\tif (ms.IsHidden) continue;\n// If the format string is empty continue. \n\tif (!string.IsNullOrWhiteSpace(ms.FormatString)) continue;\n//If the data type is int set a whole number format string\n\tif (ms.DataType == DataType.Int64) ms.FormatString = \"#,##0\";\n//If the datatype is double or decimal \n\tif (ms.DataType == DataType.Double || ms.DataType == DataType.Decimal) {\n    //and the name contains # or QTY then set the format string to a whole number\n\t\tif (ms.Name.Contains(\"#\")\n\t\t\t|| ms.Name.IndexOf(\"QTY\", StringComparison.OrdinalIgnoreCase) >= 0) ms.FormatString = \"#,##0\";\n\t\t//otherwise set it a decimal format string. \n    else ms.FormatString = \"#,##0.00\";\n\t}\n}\n",
      "Tooltip": "Allows you to quickly set default format strings on the measures selected.",
      "ValidContexts": "Measure"
    },
    {
      "Id": 41,
      "Name": "7. Official TE Library\\TE3\\Create Table Groups",
      "Enabled": "true",
      "Execute": "// Loop through all tables:\nforeach(var table in Model.Tables)\n{\n    if (table is CalculationGroupTable)\n    {\n        table.TableGroup = \"Calculation Groups\";\n    }\n    else if (!table.UsedInRelationships.Any() && table.Measures.Any(m => m.IsVisible))\n    {\n        // Tables containing visible measures, but no relationships to other tables\n        table.TableGroup = \"Measure Groups\";\n    }\n    else if (table.UsedInRelationships.All(r => r.FromTable == table) && table.UsedInRelationships.Any())\n    {\n        // Tables exclusively on the \"many\" side of relationships:\n        table.TableGroup = \"Facts\";\n    }\n    else if (!table.UsedInRelationships.Any() && table is CalculatedTable && !table.Measures.Any())\n    {\n        // Tables without any relationships, that are Calculated Tables and do not have measures:\n        table.TableGroup = \"Parameter Tables\";\n    }\n    else if (table.UsedInRelationships.Any(r => r.ToTable == table))\n    {\n        // Tables on the \"one\" side of relationships:\n        table.TableGroup = \"Dimensions\";\n    }\n    else\n    {\n        // All other tables:\n        table.TableGroup = \"Misc\";\n    }\n}\n",
      "Tooltip": "This script creates default table groups within Tabular Editor 3.",
      "ValidContexts": "Model"
    },
    {
      "Id": 42,
      "Name": "7. Official TE Library\\Distinct Column Values",
      "Enabled": "true",
      "Execute": "// Construct the DAX expression to get all distinct column values, from the selected column:\nvar dax = string.Format(\"ALL({0})\", Selected.Column.DaxObjectFullName);\n\n// Evaluate the DAX expression against the connected model:\nvar result = EvaluateDax(dax);\n\n// Output the DataTable containing the result of the DAX expression:\nOutput(result);\n",
      "Tooltip": "Display the distinct values in a column for quick data profiling and access. Save as a Macro on the column level to have it quickly available.",
      "ValidContexts": "Column"
    },
    {
      "Id": 43,
      "Name": "7. Official TE Library\\Count Things in the Model",
      "Enabled": "true",
      "Execute": "// This script counts objects in your model and displays them in a pop-up info box.\n// It does not write any changes to this model.\n//\n// Use this script when you open a new model and need a 'helicopter view' on the contents.\n//\n// Count calculation groups & calculation items\nint _calcgroups = 0;\nint _calcitems = 0;\nforeach (  var _calcgroup  in Model.CalculationGroups )\n{\n    _calcgroups = _calcgroups + 1;\n    foreach (  var _item  in _calcgroup.CalculationItems )\n    {\n        _calcitems = _calcitems + 1;\n    }\n}\n\n// Count partitions and DAX parameters\nint _partitions = 0;\nint _whatifparameters = 0;\nint _fieldparameters = 0;\nforeach (  var _table  in Model.Tables )\n{\n    foreach (  var _partition  in _table.Partitions )\n    {\n        string _type = Convert.ToString(_partition.SourceType);\n        string _exp = Convert.ToString(_partition.Expression);\n        if ( _type == \"M\" )\n        {\n            _partitions = _partitions + 1;\n        }\n        else if ( _type == \"Calculated\" && _exp.Contains(\"NAMEOF\") )\n        {\n            _fieldparameters = _fieldparameters + 1;\n        }\n        else if ( _type == \"Calculated\" && _exp.Contains(\"GENERATESERIES\") )\n        {\n            _whatifparameters = _whatifparameters + 1;\n        }\n            \n    }\n}\n\n// Average measure length\ndecimal _numLines = 0;\ndecimal _numChars = 0;\nint _measures = Model.AllMeasures.Count();\nforeach ( var _measure in Model.AllMeasures )\n{\n    _numLines = _numLines + _measure.Expression.Split(\"\\n\").Length;\n    _numChars = _numChars + _measure.Expression.Length;\n}\n_numLines = Math.Round(_numLines / _measures, 1);\n_numChars = Math.Round(_numChars / _measures, 1);\n\n\n// Return the pop-up\nInfo ( \"In the model, we see the below objects:\\n\\n\"\n\n        + \"-----------------------------------------\\n\"\n        + \"Data Objects\\n\"\n        + \"-----------------------------------------\\n\"\n        + \" ├─ PQ Expressions: \" + Convert.ToString(Model.Expressions.Count()) + \"\\n\"\n        + \" │\\n\"\n        + \" └─ Tables: \" + Convert.ToString(Model.Tables.Count()) + \"\\n\"\n        + \"       ├─ Incremental Refresh Tables: \" + \n            Convert.ToString(Model.Tables.Where(\n                _ir => \n                Convert.ToString(_ir.EnableRefreshPolicy) \n                == \n                \"True\").Count()) + \"\\n\"\n                \n        + \"       │\\n\"\n        + \"       ├─ Calculated Tables: \" + \n            Convert.ToString(\n                Model.Tables.Where(\n                    _tables => \n                    Convert.ToString(_tables.Columns[0].Type) \n                    == \n                    \"CalculatedTableColumn\").Count()) + \"\\n\"\n\n        + \"       │   ├─ What if parameters: \" + \n            Convert.ToString(_whatifparameters) + \"\\n\"\n        + \"       │   └─ Field parameters: \" + \n            Convert.ToString(_fieldparameters) + \"\\n\"\n        + \"       │\\n\"\n        + \"       ├─ M Partitions: \" + \n            Convert.ToString(_partitions) + \"\\n\"\n        + \"       │\\n\"\n        + \"       └─ Total Table Columns: \" + \n            Convert.ToString(Model.AllColumns.Count()) + \"\\n\\n\"\n\n        + \"-----------------------------------------\\n\"\n        + \"DAX Objects\\n\"\n        + \"-----------------------------------------\\n\"\n        + \" ├─ Relationships: \" + \n            Convert.ToString(Model.Relationships.Count()) + \"\\n\"\n        + \" │   ├─ Bi-directional: \" + \n            Convert.ToString(Model.Relationships.Where(\n                _relationships => \n                Convert.ToString(_relationships.CrossFilteringBehavior) \n                == \n                \"BothDirections\").Count()) + \"\\n\"\n\n        + \" │   ├─ Many-to-Many: \" + \n            Convert.ToString(Model.Relationships.Where(\n                _relationships => \n                Convert.ToString(_relationships.FromCardinality) \n                == \n                \"Many\" \n                && \n                Convert.ToString(_relationships.ToCardinality) \n                == \n                \"Many\").Count()) + \"\\n\"\n\n        + \" │   ├─ One-to-One: \" + \n            Convert.ToString(Model.Relationships.Where(\n                _relationships => \n                Convert.ToString(_relationships.FromCardinality) \n                == \n                \"One\" \n                && \n                Convert.ToString(_relationships.ToCardinality) \n                == \n                \"One\").Count()) + \"\\n\"\n\n        + \" │   └─ Inactive: \" + \n            Convert.ToString(Model.Relationships.Where(\n                _relationships => \n                Convert.ToString(_relationships.IsActive) \n                == \n                \"False\").Count()) + \"\\n\"\n\n        + \" │\\n\"\n        + \" ├─ Calculation Groups: \" + \n            Convert.ToString(_calcgroups) + \"\\n\"\n        + \" │   └─ Calculation Items: \" + \n            Convert.ToString(_calcitems) + \"\\n\" \n        + \" │\\n\"\n        + \" ├─ Calculated Columns: \" + \n            Convert.ToString(Model.AllColumns.Where(\n                _columns => \n                Convert.ToString(_columns.Type) \n                == \n                \"Calculated\").Count()) + \"\\n\"\n\n        + \" │\\n\"\n        + \" └─ Measures: \" + \n            Convert.ToString(_measures) + \"\\n\" \n        + \"     └─ Avg. Lines of DAX: \" + \n            Convert.ToString(_numLines) + \" Lines \\n\" \n        + \"     └─ Avg. Chars of DAX: \" + \n            Convert.ToString(_numChars) + \" Characters \\n\\n\" \n       \n        + \"-----------------------------------------\\n\"\n        + \"Other Objects\\n\"\n        + \"-----------------------------------------\\n\"\n        + \" ├─ Data Security Roles: \" + \n            Convert.ToString(Model.Roles.Count()) + \"\\n\"\n        + \" ├─ Explicit Data Sources: \" + \n            Convert.ToString(Model.DataSources.Count()) + \"\\n\"\n        + \" ├─ Perspectives: \" + \n            Convert.ToString(Model.Perspectives.Count()) + \"\\n\"\n        + \" └─ Translations: \" + \n            Convert.ToString(Model.Cultures.Count()));\n",
      "Tooltip": "This script counts objects in your model and displays them in a pop-up info box. Use this script when you open a new model and need a 'helicopter view' on the content.",
      "ValidContexts": "Model"
    },
    {
      "Id": 44,
      "Name": "7. Official TE Library\\Calculated Table: Calendar",
      "Enabled": "true",
      "Execute": "// To use this C# Script:\n//\n// 1. Run the script\n// 2. Select the column that has the earliest date\n// 3. Select the column that has the latest date\n\n// List of all DateTime columns in the model\nvar _dateColumns = Model.AllColumns.Where(c => c.DataType == DataType.DateTime ).ToList();\n\n// Select the column with the earliest date in the model\ntry\n{\n    string _EarliestDate = \n        SelectColumn(\n            _dateColumns, \n            null, \n            \"Select the Column with the Earliest Date:\"\n        ).DaxObjectFullName;\n    \n    try\n    {\n        // Select the column with the latest date in the model\n        string _LatestDate = \n            SelectColumn(\n                _dateColumns, \n                null, \n                \"Select the Column with the Latest Date:\"\n            ).DaxObjectFullName;\n        \n        \n        // Create measure for reference date\n        var _RefDateMeasure = _dateColumns[0].Table.AddMeasure(\n            \"RefDate\",\n            \"CALCULATE ( MAX ( \" + _LatestDate + \" ), REMOVEFILTERS ( ) )\"\n        );\n        \n        \n        // Formatted date table DAX\n        // Based on date table from https://www.sqlbi.com/topics/date-table/\n        // To adjust, copy everything after the @\" into a DAX query window & replace\n        \n        var _DateDaxExpression = @\"-- Reference date for the latest date in the report\n        -- Until when the business wants to see data in reports\n        VAR _Refdate_Measure = [RefDate]\n        VAR _Today = TODAY ( )\n        \n        -- Replace with \"\"Today\"\" if [RefDate] evaluates blank\n        VAR _Refdate = IF ( ISBLANK ( _Refdate_Measure ), _Today, _Refdate_Measure )\n            VAR _RefYear        = YEAR ( _Refdate )\n            VAR _RefQuarter     = _RefYear * 100 + QUARTER(_Refdate)\n            VAR _RefMonth       = _RefYear * 100 + MONTH(_Refdate)\n            VAR _RefWeek_EU     = _RefYear * 100 + WEEKNUM(_Refdate, 2)\n        \n        -- Earliest date in the model scope\n        VAR _EarliestDate       = DATE ( YEAR ( MIN ( \" + _EarliestDate + @\" ) ) - 2, 1, 1 )\n        VAR _EarliestDate_Safe  = MIN ( _EarliestDate, DATE ( YEAR ( _Today ) + 1, 1, 1 ) )\n        \n        -- Latest date in the model scope\n        VAR _LatestDate_Safe    = DATE ( YEAR ( _Refdate ) + 2, 12, 1 )\n        \n        ------------------------------------------\n        -- Base calendar table\n        VAR _Base_Calendar      = CALENDAR ( _EarliestDate_Safe, _LatestDate_Safe )\n        ------------------------------------------\n        \n        \n        \n        ------------------------------------------\n        VAR _IntermediateResult = \n            ADDCOLUMNS ( _Base_Calendar,\n        \n                    ------------------------------------------\n                \"\"Calendar Year Number (ie 2021)\"\",           --|\n                    YEAR ([Date]),                          --|-- Year\n                                                            --|\n                \"\"Calendar Year (ie 2021)\"\",                  --|\n                    FORMAT ([Date], \"\"YYYY\"\"),                --|\n                    ------------------------------------------\n        \n                    ------------------------------------------\n                \"\"Calendar Quarter Year (ie Q1 2021)\"\",       --|\n                    \"\"Q\"\" &                                   --|-- Quarter\n                    CONVERT(QUARTER([Date]), STRING) &      --|\n                    \"\" \"\" &                                   --|\n                    CONVERT(YEAR([Date]), STRING),          --|\n                                                            --|\n                \"\"Calendar Year Quarter (ie 202101)\"\",        --|\n                    YEAR([Date]) * 100 + QUARTER([Date]),   --|\n                    ------------------------------------------\n        \n                    ------------------------------------------\n                \"\"Calendar Month Year (ie Jan 21)\"\",          --|\n                    FORMAT ( [Date], \"\"MMM YY\"\" ),            --|-- Month\n                                                            --|\n                \"\"Calendar Year Month (ie 202101)\"\",          --|\n                    YEAR([Date]) * 100 + MONTH([Date]),     --|\n                                                            --|\n                \"\"Calendar Month (ie Jan)\"\",                  --|\n                    FORMAT ( [Date], \"\"MMM\"\" ),               --|\n                                                            --|\n                \"\"Calendar Month # (ie 1)\"\",                  --|\n                    MONTH ( [Date] ),                       --|\n                    ------------------------------------------\n                    \n                    ------------------------------------------\n                \"\"Calendar Week EU (ie WK25)\"\",               --|\n                    \"\"WK\"\" & WEEKNUM( [Date], 2 ),            --|-- Week\n                                                            --|\n                \"\"Calendar Week Number EU (ie 25)\"\",          --|\n                    WEEKNUM( [Date], 2 ),                   --|\n                                                            --|\n                \"\"Calendar Year Week Number EU (ie 202125)\"\", --|\n                    YEAR ( [Date] ) * 100                   --|\n                    +                                       --|\n                    WEEKNUM( [Date], 2 ),                   --|\n                                                            --|\n                \"\"Calendar Week US (ie WK25)\"\",               --|\n                    \"\"WK\"\" & WEEKNUM( [Date], 1 ),            --|\n                                                            --|\n                \"\"Calendar Week Number US (ie 25)\"\",          --|\n                    WEEKNUM( [Date], 1 ),                   --|\n                                                            --|\n                \"\"Calendar Year Week Number US (ie 202125)\"\", --|\n                    YEAR ( [Date] ) * 100                   --|\n                    +                                       --|\n                    WEEKNUM( [Date], 1 ),                   --|\n                                                            --|\n                \"\"Calendar Week ISO (ie WK25)\"\",              --|\n                    \"\"WK\"\" & WEEKNUM( [Date], 21 ),           --|\n                                                            --|\n                \"\"Calendar Week Number ISO (ie 25)\"\",         --|\n                    WEEKNUM( [Date], 21 ),                  --|\n                                                            --|\n                \"\"Calendar Year Week Number ISO (ie 202125)\"\",--|\n                    YEAR ( [Date] ) * 100                   --|\n                    +                                       --|\n                    WEEKNUM( [Date], 21 ),                  --|\n                    ------------------------------------------\n        \n                    ------------------------------------------\n                \"\"Weekday Short (i.e. Mon)\"\",                 --|\n                    FORMAT ( [Date], \"\"DDD\"\" ),               --|-- Weekday\n                                                            --|\n                \"\"Weekday Name (i.e. Monday)\"\",               --|\n                    FORMAT ( [Date], \"\"DDDD\"\" ),              --|\n                                                            --|\n                \"\"Weekday Number EU (i.e. 1)\"\",               --|\n                    WEEKDAY ( [Date], 2 ),                  --|\n                    ------------------------------------------\n                    \n                    ------------------------------------------\n                \"\"Calendar Month Day (i.e. Jan 05)\"\",         --|\n                    FORMAT ( [Date], \"\"MMM DD\"\" ),            --|-- Day\n                                                            --|\n                \"\"Calendar Month Day (i.e. 0105)\"\",           --|\n                    MONTH([Date]) * 100                     --|\n                    +                                       --|\n                    DAY([Date]),                            --|\n                                                            --|\n                \"\"YYYYMMDD\"\",                                 --|\n                    YEAR ( [Date] ) * 10000                 --|\n                    +                                       --|\n                    MONTH ( [Date] ) * 100                  --|\n                    +                                       --|\n                    DAY ( [Date] ),                         --|\n                    ------------------------------------------\n        \n        \n                    ------------------------------------------\n                \"\"IsDateInScope\"\",                            --|\n                    [Date] <= _Refdate                      --|-- Boolean\n                    &&                                      --|\n                    YEAR([Date]) > YEAR(_EarliestDate),     --|\n                                                            --|\n                \"\"IsBeforeThisMonth\"\",                        --|\n                    [Date] <= EOMONTH ( _Refdate, -1 ),     --|\n                                                            --|\n                \"\"IsLastMonth\"\",                              --|\n                    [Date] <= EOMONTH ( _Refdate, 0 )       --|\n                    &&                                      --|\n                    [Date] > EOMONTH ( _Refdate, -1 ),      --|\n                                                            --|\n                \"\"IsYTD\"\",                                    --|\n                    MONTH([Date])                           --|\n                    <=                                      --|\n                    MONTH(EOMONTH ( _Refdate, 0 )),         --|\n                                                            --|\n                \"\"IsActualToday\"\",                            --|\n                    [Date] = _Today,                        --|\n                                                            --|\n                \"\"IsRefDate\"\",                                --|\n                    [Date] = _Refdate,                      --|\n                                                            --|\n                \"\"IsHoliday\"\",                                --|\n                    MONTH([Date]) * 100                     --|\n                    +                                       --|\n                    DAY([Date])                             --|\n                        IN {0101, 0501, 1111, 1225},        --|\n                                                            --|\n                \"\"IsWeekday\"\",                                --|\n                    WEEKDAY([Date], 2)                      --|\n                        IN {1, 2, 3, 4, 5})                 --|\n                    ------------------------------------------\n        \n        VAR _Result = \n            \n                    --------------------------------------------\n            ADDCOLUMNS (                                      --|\n                _IntermediateResult,                          --|-- Boolean #2\n                \"\"IsThisYear\"\",                                 --|\n                    [Calendar Year Number (ie 2021)]          --|\n                        = _RefYear,                           --|\n                                                            --|\n                \"\"IsThisMonth\"\",                                --|\n                    [Calendar Year Month (ie 202101)]         --|\n                        = _RefMonth,                          --|\n                                                            --|\n                \"\"IsThisQuarter\"\",                              --|\n                    [Calendar Year Quarter (ie 202101)]       --|\n                        = _RefQuarter,                        --|\n                                                            --|\n                \"\"IsThisWeek\"\",                                 --|\n                    [Calendar Year Week Number EU (ie 202125)]--|\n                        = _RefWeek_EU                         --|\n            )                                                 --|\n                    --------------------------------------------\n                    \n        RETURN \n            _Result\";\n        \n        // Create date table\n        var _date = Model.AddCalculatedTable(\n            \"Date\",\n            _DateDaxExpression\n        );\n        \n        //-------------------------------------------------------------------------------------------//\n        \n        // Sort by...\n        \n        // Sort Weekdays\n        (_date.Columns[\"Weekday Name (i.e. Monday)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Weekday Number EU (i.e. 1)\"] as CalculatedTableColumn);\n        (_date.Columns[\"Weekday Short (i.e. Mon)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Weekday Number EU (i.e. 1)\"] as CalculatedTableColumn);\n        \n        // Sort Weeks\n        (_date.Columns[\"Calendar Week EU (ie WK25)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Week Number EU (ie 25)\"] as CalculatedTableColumn);\n        (_date.Columns[\"Calendar Week ISO (ie WK25)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Week Number ISO (ie 25)\"] as CalculatedTableColumn);\n        (_date.Columns[\"Calendar Week US (ie WK25)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Week Number US (ie 25)\"] as CalculatedTableColumn);\n        \n        // Sort Months\n        (_date.Columns[\"Calendar Month (ie Jan)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Month # (ie 1)\"] as CalculatedTableColumn);\n        (_date.Columns[\"Calendar Month Day (i.e. Jan 05)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Month Day (i.e. 0105)\"] as CalculatedTableColumn);\n        (_date.Columns[\"Calendar Month Year (ie Jan 21)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Year Month (ie 202101)\"] as CalculatedTableColumn);\n        \n        // Sort Quarters\n        (_date.Columns[\"Calendar Quarter Year (ie Q1 2021)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Year Quarter (ie 202101)\"] as CalculatedTableColumn);\n        \n        // Sort Years\n        (_date.Columns[\"Calendar Year (ie 2021)\"] as CalculatedTableColumn).SortByColumn = (_date.Columns[\"Calendar Year Number (ie 2021)\"] as CalculatedTableColumn);\n        \n        \n        //-------------------------------------------------------------------------------------------//\n        \n        \n        // For all the columns in the date table:\n        foreach (var c in _date.Columns )\n        {\n        c.DisplayFolder = \"7. Boolean Fields\";\n        c.IsHidden = true;\n        \n        // Organize the date table into folders\n            if ( ( c.DataType == DataType.DateTime & c.Name.Contains(\"Date\") ) )\n                {\n                c.DisplayFolder = \"6. Calendar Date\";\n                c.IsHidden = false;\n                c.IsKey = true;\n                }\n        \n            if ( c.Name == \"YYMMDDDD\" )\n                {\n                c.DisplayFolder = \"6. Calendar Date\";\n                c.IsHidden = true;\n                }\n        \n            if ( c.Name.Contains(\"Year\") & c.DataType != DataType.Boolean )\n                {\n                c.DisplayFolder = \"1. Year\";\n                c.IsHidden = false;\n                }\n        \n            if ( c.Name.Contains(\"Week\") & c.DataType != DataType.Boolean )\n                {\n                c.DisplayFolder = \"4. Week\";\n                c.IsHidden = true;\n                }\n        \n            if ( c.Name.Contains(\"day\") & c.DataType != DataType.Boolean )\n                {\n                c.DisplayFolder = \"5. Weekday / Workday\\\\Weekday\";\n                c.IsHidden = false;\n                }\n        \n            if ( c.Name.Contains(\"Month\") & c.DataType != DataType.Boolean )\n                {\n                c.DisplayFolder = \"3. Month\";\n                c.IsHidden = false;\n                }\n        \n            if ( c.Name.Contains(\"Quarter\") & c.DataType != DataType.Boolean )\n                {\n                c.DisplayFolder = \"2. Quarter\";\n                c.IsHidden = false;\n                }\n        \n        }\n        \n        // Mark as date table\n        _date.DataCategory = \"Time\";\n        \n        \n        //-------------------------------------------------------------------------------------------//\n        \n        \n        // Create Workdays MTD, QTD, YTD logic \n        //      (separate into measures & calc. column to be easier to maintain)\n        //\n        // Add calculated columns for Workdays MTD, QTD, YTD\n        \n        string _WorkdaysDax = @\"VAR _Holidays =\n            CALCULATETABLE (\n                DISTINCT ('Date'[Date]),\n                'Date'[IsHoliday] <> TRUE\n            )\n        VAR _WeekdayName = CALCULATE ( SELECTEDVALUE ( 'Date'[Weekday Short (i.e. Mon)] ) )\n        VAR _WeekendDays = SWITCH (\n                _WeekdayName,\n                \"\"Sat\"\", 2,\n                \"\"Sun\"\", 3,\n                0\n            )\n        VAR _WorkdaysMTD =\n            CALCULATE (\n                NETWORKDAYS (\n                    CALCULATE (\n                        MIN ('Date'[Date]),\n                        ALLEXCEPT ('Date', 'Date'[Calendar Month Year (ie Jan 21)])\n                    ),\n                    CALCULATE (MAX ('Date'[Date]) - _WeekendDays),\n                    1,\n                    _Holidays\n                )\n            )\n                + 1\n        RETURN\n            IF (_WorkdaysMTD < 1, 1, _WorkdaysMTD)\";\n        \n        _date.AddCalculatedColumn(\n            \"Workdays MTD\",\n            _WorkdaysDax,\n            \"5. Weekday / Workday\\\\Workdays\"\n        );\n        \n        _date.AddCalculatedColumn(\n            \"Workdays QTD\",\n            _WorkdaysDax.Replace(\"'Date'[Calendar Month Year (ie Jan 21)]\", \"'Date'[Calendar Quarter Year (ie Q1 2021)]\"),\n            \"5. Weekday / Workday\\\\Workdays\"\n        );\n        \n        _date.AddCalculatedColumn(\n            \"Workdays YTD\",\n            _WorkdaysDax.Replace(\"'Date'[Calendar Month Year (ie Jan 21)]\", \"'Date'[Calendar Year (ie 2021)]\"),\n            \"5. Weekday / Workday\\\\Workdays\"\n        );\n        \n        \n        //-------------------------------------------------------------------------------------------//\n        \n        \n        // Create measures for showing how many workdays passed\n        _WorkdaysDax = @\"CALCULATE(\n            MAX( 'Date'[Workdays MTD] ),\n            'Date'[IsDateInScope] = TRUE\n        )\";\n        \n        _date.AddMeasure(\n            \"# Workdays MTD\",\n            _WorkdaysDax,\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        _date.AddMeasure(\n            \"# Workdays QTD\",\n            _WorkdaysDax.Replace(\"MTD\", \"QTD\"),\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        _date.AddMeasure(\n            \"# Workdays YTD\",\n            _WorkdaysDax.Replace(\"MTD\", \"YTD\"),\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        // Create measures showing how many workdays are in the selected period\n        \n        _WorkdaysDax = @\"IF (\n            HASONEVALUE ('Date'[Calendar Month Year (ie Jan 21)]),\n            CALCULATE (\n                MAX ('Date'[Workdays MTD]),\n                VALUES ('Date'[Calendar Month Year (ie Jan 21)])\n            )\n        )\";\n        \n        _date.AddMeasure(\n            \"# Workdays in Selected Month\",\n            _WorkdaysDax,\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        _date.AddMeasure(\n            \"# Workdays in Selected Quarter\",\n            _WorkdaysDax.Replace(\"MTD\", \"QTD\").Replace(\"'Date'[Calendar Month Year (ie Jan 21)]\", \"'Date'[Calendar Quarter Year (ie Q1 2021)]\"),\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        _date.AddMeasure(\n            \"# Workdays in Selected Year\",\n            _WorkdaysDax.Replace(\"MTD\", \"YTD\").Replace(\"'Date'[Calendar Month Year (ie Jan 21)]\", \"'Date'[Calendar Year (ie 2021)]\"),\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        \n        // Create measures showing how many workdays passed as a %\n        \n        _WorkdaysDax = @\"IF (\n            HASONEVALUE ('Date'[Calendar Month Year (ie Jan 21)]),\n            MROUND (\n                DIVIDE ([# Workdays MTD], [# Workdays in Selected Month]),\n                0.01\n            )\n        )\";\n        \n        _date.AddMeasure(\n            \"% Workdays MTD\",\n            _WorkdaysDax,\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        _date.AddMeasure(\n            \"% Workdays QTD\",\n            _WorkdaysDax.Replace(\"MTD\", \"QTD\").Replace(\"'Date'[Calendar Month Year (ie Jan 21)]\", \"'Date'[Calendar Quarter Year (ie Q1 2021)]\").Replace(\"Month\", \"Quarter\"),\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        _date.AddMeasure(\n            \"% Workdays YTD\",\n            _WorkdaysDax.Replace(\"MTD\", \"YTD\").Replace(\"'Date'[Calendar Month Year (ie Jan 21)]\", \"'Date'[Calendar Year (ie 2021)]\").Replace(\"Month\", \"Year\"),\n            \"5. Weekday / Workday\\\\Measures\\\\# Workdays\"\n        );\n        \n        \n        //-------------------------------------------------------------------------------------------//\n        \n        \n        // Move the reference measure to the newly created 'Date' table.\n        _RefDateMeasure.Delete();\n        _RefDateMeasure = Model.Tables[\"Date\"].AddMeasure(\n            \"RefDate\",\n            \"CALCULATE ( MAX ( \" + _LatestDate + \" ), REMOVEFILTERS ( ) )\",\n            \"0. Measures\"\n        );\n        \n        _RefDateMeasure.IsHidden = true;\n        \n        Info ( \"Created a new, organized 'Date' table based on the template in the C# Script.\\nThe Earliest Date is taken from \" + _EarliestDate + \"\\nThe Latest Date is taken from \" + _LatestDate );\n    \n        }\n        catch\n        {\n            Error( \"Latest column not selected! Ending script without making changes.\" );\n        }\n}\ncatch\n{\n    Error( \"Earliest column not selected! Ending script without making changes.\" );\n}\n\n",
      "Tooltip": "Create Date Table based on 1-2 selected date columns",
      "ValidContexts": "Model"
    },
    {
      "Id": 45,
      "Name": "7. Official TE Library\\TE3\\Create New M Parameter and Add it to Existing M Partitions",
      "Enabled": "true",
      "Execute": "// This script creates a new M Parameter as a 'Shared Expression'.\n// It will also find the default value in all M partitions and replace them with the parameter object name.\n//#r \"System.Drawing\"\n\nusing System.Drawing;\nusing System.Text.RegularExpressions;\nusing System.Windows.Forms;\n\n// Hide the 'Running Macro' spinbox\nScriptHelper.WaitFormVisible = false;\n\n// Initialize variables\nstring _ParameterName = \"New Parameter\";\nstring _ParameterValue = \"ParameterValue\";\n\n// WinForms prompt to get Parameter Name / Value input\nusing (Form prompt = new Form())\n{\n    Font formFont = new Font(\"Segoe UI\", 11); \n\n    // Prompt config\n    prompt.AutoSize = true;\n    prompt.MinimumSize = new Size(380, 120);\n    prompt.Text = \"Create New M Parameter\";\n    prompt.StartPosition = FormStartPosition.CenterScreen;\n\n    // Find: label\n    Label parameterNameLabel = new Label() { Text = \"Enter Name:\" };\n    parameterNameLabel.Location = new Point(20, 20);\n    parameterNameLabel.AutoSize = true;\n    parameterNameLabel.Font = formFont;\n\n    // Textbox for inputing the substring text\n    TextBox parameterNameBox = new TextBox();\n    parameterNameBox.Width = 200;\n    parameterNameBox.Location = new Point(parameterNameLabel.Location.X + parameterNameLabel.Width + 20, parameterNameLabel.Location.Y - 4);\n    parameterNameBox.SelectedText = \"New Parameter\";\n    parameterNameBox.Font = formFont;\n\n    // Replace: label\n    Label parameterValueLabel = new Label() { Text = \"Enter Value:\" };\n    parameterValueLabel.Location = new Point(parameterNameLabel.Location.X, parameterNameLabel.Location.Y + parameterNameLabel.Height + 20);\n    parameterValueLabel.AutoSize = true;\n    parameterValueLabel.Font = formFont;\n\n    // Textbox for inputting the substring text\n    TextBox parameterValueBox = new TextBox() { Left = parameterValueLabel.Right + 20, Top = parameterValueLabel.Location.Y - 4, Width = parameterNameBox.Width };\n    parameterValueBox.SelectedText = \"Parameter Value\";\n    parameterValueBox.Font = formFont;\n\n    // OK Button\n    Button okButton = new Button() { Text = \"Create\", Left = 20, Width = 75, Top = parameterValueBox.Location.Y + parameterValueBox.Height + 20 };\n    okButton.MinimumSize = new Size(75, 25);\n    okButton.AutoSize = true;\n    okButton.Font = formFont;\n\n    // Cancel Button\n    Button cancelButton = new Button() { Text = \"Cancel\", Left = okButton.Location.X + okButton.Width + 10, Top = okButton.Location.Y };\n    cancelButton.MinimumSize = new Size(75, 25);\n    cancelButton.AutoSize = true;\n    cancelButton.Font = formFont;\n\n    // Button actions\n    okButton.Click += (sender, e) => { _ParameterName = parameterNameBox.Text; _ParameterValue = parameterValueBox.Text; prompt.DialogResult = DialogResult.OK; };\n    cancelButton.Click += (sender, e) => { prompt.DialogResult = DialogResult.Cancel; };\n\n    prompt.AcceptButton = okButton;\n    prompt.CancelButton = cancelButton;\n\n    prompt.Controls.Add(parameterNameLabel);\n    prompt.Controls.Add(parameterNameBox);\n    prompt.Controls.Add(parameterValueLabel);\n    prompt.Controls.Add(parameterValueBox);\n    prompt.Controls.Add(okButton);\n    prompt.Controls.Add(cancelButton);\n\n    // The user clicked OK, so perform the find-and-replace logic\n    if (prompt.ShowDialog() == DialogResult.OK)\n    {\n\n        // Creates the parameter\n        Model.AddExpression( \n            _ParameterName, \n            @\"\n        \"\"\" + _ParameterValue +\n        @\"\"\" meta\n        [\n            IsParameterQuery = true,\n            IsParameterQueryRequired = true,\n            Type = type text\n        ]\"\n        );\n        \n        \n        // Informs the user that the parameter was successfully created\n        Info ( \n            \"Successfully created a new parameter: \" + @\"\"\"\" +\n            _ParameterName + @\"\"\"\" +\n            \"\\nDefault value: \" + @\"\"\"\" +\n            _ParameterValue + @\"\"\"\");\n        \n        \n        // Finds the parameter default value in M Partitions & replaces with the parameter name\n        string _Find = @\"\"\"\" + _ParameterValue + @\"\"\"\";\n        string _Replace = @\"#\"\"\" + _ParameterName + @\"\"\"\";\n        \n        int _NrMPartitions = 0;\n        int _NrReplacements = 0;\n        var _ReplacementsList = new List<string>();\n        \n        foreach ( var _Tables in Model.Tables )\n        {\n            foreach ( var _p in _Tables.Partitions )\n            {\n                if ( _p.SourceType == PartitionSourceType.M )\n                {\n                    if ( _p.Expression != _p.Expression.Replace( _Find, _Replace ) )\n                    {\n                        _p.Expression = _p.Expression.Replace( _Find, _Replace );\n        \n                        // Tracks which M partitions were replaced (and how many)\n                        _NrReplacements = _NrReplacements + 1;\n                        _ReplacementsList.Add( _p.Name );\n                    }\n        \n                // Counts the total # M Partitions\n                _NrMPartitions = _NrMPartitions + 1;\n                }\n            }\n        }\n        \n        \n        // Makes a bulleted list of all the M partitions that were replaced\n        string _ReplacedPartitions = \" • \" + String.Join(\"\\n • \", _ReplacementsList );\n        \n        \n        // Informs \n        //      - Whether the Find & Replace was successful\n        //      - How many M partitions were replaced\n        //      - Which M partitions had the Find & Replace done\n        Info (\n            \"Successfully replaced\\n\\n \" +\n            _Find + \n            \"\\n\\n with: \\n\\n\" + \n            _Replace + \n            \"\\n\\n in \" + \n            Convert.ToString(_NrReplacements) +\n            \" of \" +\n            Convert.ToString(_NrMPartitions) +  \n            \" M Partitions:\\n\" +\n            _ReplacedPartitions\n        );\n\n    }\n    else\n    {\n    Error ( \"Cancelled input! Ended script without changes.\");\n    }\n}\n",
      "Tooltip": "If you want to replace a string in model M Partitions (i.e. connection string, filter condition, column name, etc.) with a parameter value.",
      "ValidContexts": "Model"
    },
    {
      "Id": 46,
      "Name": "7. Official TE Library\\TE3\\Format Power Query",
      "Enabled": "true",
      "Execute": "// This script formats the Power Query (M Code) of any selected M Partition (not Shared Expression or Source Expression).\n// It will send an HTTPS POST request of the expression to the Power Query Formatter API and replace the code with the result.\n//\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\n\n// URL of the powerqueryformatter.com API\nstring powerqueryformatterAPI = \"https://m-formatter.azurewebsites.net/api/v2\";\n\n// HttpClient method to initiate the API call POST method for the URL\nHttpClient client = new HttpClient();\nHttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, powerqueryformatterAPI);\n\n// Get the M Expression of the selected partition\nstring partitionExpression = Selected.Partition.Expression;\n\n// Serialize the request body as a JSON object\nvar requestBody = JsonConvert.SerializeObject(\n    new { \n        code = partitionExpression, \n        resultType = \"text\", \n        lineWidth = 40, \n        alignLineCommentsToPosition = true, \n        includeComments = true\n    });\n\n// Set the \"Content-Type\" header of the request to \"application/json\" and the encoding to UTF-8\nvar content = new StringContent(requestBody, Encoding.UTF8, \"application/json\");\ncontent.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\n\n// Retrieve the response\nvar response = client.PostAsync(powerqueryformatterAPI, content).Result;\n\n// If the response is successful\nif (response.IsSuccessStatusCode)\n{\n    // Get the result of the response\n    var result = response.Content.ReadAsStringAsync().Result;\n\n    // Parse the response JSON object from the string\n    JObject data = JObject.Parse(result.ToString());\n\n    // Get the formatted Power Query response\n    string formattedPowerQuery = (string)data[\"result\"];\n\n    ///////////////////////////////////////////////////////////////////////\n    // OPTIONAL MANUAL FORMATTING\n    // Manually add a new line and comment to each step\n    var replace = new Dictionary<string, string> \n    { \n        { \" //\", \"\\n\\n//\" }, \n        { \"\\n  #\", \"\\n\\n  // Step\\n  #\" }, \n        { \"\\n  Source\", \"\\n\\n  // Data Source\\n  Source\" }, \n        { \"\\n  Dataflow\", \"\\n\\n  // Dataflow Connection Info\\n  Dataflow\" }, \n        {\"\\n  Data =\", \"\\n\\n  // Step\\n  Data =\"}, \n        {\"\\n  Navigation =\", \"\\n\\n  // Step\\n  Navigation =\"}, \n        {\"in\\n\\n  // Step\\n  #\", \"in\\n  #\"}, \n        {\"\\nin\", \"\\n\\n// Result\\nin\"} \n    };\n\n    // Replace the first string in the dictionary with the second\n    var manuallyformattedPowerQuery = replace.Aggregate(\n        formattedPowerQuery, \n        (before, after) => before.Replace(after.Key, after.Value));\n\n    // Replace the auto-formatted code with the manually formatted version\n    formattedPowerQuery = manuallyformattedPowerQuery;\n    ////////////////////////////////////////////////////////////////////////\n\n    // Replace the unformatted M expression with the formatted expression\n    Selected.Partition.Expression = formattedPowerQuery;\n\n    // Pop-up to inform of completion\n    Info(\"Formatted \" + Selected.Partition.Name);\n}\n\n// Otherwise return an error message\nelse\n{\nInfo(\n    \"API call unsuccessful.\" +\n    \"\\nCheck that you are selecting a partition with a valid M Expression.\"\n    );\n}\n",
      "Tooltip": "If you want to format complex Power Query to make it more readable and easy to change.",
      "ValidContexts": "Partition"
    },
    {
      "Id": 47,
      "Name": "7. Official TE Library\\TE3\\View & Remove Measures with Errors",
      "Enabled": "true",
      "Execute": "// This script scans the model and shows all measures with errors, giving the option to remove them.\n//\n// .GetCachedSemantics(...) method is only available in TE3\nusing System.Windows.Forms;\n\n// Hide the 'Running Macro' spinbox\nScriptHelper.WaitFormVisible = false;\n\n// Get all the measures that have errors\nvar measuresWithError = Model.AllMeasures.Where(m => m.GetCachedSemantics(ExpressionProperty.Expression).HasError).ToList();\n//Prior to Tabular Editor 3.12.0 the GetSemantics method must be used.\n//var measuresWithError = Model.AllMeasures.Where(m => m.GetSemantics(ExpressionProperty.Expression).HasError).ToList();\n\n// If no measures with errors, end script with error.\nif ( measuresWithError.Count == 0 )\n{ \nInfo ( \"No measures with errors! 👍\" );\n}\n\n// Handle erroneous measures\nelse \n{\n\n// View the list of measures with an error\nmeasuresWithError.Output();\n\n//   From the list, you can select 1 or more measures to delete\nvar _ToDelete = SelectObjects(measuresWithError, measuresWithError, \"Select measures to delete.\\nYou will be able to export a back-up, later.\");\n\n    // Delete the selected measures\n    try\n    {\n        foreach ( var _m in _ToDelete ) \n            {\n                _m.Delete();\n            }\n    \n        Info ( \n            \"Deleted \" + \n            Convert.ToString(_ToDelete.Count()) + \n            \" measures with errors.\" \n        );\n    \n        // Create an instance of the FolderBrowserDialog class\n        FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();\n        \n        // Set the title of the dialog box\n        folderBrowserDialog.Description = \"Select a directory to output a backup of the deleted measures.\";\n        \n        // Set the root folder of the dialog box\n        folderBrowserDialog.RootFolder = Environment.SpecialFolder.MyComputer;\n        \n        // Show the dialog box and get the result\n        DialogResult result = folderBrowserDialog.ShowDialog();\n        \n        // Check if the user clicked the OK button and get the selected path\n        if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(folderBrowserDialog.SelectedPath))\n            {\n                // Get the output path as a string\n                string _outputPath = folderBrowserDialog.SelectedPath;\n                \n                // Get the properties of the deleted measures\n                var _backup = ExportProperties( _ToDelete );\n    \n                // Save a backup of the deleted measures\n                SaveFile( _outputPath + \"/DeletedMeasures-\" + Model.Name + DateTime.Today.ToString(\"-yyyy-MM-dd\") + \".tsv\", _backup);\n    \n                Info ( \n                    \"Exported a backup of \" + \n                    Convert.ToString(_ToDelete.Count()) +\n                    \" Measures to \" + \n                    _outputPath\n                );\n            }\n    }\n    catch\n    // Display an info box if no measure was selected\n    {\n    Info ( \"No measure selected.\" );\n    }\n}\n\n",
      "Tooltip": "If you want to see all the measures that have errors and have the option to delete them from the model, saving a back-up .tsv of the deleted measures to a selected directory (in case you want to re-add them, later).",
      "ValidContexts": "Model"
    },
    {
      "Id": 48,
      "Name": "7. Official TE Library\\Find & Replace Substring in Measures",
      "Enabled": "true",
      "Execute": "#r \"System.Drawing\"\n\nusing System.Drawing;\nusing System.Text.RegularExpressions;\nusing System.Windows.Forms;\n\n// Hide the 'Running Macro' spinbox\nScriptHelper.WaitFormVisible = false;\n\n// Replace Selected.Measures with Model.AllMeasures to scan all measures\nvar _measures = Model.AllMeasures;\n    // Optional: Replace _m.Expression with _m.Name to find & replace in names.\n\n// Initialize _find and _replace string variables\nstring _find = \"Find\";\nstring _replace = \"Replace\";\n\n// WinForms prompt to get Find & Replace input\nusing (Form prompt = new Form())\n{\n    Font formFont = new Font(\"Segoe UI\", 11); \n\n    // Prompt config\n    prompt.AutoSize = true;\n    prompt.MinimumSize = new Size(350, 120);\n    prompt.Text = \"Find and Replace Dialog\";\n    prompt.StartPosition = FormStartPosition.CenterScreen;\n\n    // Set the AutoScaleMode property to Dpi\n    prompt.AutoScaleMode = AutoScaleMode.Dpi;\n\n    // Find: label\n    Label findLabel = new Label() { Text = \"Find:\" };\n    findLabel.Location = new Point(20, 20);\n    findLabel.Width = 80;\n    findLabel.Font = formFont;\n\n    // Textbox for inputing the substring text\n    TextBox findBox = new TextBox();\n    findBox.Width = 200;\n    findBox.Location = new Point(findLabel.Location.X + findLabel.Width + 20, findLabel.Location.Y - 4);\n    findBox.SelectedText = \"Find this Text\";\n    findBox.Font = formFont;\n\n    // Replace: label\n    Label replaceLabel = new Label() { Left = 20, Top = 60, Text = \"Replace:\" };\n    replaceLabel.Width = 80;\n    replaceLabel.Font = formFont;\n\n    // Textbox for inputting the substring text\n    TextBox replaceBox = new TextBox() { Left = replaceLabel.Right + 20, Top = replaceLabel.Location.Y - 4, Width = findBox.Width };\n    replaceBox.SelectedText = \"Replace with this Text\";\n    replaceBox.Font = formFont;\n\n    // OK Button\n    Button okButton = new Button() { Text = \"OK\", Left = 20, Width = 75, Top = replaceBox.Location.Y + replaceBox.Height + 20 };\n    okButton.MinimumSize = new Size(75, 25);\n    okButton.AutoSize = true;\n    okButton.Font = formFont;\n\n    // Cancel Button\n    Button cancelButton = new Button() { Text = \"Cancel\", Left = okButton.Location.X + okButton.Width + 10, Top = okButton.Location.Y };\n    cancelButton.MinimumSize = new Size(75, 25);\n    cancelButton.AutoSize = true;\n    cancelButton.Font = formFont;\n\n    // Button actions\n    okButton.Click += (sender, e) => { _find = findBox.Text; _replace = replaceBox.Text; prompt.DialogResult = DialogResult.OK; };\n    cancelButton.Click += (sender, e) => { prompt.DialogResult = DialogResult.Cancel; };\n\n    prompt.AcceptButton = okButton;\n    prompt.CancelButton = cancelButton;\n\n    prompt.Controls.Add(findLabel);\n    prompt.Controls.Add(findBox);\n    prompt.Controls.Add(replaceLabel);\n    prompt.Controls.Add(replaceBox);\n    prompt.Controls.Add(okButton);\n    prompt.Controls.Add(cancelButton);\n\n    // The user clicked OK, so perform the find-and-replace logic\n    if (prompt.ShowDialog() == DialogResult.OK)\n        {\n            \n            int _occurrences = 0;\n            var _ReplacedList = new List<string>();\n    \n            foreach (var _m in _measures)\n                {\n                    if (_m.Expression != _m.Expression.Replace(_find, _replace))\n                        {\n                            try\n                                {\n                                    // Count number of occurrences of _find substring in the string\n                                    string _pattern = Regex.Escape(_find);\n                                    _occurrences = Regex.Matches(_m.Expression, _pattern).Count;\n                                }\n                            catch\n                                {\n                                    // If it's not found there are 0 occurrences\n                                    _occurrences = 0;\n                                }\n            \n                            // Perform the Find/Replace\n                            _m.Expression = _m.Expression.Replace(_find, _replace);\n                            _ReplacedList.Add(_m.DaxObjectName);\n                        }\n                }\n    \n            // Create a list of all the measures replaced\n            string _Replaced = _ReplacedList.Count > 0\n                ? \"\\n\\nMeasures with Replacements:\\n • \" + string.Join(\"\\n • \", _ReplacedList)\n                : \"\";\n    \n            // Return a success Info box pop-up\n            Info(\n                \"Replaced \" + \n                _occurrences + \n                \" occurrences of '\" + \n                _find + \n                \"' with '\" + \n                _replace + \n                \"'\" + \n                _Replaced);\n        }\n    else\n        {\n            Error(\"Find/Replace cancelled!\");\n        }\n}\n\n",
      "Tooltip": "Will find & replace a substring in the model's measures DAX expression.",
      "ValidContexts": "Model"
    }
